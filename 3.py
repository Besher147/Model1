{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a26ed155-275a-40b0-add5-80dfa2778398",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Integrating Relational Texts with Image Components Using Convolutional Neural Networks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "51e78ab2-cc36-48c5-bbc1-778ca65ad7a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\Hisoka\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class distribution: Counter({'White.': 493, 'Black.': 279, 'Blue.': 256, 'Green.': 255, 'Brown.': 211, 'Red.': 176, 'Wood.': 117, 'Trees.': 104, 'Grass.': 100, 'Yellow.': 94, 'Gray.': 88, 'Grey.': 58, 'Metal.': 58, 'Snow.': 53, 'Water.': 52, 'Orange.': 50, 'Black and white.': 45, 'Clouds.': 36, 'Silver.': 36, 'Surfing.': 35, 'Dirt.': 33, 'Tan.': 32, 'Food.': 29, 'Skiing.': 29, 'Dog.': 28, 'Glasses.': 26, 'Standing.': 24, 'Tennis.': 23, 'Tile.': 22, 'Train.': 22, 'Mountains.': 22, 'Rocks.': 22, 'Walking.': 22, 'Skateboarding.': 22, 'The sky.': 21, 'Flowers.': 21, 'Concrete.': 21, 'Fence.': 21, 'Pizza.': 21, 'Pink.': 20, 'Baseball.': 20, 'Eating.': 20, 'A building.': 20, 'Leaves.': 19, 'Blue and white.': 19, 'Round.': 19, 'Table.': 19, 'Brick.': 19, 'Sheep.': 19, 'Glass.': 19, 'A cat.': 18, 'Frisbee.': 18, 'A hat.': 18, 'Stripes.': 18, 'Building.': 17, 'Tracks.': 17, 'Giraffe.': 17, 'Two.': 16, 'A train.': 16, 'Clear.': 16, 'Cat.': 16, 'Purple.': 16, 'Gravel.': 16, 'Buildings.': 16, 'A helmet.': 16, 'Hat.': 16, 'Elephant.': 16, 'Sand.': 16, 'A surfboard.': 15, 'Sunglasses.': 15, 'Clock.': 15, 'Skateboard.': 15, 'A window.': 15, 'Bus.': 15, 'Skis.': 15, 'Sky.': 15, 'Brown and white.': 15, 'A tree.': 15, 'Gold.': 14, 'Beige.': 14, 'Lights.': 14, 'Bench.': 14, 'A bus.': 14, 'Ski poles.': 14, 'Male.': 14, 'An umbrella.': 14, 'A dog.': 14, 'Daytime.': 14, 'Left.': 14, 'Birds.': 13, 'Square.': 13, 'Helmet.': 13, 'Zebras.': 13, 'Sleeping.': 13, 'Sunny.': 13, 'One.': 13, 'A skateboard.': 13, 'Broccoli.': 13, 'Jeans.': 13, 'Wall.': 13, 'Kitchen.': 13, 'Tree.': 13, 'Right.': 13, 'Afternoon.': 13, 'Windows.': 12, 'Laptop.': 12, 'Fruit.': 12, 'Bathroom.': 12, 'Red and white.': 12, 'A horse.': 12, 'Plane.': 12, 'A laptop.': 12, 'Sitting.': 12, 'Cement.': 12, 'A fork.': 11, 'Window.': 11, 'Bricks.': 11, 'Shadows.': 11, 'Plastic.': 11, 'Motorcycle.': 11, 'Female.': 11, 'Umbrella.': 11, 'Zebra.': 11, 'Cloudy.': 11, 'A frisbee.': 11, 'Elephants.': 11, 'Bananas.': 11, 'A knife.': 11, 'Stone.': 10, 'Waves.': 10, 'Sign.': 10, 'Horses.': 10, 'Cows.': 10, 'Plate.': 10, 'Boots.': 10, 'Boats.': 10, 'Cars.': 10, 'Bird.': 10, 'A kite.': 9, 'Shoes.': 9, 'Winter.': 9, 'Sneakers.': 9, 'Shorts.': 9, 'Plants.': 9, 'Vegetables.': 9, 'Grazing.': 9, 'A sign.': 9, 'A mirror.': 9, 'Plaid.': 9, 'Smoke.': 9, 'A bear.': 9, 'A fence.': 9, 'Flying.': 9, 'Cheese.': 9, 'Airplane.': 9, 'A plate.': 9, 'Green grass.': 9, 'Pole.': 9, 'A table.': 8, 'A giraffe.': 8, 'Truck.': 8, 'A sandwich.': 8, 'Fork.': 8, 'The grass.': 8, 'Red and black.': 8, 'Playing tennis.': 8, 'Surfboard.': 8, 'Toilet.': 8, 'Stop.': 8, 'Banana.': 8, 'Helmets.': 8, 'A pizza.': 8, 'Carpet.': 8, 'Knife.': 8, 'Shadow.': 8, 'Day time.': 7, 'A bench.': 7, 'A bathroom.': 7, 'The bear.': 7, 'A backpack.': 7, 'Horse.': 7, 'Tires.': 7, 'Car.': 7, 'Rectangle.': 7, 'Chocolate.': 7, 'A bag.': 7, 'A phone.': 7, 'Cow.': 7, 'A racket.': 7, 'Striped.': 7, 'Hills.': 7, 'A wall.': 7, 'Umbrellas.': 7, 'Running.': 7, 'An elephant.': 7, 'A chair.': 7, 'Light.': 7, 'A bat.': 7, 'Jacket.': 7, 'Wine.': 7, 'A tie.': 6, 'Curtains.': 6, 'Octagon.': 6, 'Leather.': 6, 'Animals.': 6, 'Roman numerals.': 6, 'The table.': 6, 'The plane.': 6, 'Green and white.': 6, '1.': 6, 'Yellow and black.': 6, 'A wave.': 6, 'Dogs.': 6, 'Donuts.': 6, 'Bed.': 6, 'A car.': 6, 'Ocean.': 6, 'Watch.': 6, 'A plane.': 6, 'Hay.': 6, 'Smiling.': 6, 'Bicycle.': 6, 'A cake.': 6, 'Orange and white.': 6, 'Wires.': 6, 'Lettuce.': 6, 'Gloves.': 6, 'Double decker.': 6, 'Teddy bear.': 6, 'Salad.': 6, 'Snowboarding.': 6, 'Cake.': 6, 'The train.': 6, 'Chinese.': 6, 'A man.': 6, 'A collar.': 6, 'Ceramic.': 6, 'Cell phone.': 6, 'The man.': 6, 'Snowboard.': 6, 'A pole.': 6, 'A motorcycle.': 6, 'A boat.': 6, 'Skateboards.': 6, 'A bird.': 5, 'Sunlight.': 5, 'Bears.': 5, 'Street.': 5, 'Graffiti.': 5, 'Wire.': 5, 'Paper.': 5, 'Cream.': 5, 'Sun.': 5, 'Four.': 5, 'Peppers.': 5, 'A bed.': 5, 'Overcast.': 5, 'The water.': 5, 'Power lines.': 5, 'A circle.': 5, 'Boat.': 5, 'Buses.': 5, 'Fur.': 5, 'Pillow.': 5, 'A house.': 5, 'Oranges.': 5, 'Mirror.': 5, 'Playing a video game.': 5, 'Chairs.': 5, 'White and black.': 5, 'Desk.': 5, 'Collar.': 5, 'A clock.': 5, 'Jumping.': 5, 'Bushes.': 5, 'Bat.': 5, 'Blanket.': 5, 'Train tracks.': 5, 'A tennis racket.': 5, 'Wooden.': 5, 'Dark blue.': 5, 'Horns.': 5, 'Road.': 5, 'Sidewalk.': 5, 'Passengers.': 5, 'The clock.': 5, 'Pepperoni.': 5, 'A snowboard.': 5, 'A hill.': 5, 'Tiles.': 5, 'Apples.': 5, 'White and blue.': 5, 'Evening.': 4, 'Kites.': 4, 'Blue shirt.': 4, 'A smile.': 4, 'Playing.': 4, 'A purse.': 4, 'A jacket.': 4, 'A cell phone.': 4, 'Luggage.': 4, 'A teddy bear.': 4, 'A tablecloth.': 4, 'Sandals.': 4, 'Hands.': 4, 'A door.': 4, 'Cutting.': 4, 'Cooking.': 4, 'A wetsuit.': 4, 'A bike.': 4, 'Chopsticks.': 4, 'French fries.': 4, 'Roof.': 4, 'Hot dog.': 4, 'The woman.': 4, 'A box.': 4, 'Down.': 4, 'Clock tower.': 4, 'A ball.': 4, 'Chair.': 4, 'A shadow.': 4, 'Light brown.': 4, 'Lying down.': 4, 'Headphones.': 4, 'A scarf.': 4, 'Yellow and white.': 4, 'Bicycles.': 4, 'Keyboard.': 4, 'Three.': 4, 'Tall grass.': 4, 'Flower.': 4, 'Landing gear.': 4, 'Houses.': 4, 'Purse.': 4, 'Sausage.': 4, 'Onions.': 4, 'Bread.': 4, 'A lamp.': 4, 'Palm tree.': 4, 'Bedroom.': 4, 'Spots.': 4, 'Napkins.': 4, 'Pillows.': 4, 'Giraffes.': 4, 'Railing.': 4, 'Backpack.': 4, 'Street sign.': 4, 'Toilet paper.': 4, 'Asphalt.': 4, 'Yellow and blue.': 4, 'Benches.': 4, 'Brown and black.': 4, 'Bottles.': 4, 'Cats.': 4, 'A truck.': 4, 'Soccer.': 4, 'A light.': 4, 'A mountain.': 4, 'Eyeglasses.': 4, 'Drinking.': 4, 'White and red.': 4, 'Utensils.': 4, '2.': 4, 'Top.': 4, 'A shirt.': 4, 'The cat.': 4, 'A trash can.': 4, 'The beach.': 4, 'Wave.': 4, 'The trees.': 4, 'Blonde.': 4, '7.': 4, 'Suitcase.': 4, 'Phone.': 4, 'Beer.': 4, 'Checkered.': 4, 'Headband.': 4, 'Wheels.': 4, 'The wall.': 4, 'A traffic light.': 4, 'Sauce.': 4, 'Hair.': 4, 'A blanket.': 4, 'The ocean.': 4, 'Shirt.': 4, 'Apple.': 4, 'Tennis shoes.': 4, 'Tennis racket.': 4, 'Chain link.': 4, 'Long.': 4, 'Green leaves.': 4, 'The ground.': 4, 'The elephants.': 4, 'Ketchup.': 4, 'Bush.': 4, 'A white shirt.': 4, 'Brown and tan.': 3, 'Poles.': 3, 'A plant.': 3, 'The street.': 3, 'Eye glasses.': 3, 'Street signs.': 3, 'Camera.': 3, 'Flying kites.': 3, 'Shrubs.': 3, 'Grey and white.': 3, 'Onion.': 3, 'Frosting.': 3, 'Signs.': 3, 'Chicken.': 3, 'Black bear.': 3, 'Dark.': 3, 'A wooden table.': 3, 'Trains.': 3, 'Ossicones.': 3, 'Reflection.': 3, 'Rock.': 3, 'Stop sign.': 3, 'Living room.': 3, 'Donut.': 3, 'First.': 3, 'City.': 3, 'Light green.': 3, 'Parked.': 3, 'Door.': 3, 'Bear.': 3, 'Computer mouse.': 3, 'Sink.': 3, 'Napkin.': 3, 'Flying a kite.': 3, 'Brown wood.': 3, 'Kite.': 3, 'Posing.': 3, 'Pavement.': 3, 'The snow.': 3, 'Evergreen.': 3, 'Eggs.': 3, 'Palm.': 3, 'Rectangles.': 3, 'Eating grass.': 3, 'White plate.': 3, 'White lines.': 3, 'Sandwiches.': 3, 'An animal.': 3, 'Clocks.': 3, '4.': 3, 'Diamond.': 3, 'A bridge.': 3, 'Racket.': 3, 'Southwest.': 3, 'Star.': 3, 'Writing.': 3, 'A headband.': 3, 'Wavy.': 3, 'Circle.': 3, 'A white plate.': 3, 'A flag.': 3, 'Porcelain.': 3, 'Blue jeans.': 3, 'Candles.': 3, 'A rock.': 3, 'Feathers.': 3, 'Large.': 3, 'Dress.': 3, 'Fire Hydrant.': 3, 'The road.': 3, 'A clock tower.': 3, 'A green shirt.': 3, 'A microwave.': 3, 'The sink.': 3, 'A wine glass.': 3, 'Pants.': 3, 'Hardwood.': 3, 'Handles.': 3, 'A road.': 3, 'A suitcase.': 3, 'Books.': 3, 'Three giraffes.': 3, 'Electric.': 3, 'Cap.': 3, 'Playing a game.': 3, 'Steam.': 3, 'Tree branches.': 3, 'Bridle.': 3, 'Back.': 3, 'Propeller.': 3, 'Tennis racquet.': 3, 'Pitcher.': 3, 'A belt.': 3, 'Cold.': 3, 'A body of water.': 3, 'A sidewalk.': 3, 'Wetsuits.': 3, 'Saddle.': 3, 'Racing.': 3, 'The right.': 3, 'The tree.': 3, 'A kitchen.': 3, 'Bike.': 3, 'Trunk.': 3, 'Talking.': 3, 'Bats.': 3, 'Mane.': 3, 'Triangle.': 3, 'Hot dogs.': 3, 'Cardboard.': 3, 'Dirt and grass.': 3, 'A camera.': 3, 'A chain.': 3, 'Tie.': 3, 'A water bottle.': 3, 'Doughnuts.': 3, 'Bun.': 3, 'A double decker.': 3, 'White and brown.': 3, 'Rectangular.': 3, 'White clouds.': 3, 'Home plate.': 3, 'Blue sky.': 3, '26.': 3, 'Stove.': 3, 'Playing baseball.': 3, 'Blue and gray.': 3, 'Front.': 3, 'Short.': 3, 'Computers.': 3, 'Stick.': 3, 'Game controller.': 3, 'Pepsi.': 3, 'Curtain.': 3, 'Book.': 3, 'Rain.': 3, 'Wet suit.': 3, 'Summer.': 3, 'Riding horses.': 3, 'Tusks.': 3, 'Wet.': 2, 'Earrings.': 2, 'A palm tree.': 2, 'An apple.': 2, 'A towel.': 2, 'A keyboard.': 2, 'Oval.': 2, 'Stuffed animals.': 2, 'Legs.': 2, 'Zero.': 2, 'Headlights.': 2, 'The line.': 2, 'Wii remote.': 2, 'Plenty chains.': 2, 'The fire hydrant.': 2, 'Wallpaper.': 2, 'A mat.': 2, '6.': 2, 'A tail.': 2, 'Tags.': 2, 'Vase.': 2, 'Watermelon.': 2, 'Headboard.': 2, 'T-shirt.': 2, 'Cheese pizza.': 2, 'Floral.': 2, 'Preparing food.': 2, 'A blue tablecloth.': 2, 'None.': 2, 'Cage.': 2, 'His left hand.': 2, 'Striped polo.': 2, 'Bikes.': 2, 'Lion.': 2, 'Plates.': 2, 'Pictures.': 2, 'Weeds.': 2, 'Green and red.': 2, 'Marina.': 2, 'The armrest.': 2, 'Trying to hit the ball.': 2, 'A hand.': 2, 'A banana.': 2, 'Asian.': 2, 'Teal.': 2, 'The flowers.': 2, 'A book.': 2, 'A sweater.': 2, 'Earphones.': 2, 'Scarf.': 2, 'Baseball glove.': 2, 'A game controller.': 2, 'A log.': 2, 'The clouds.': 2, 'Birthday.': 2, 'A fridge.': 2, 'Bathing.': 2, 'Yellow and green.': 2, '15.': 2, 'Nightstand.': 2, 'Dark red.': 2, 'Necklace.': 2, 'Chain link fence.': 2, 'A vase with flowers.': 2, 'Green and black.': 2, 'The bed.': 2, 'Forks.': 2, 'The light.': 2, 'Cup.': 2, 'Riding a bicycle.': 2, 'Night.': 2, 'Curved.': 2, 'Coffee.': 2, 'Passenger.': 2, 'Bubbles.': 2, 'White tiles.': 2, 'Red shirt.': 2, 'A railing.': 2, 'Goats.': 2, 'Tail.': 2, 'Hydrant.': 2, 'Stainless steel.': 2, 'Socks.': 2, 'A fire hydrant.': 2, 'Shirts.': 2, 'Talking on cell phone.': 2, 'Moss.': 2, 'Exit.': 2, '12:30.': 2, 'Pine tree.': 2, 'Laying down.': 2, 'Hollywood.': 2, 'Zucchini.': 2, 'Lettuce and tomato.': 2, 'A sheep.': 2, 'Nail polish.': 2, 'Tennis ball.': 2, 'Lemons.': 2, 'Floor.': 2, 'Two men.': 2, 'Ponytail.': 2, 'Pastries.': 2, 'A tennis ball.': 2, 'A blue umbrella.': 2, 'Gray and black.': 2, 'A bedroom.': 2, 'The vase.': 2, 'Ivory.': 2, 'A carrot.': 2, 'White paper.': 2, 'Dip.': 2, 'Black and White.': 2, '50.': 2, 'Plant.': 2, 'Hood.': 2, 'Outdoor.': 2, 'Tables.': 2, 'Nokia.': 2, 'Wheelchair.': 2, 'Tape.': 2, 'A tire.': 2, 'Radiator.': 2, 'Foam.': 2, 'Shelf.': 2, 'Pine trees.': 2, 'Computer.': 2, 'Sitting down.': 2, 'P.': 2, 'The truck.': 2, 'A beach.': 2, 'Mushrooms.': 2, 'Leaning.': 2, 'A tall building.': 2, 'Fries.': 2, 'Blue and grey.': 2, 'Lines.': 2, 'A curtain.': 2, 'A toothbrush.': 2, 'Riding an elephant.': 2, 'Up.': 2, 'Flags.': 2, 'Tree trunk.': 2, 'Green and yellow.': 2, 'Lake.': 2, 'House.': 2, 'The yellow train.': 2, 'Sectional.': 2, 'Candle.': 2, 'Calm.': 2, 'Ham.': 2, 'Open.': 2, 'The book.': 2, 'A van.': 2, 'Cupcakes.': 2, 'Bars.': 2, 'Vegetable.': 2, 'A white one.': 2, 'A chalkboard.': 2, 'Notebook.': 2, '5.': 2, 'Trekking poles.': 2, 'Rope.': 2, 'Icing.': 2, 'Bowls.': 2, 'Brown and green.': 2, 'Chrome.': 2, 'Roman.': 2, 'Sugar.': 2, 'American flag.': 2, 'White and grey.': 2, 'Stickers.': 2, 'Carrots.': 2, 'Lush green bushes.': 2, 'Ramp.': 2, 'A line of trees.': 2, 'A statue.': 2, 'Clothes.': 2, 'Blue and red.': 2, 'A field.': 2, 'Hanging clock.': 2, 'Herd.': 2, 'A rectangle.': 2, 'Circular.': 2, 'A scooter.': 2, 'Granite.': 2, 'Surfboards.': 2, 'Artwork.': 2, 'Rice.': 2, 'Sandwich.': 2, 'Clear skies.': 2, 'Spatula.': 2, 'Chain.': 2, 'Gibson.': 2, 'Knee pads.': 2, 'Steps.': 2, 'Strings.': 2, 'Traffic light.': 2, 'Wings.': 2, 'Steel.': 2, 'Red and gray.': 2, 'Baseball game.': 2, 'Suit.': 2, 'A baseball game.': 2, 'Restaurant.': 2, 'Wicker.': 2, 'The roof.': 2, 'Crumbs.': 2, 'Tomatoes.': 2, 'Corn.': 2, 'The computer.': 2, 'Frame.': 2, 'Taking off.': 2, 'Squares.': 2, 'The clothing.': 2, 'Radio.': 2, 'Yellow and red.': 2, 'A napkin.': 2, 'Stuffed animal.': 2, 'String.': 2, 'Motorcycles.': 2, 'Laptops.': 2, 'Guitar.': 2, 'Bus stop.': 2, 'A jet.': 2, 'Rug.': 2, 'A quilt.': 2, 'Skate board.': 2, 'Harness.': 2, 'Taking picture.': 2, 'Advertisement.': 2, 'Palm trees.': 2, 'It is black.': 2, 'White car.': 2, 'Playing soccer.': 2, 'A dirt path.': 2, 'Bronze.': 2, 'Cutting board.': 2, 'The meat.': 2, 'The toilet lid.': 2, 'Cloud.': 2, 'Small.': 2, 'Pancakes.': 2, 'A coffee cup.': 2, 'Runways.': 2, 'A hoodie.': 2, 'A cow.': 2, 'A helicopter.': 2, 'Water bottles.': 2, 'Seven.': 2, 'A white jacket.': 2, 'A hot dog.': 2, 'Metal pole.': 2, 'A pillow.': 2, 'Talking on the phone.': 2, 'Tall buildings.': 2, 'Green beans.': 2, 'A wristband.': 2, 'Ski suits.': 2, 'White snow.': 2, 'A stop sign.': 2, 'Bucket.': 2, 'Exhaust.': 2, 'Coffee cup.': 2, 'Breakfast.': 2, 'An airplane.': 2, 'Glove.': 2, 'Mashed potatoes.': 2, 'Overpass.': 2, 'The floor.': 2, 'Picture.': 2, 'Dome.': 2, 'The ball.': 2, 'The plate.': 2, 'Fish.': 2, 'White and tan.': 2, 'White wall.': 2, 'Ski pole.': 2, 'Black shorts.': 2, 'Boxes.': 2, 'Swimming.': 2, 'Stones.': 2, 'School bus.': 2, 'Cellphone.': 2, 'A black jacket.': 2, 'Dark Gray.': 2, 'Pine.': 2, 'Flag.': 2, 'Mountain.': 2, 'Nike.': 2, 'The right hand.': 2, 'Very dirty.': 2, 'A skateboarder.': 2, 'Off white.': 2, 'Fall.': 2, 'The building.': 2, 'Wood and metal.': 2, 'Iron.': 2, 'Dark brown.': 2, 'The oranges.': 2, 'Medium.': 2, 'Riding.': 2, 'Tire.': 2, 'A tennis court.': 2, 'A military uniform.': 2, 'Shaking hands.': 2, 'The jet.': 2, 'Dessert.': 2, 'Tire tracks.': 2, 'Pots.': 2, 'The street sign.': 2, 'A black wetsuit.': 2, 'A desk.': 2, 'Rainy.': 2, 'Bookcase.': 2, 'Jar.': 2, 'A refrigerator.': 2, 'Towels.': 2, 'The sand.': 2, 'The mirror.': 2, 'An oven.': 2, 'Dried grass.': 2, 'Blond.': 2, 'Looking.': 2, 'Hitting ball.': 2, 'Two bananas.': 2, 'Pineapple.': 2, 'A vehicle.': 2, 'Trees and bushes.': 2, 'A rope.': 2, 'The person.': 2, 'It is broken.': 2, 'Teddy bears.': 2, 'Vegetables and fruits.': 2, 'Reflections.': 2, 'Iced tea.': 2, 'Paneling.': 2, 'Marketplace.': 2, 'A black bag.': 2, 'Blue and yellow.': 2, 'Asparagus.': 2, 'Taking a picture.': 2, 'Red, white and blue.': 2, 'Green and purple.': 2, 'Milk.': 2, 'Gray and white.': 2, 'Tablecloth.': 2, 'Television.': 2, 'The windows.': 2, 'Fighting.': 2, 'A toaster oven.': 2, 'A baseball bat.': 2, 'The giraffe.': 2, 'A menu.': 2, 'Owl.': 2, 'On.': 2, 'Ladybug.': 2, 'A toilet.': 2, 'A glass.': 2, 'Denim.': 2, 'Church.': 2, 'Electrical wires.': 1, 'The four zebras.': 1, 'Is white and blue.': 1, 'The blue plate.': 1, 'A restroom.': 1, 'A mouse.': 1, 'Wii controllers.': 1, 'Light yellow.': 1, 'Floor tile.': 1, 'Splashing water.': 1, 'Brushing his teeth.': 1, 'Bench near black wall.': 1, 'Doughnut.': 1, 'Short and straight.': 1, 'United.': 1, 'A puffy jacket with a large collar.': 1, 'Black laces.': 1, 'A wrapper.': 1, 'Burnt bread.': 1, 'Apron.': 1, 'Blue and yellow flags.': 1, 'Tanks.': 1, 'The Pennsylvania ave green road sign.': 1, 'A cap.': 1, 'A blue shirt.': 1, 'A ramp.': 1, 'The monkey is outdoors.': 1, 'Extended out.': 1, 'A painting of a palm tree.': 1, 'Do not feed.': 1, 'White sub.': 1, 'Backwards.': 1, 'A giraffe family.': 1, 'The cutting board.': 1, 'A turban.': 1, 'Base.': 1, 'The white door.': 1, 'Food trucks.': 1, 'Plaid bermudas.': 1, 'The lid.': 1, 'Sdkis.': 1, 'Chain necklace.': 1, 'Garage doors.': 1, 'Car seat.': 1, 'Back to photographer.': 1, 'The sidewalk.': 1, 'A tray.': 1, 'Carrying passengers.': 1, 'Roadway.': 1, 'Crockpot.': 1, 'Some kind of toilet.': 1, 'A bunch of boats.': 1, 'Phone contact.': 1, 'A tee shirt.': 1, 'Amtrak.': 1, 'Baby giraffe.': 1, '3:58.': 1, 'The bicycle.': 1, 'Weeping willows.': 1, 'Crackers.': 1, \"The woman's shirt.\": 1, 'A visor.': 1, 'Two plastic cups.': 1, 'Blue and white checkered.': 1, 'Canada.': 1, 'Silver wire fence.': 1, 'Shake hands.': 1, 'Sprinkles.': 1, 'A blue coffee mug.': 1, 'Red flowers.': 1, 'Squares and rectangles.': 1, 'Pumpkin ale.': 1, 'The feet.': 1, 'Personal vehicles.': 1, 'Touching horse.': 1, 'A liquid.': 1, 'Watch or bracelet.': 1, 'A vanity and sink.': 1, 'A paper container.': 1, 'A soup.': 1, 'Road construction ahead.': 1, 'Growling.': 1, 'Tote bags.': 1, 'Indoor scene.': 1, 'Parked by the sidewalk.': 1, 'Spotted.': 1, 'Back of the seat.': 1, 'Duck in front.': 1, 'Berry cheesecake.': 1, 'Watching the event.': 1, 'Sheet metal.': 1, 'Bottle.': 1, 'Florets.': 1, 'Silver computer monitor.': 1, 'Resting.': 1, 'The carrots.': 1, 'Creek.': 1, 'Wear condoms.': 1, 'Scoreboard.': 1, 'The head.': 1, 'Back of the wooden chair.': 1, 'No box.': 1, 'Delta.': 1, 'A ceiling fan.': 1, 'The letter s.': 1, 'A rear end of a vehicle.': 1, 'The lettering.': 1, 'Red dirt.': 1, 'Fireplace.': 1, 'White or orange.': 1, 'Rubber and wire.': 1, 'Flip flops.': 1, 'Tissue box.': 1, 'Gray jeans.': 1, 'Blue, red, and white.': 1, 'Metal silver pole.': 1, 'Blue tie.': 1, 'Navy and yellow.': 1, 'Large stones.': 1, 'The American flag.': 1, 'Black and red motorcycle with chrome.': 1, 'Canvas.': 1, 'Being the catcher.': 1, 'Hash browns.': 1, 'Snow covered mountains.': 1, 'Metal stove.': 1, 'The jackets.': 1, 'Magnets.': 1, 'Pulling it out.': 1, 'Grayish.': 1, '59 Motorcycle Club.': 1, 'Bare trees.': 1, 'Balloons.': 1, 'Christmas.': 1, 'Motorcycle riding gear.': 1, 'Headlight.': 1, 'Mask.': 1, 'Black thick-soled.': 1, 'A large green bush.': 1, 'Maroon.': 1, 'A piece.': 1, 'A table runner.': 1, 'Green old fashioned light pole.': 1, 'License plate.': 1, 'A faucet.': 1, 'Lake District.': 1, '6:05.': 1, 'A rag.': 1, 'Pigeons on line.': 1, 'A banana tree.': 1, 'A pool and trees.': 1, 'Ties.': 1, 'IPOD.': 1, '11.': 1, 'Tennis player outside during the day.': 1, 'A tennis racket and ball.': 1, 'Hitting the tennis ball.': 1, 'Apple and he warning.': 1, 'The outside.': 1, 'Shower and toilet.': 1, 'A lotion.': 1, 'A cement floor.': 1, 'Fire escape.': 1, 'Fruit and veggies.': 1, 'A parking meter on a post.': 1, 'Puppy.': 1, 'Kittens.': 1, 'Electric cables.': 1, 'Blue, white, yellow and black.': 1, 'Fluffy.': 1, 'The bird.': 1, 'Nintendo Wii.': 1, 'The tarmac.': 1, 'The white rope.': 1, 'Door pulls.': 1, 'The cows.': 1, 'Khaki skirt.': 1, 'Wii controller.': 1, 'A slope.': 1, 'Right foot.': 1, 'A mass of water.': 1, 'BOX.': 1, 'A silver pizza pan.': 1, 'A tiger.': 1, 'BK59EWO.': 1, 'Snow, a person and skies.': 1, 'A bird feeder.': 1, 'AstroTurf.': 1, 'Tanker.': 1, 'Styrofoam container.': 1, 'Flying together.': 1, 'Tv and game system.': 1, 'Nine guard statues.': 1, 'Lanyard.': 1, 'A tent.': 1, 'A green and white top.': 1, 'Pink with writing on it.': 1, 'Carnation.': 1, 'A bracelet.': 1, 'A basket.': 1, 'Many figures.': 1, 'Cutting the cake.': 1, 'A laptop computer.': 1, 'Partly cloudy.': 1, 'Water skiing.': 1, 'The airplane.': 1, 'Hedges.': 1, 'A umbrella.': 1, 'Cut into the ice cream sandwich.': 1, 'The cake.': 1, 'Somber.': 1, 'The young man is skateboarding.': 1, 'Stems.': 1, 'Green grass with flowers.': 1, 'Its shadow.': 1, 'Neck.': 1, 'Laying on the floor.': 1, 'Four people.': 1, 'Net.': 1, 'The waters are blue.': 1, 'A polo.': 1, 'Water park.': 1, 'People walking.': 1, 'Wagon.': 1, 'Brindle.': 1, 'Panda.': 1, 'Watching the dog?.': 1, 'An egg and bacon muffin.': 1, 'Cheese, sauce and green leaves.': 1, 'Football.': 1, 'Glass of wine.': 1, 'Free Wi-Fi.': 1, 'Black meat and cheese.': 1, 'Grey shorts.': 1, \"Player's outfit.\": 1, 'Side walk.': 1, 'Brown mountain.': 1, 'Two tone.': 1, 'It is summer.': 1, 'Thick.': 1, '5130 Ballard Ave NW.': 1, 'Streaks of light.': 1, 'Strapping the horse.': 1, 'He is on skies.': 1, 'Black sweater.': 1, 'The one on the bottom left.': 1, 'A herd of wildebeest.': 1, 'Court.': 1, 'The tiled surface.': 1, 'The spots on the giraffe.': 1, 'White shorts.': 1, 'Ziplining.': 1, 'Rose.': 1, 'School crossing.': 1, 'Waves created by boat.': 1, 'Army green.': 1, 'Blonde and thin.': 1, 'Threshold.': 1, '93.': 1, 'Mr.Donut.': 1, 'A beer stein.': 1, 'Chocolate frosting.': 1, 'The snow fence.': 1, 'Safety.': 1, 'A claw.': 1, 'Tattoo.': 1, 'An owl statue.': 1, 'A yard light.': 1, 'Goal net.': 1, 'Blue and green flames.': 1, 'The camera.': 1, 'For parking.': 1, 'Signature.': 1, 'Kick flip off the stairs.': 1, 'Blacktop.': 1, 'Mostly cloudy.': 1, 'A church.': 1, 'A wooden cupboard.': 1, 'An orange case.': 1, 'Canoe.': 1, \"Woman's sweater.\": 1, 'A blue cap.': 1, 'Mounds of various colors.': 1, 'A1.': 1, 'City skyline and high towers.': 1, 'Curly.': 1, 'A board.': 1, 'Glass and metal.': 1, 'Sitting with paws tucked under.': 1, 'Produce market.': 1, 'Ornaments.': 1, 'A brown bird.': 1, 'White tennis outfit.': 1, 'Green and orange.': 1, 'The ground is brown.': 1, 'Spiral notebook.': 1, 'Snowfall.': 1, 'Asian writing.': 1, 'The man is carrying an umbrella.': 1, 'Wood floors.': 1, 'Cross country.': 1, 'Pews.': 1, 'Cosmetology school.': 1, 'Roasted chickpeas.': 1, 'Fabric and stuffing.': 1, 'A group of people.': 1, 'Geek Squad.': 1, 'Black and red are the primary colors.': 1, 'Storm drain.': 1, 'The stuffed bear.': 1, 'A t shirt.': 1, 'Large knife.': 1, 'A uniform.': 1, 'Countertop.': 1, 'The soccer field.': 1, 'Oven sitting next to another oven.': 1, 'Playing video games.': 1, 'Meat, onions and broccoli.': 1, 'Tall trees.': 1, 'Sliding into base.': 1, 'Ships.': 1, 'Comb.': 1, 'Black and orange shorts.': 1, 'French bread.': 1, 'Arizona.': 1, 'Apartment buildings.': 1, 'Evergreens.': 1, 'Black wires.': 1, 'A tree stump.': 1, 'The right one.': 1, 'Edge of an awning.': 1, 'Ten.': 1, 'Tennis rackets.': 1, 'The woods.': 1, 'Tea bag and lemon.': 1, 'Plush carpet.': 1, 'Black and whtie.': 1, 'Rear.': 1, 'A mop.': 1, 'Blue banners.': 1, 'Dots.': 1, 'An octagon.': 1, 'Air France.': 1, 'Penguin.': 1, 'WFC and WWFC.': 1, 'A triangle.': 1, 'Street with cracks.': 1, 'Peaked.': 1, 'A square.': 1, 'Bottom part of the fire hydrant.': 1, 'Color silver.': 1, 'The white wave.': 1, 'Bike rack.': 1, 'The small round mirror.': 1, 'The toilet.': 1, 'Scrubby tall grass.': 1, 'Sailboats.': 1, 'The sweatshirt.': 1, 'Tennis sneakers.': 1, '1240.': 1, 'Ducks.': 1, 'A meal.': 1, 'Sitting on the bed.': 1, 'Dead vines.': 1, 'A green tag.': 1, 'A white cap.': 1, 'Athletic gear.': 1, 'Large green work truck.': 1, 'Eight.': 1, 'Mini sandwiches.': 1, 'Tusk.': 1, 'Throwing a frisbee.': 1, 'The crowd.': 1, 'Name tags.': 1, 'Parking meter.': 1, '10.': 1, 'Raised behind him.': 1, 'Blue with a few clouds.': 1, 'A pile of rocks.': 1, 'English.': 1, 'Piece of Meat.': 1, 'Green , collared, short sleeve shirt.': 1, 'Another duck.': 1, 'White fence.': 1, 'Basil, tomato, and mozzarella.': 1, 'Cell phone with camera.': 1, 'Red strip.': 1, \"It's a counter.\": 1, 'Fishing nets.': 1, 'The clock is solid and round.': 1, 'Doubledecker buses.': 1, 'Engines.': 1, 'A cowboy hat.': 1, 'Vertical blinds.': 1, 'On baby.': 1, 'A locomotive engine car.': 1, 'Nail Polish.': 1, 'Stars.': 1, 'A toothpick with a green top.': 1, 'Plunger.': 1, 'The young woman is holding a tray of cell phones.': 1, 'Hats.': 1, 'Up in the air.': 1, 'Grey and white framed window.': 1, 'Rolling on the tracks.': 1, 'White ones.': 1, 'Ski.': 1, 'Screensaver.': 1, 'It has marble looks to it and aqua blue in color.': 1, 'Garbage can.': 1, 'White and maroon.': 1, 'Cheesecake.': 1, 'A tube of paint.': 1, 'Different kinds of chocolate.': 1, 'A shirt and jeans.': 1, 'Blue sky with clouds.': 1, 'California.': 1, 'Black truck.': 1, 'Blue paint.': 1, 'Purple cabbage.': 1, 'Sidecar.': 1, \"It's tracks.\": 1, 'Control panels for the engine.': 1, 'BLack.': 1, 'Skyscraper.': 1, 'Tile and top of shower curtain.': 1, 'A deep white tub.': 1, 'Brown,yellow and white.': 1, 'Photos.': 1, 'Houses of parliament.': 1, 'A river.': 1, 'Pay.': 1, 'A green rope.': 1, 'Jan Brett.': 1, 'Pink and green.': 1, 'Rusty.': 1, 'Bikini.': 1, 'Scarecrow.': 1, 'Red sauce.': 1, 'South Main Street.': 1, 'Walking figure.': 1, 'Daisies.': 1, 'A Bible.': 1, 'Motorcycle and cars.': 1, 'A race course.': 1, 'The pillows.': 1, 'Framework.': 1, 'An Orange Ottoman.': 1, 'Pink, yellow and orange.': 1, 'A doorway.': 1, 'Long hair.': 1, 'Sticky.': 1, 'A grass area.': 1, 'Red pillow.': 1, 'Legs of a chair.': 1, 'Miniature rackets.': 1, 'Pizza boxes.': 1, 'Standing under trees for shade.': 1, 'A parachute.': 1, 'A white bus.': 1, 'Lift poles.': 1, 'Restaurants.': 1, 'Large silver pots.': 1, 'Wiper.': 1, 'A counter.': 1, 'Gray and blue.': 1, 'The hoop.': 1, 'Happiness.': 1, 'Long sleeve.': 1, 'A retail store.': 1, 'Cleats.': 1, 'Ear.': 1, 'Multi-speed bicycle.': 1, 'The glass.': 1, 'Shade.': 1, 'Cut into small pieces.': 1, 'Bridge.': 1, 'Silverware.': 1, 'A tennis racquet.': 1, 'A pair of blue jeans.': 1, 'Japanese.': 1, 'Skating.': 1, 'Cart.': 1, 'A white cloud.': 1, 'The cockpit.': 1, 'A slice.': 1, 'Playing football.': 1, 'Raspberries.': 1, 'A seat.': 1, 'Italian.': 1, 'Jumping with skateboard.': 1, 'White and Yellow.': 1, 'Polar bear.': 1, 'A park.': 1, 'The one on the top right.': 1, 'An old fashioned nurse outfit.': 1, 'Ivy.': 1, 'Cherry tomatoes.': 1, 'Dark gray.': 1, 'Tasting wine.': 1, 'Vehicles.': 1, 'Pens.': 1, 'The wave crashing.': 1, 'A fighter plane.': 1, 'Ornate arch.': 1, 'The person not under the tree.': 1, 'White markings.': 1, 'Grass and weeds.': 1, 'A cross.': 1, 'Urinal.': 1, 'Green, blue, and white.': 1, 'A yellow coat.': 1, 'A storage cabinet.': 1, 'Old engine.': 1, 'A boy in front of his birthday cake.': 1, 'Wakeboarding.': 1, 'Sunny and dry.': 1, 'Raisins.': 1, 'There are footprints and ski markings.': 1, 'A black shiny band.': 1, 'A bottle.': 1, 'Chalk.': 1, 'Wispy ones.': 1, 'A tennis court net.': 1, 'Healthcare sign.': 1, 'A piece of cake.': 1, 'A bench seat.': 1, 'The cloth is yellow.': 1, 'Playing tennis?.': 1, 'A crosswalk.': 1, 'Peach.': 1, 'Roly poly.': 1, 'Looking at the race.': 1, 'Basil.': 1, \"Player's uniform.\": 1, 'Laptop computer.': 1, 'The bus is at a stop.': 1, 'A surfer.': 1, 'Its the top part of wall where old skis lay.': 1, 'The Frisbee.': 1, 'Magazine cover.': 1, 'Broken.': 1, 'Knobbies.': 1, 'No pancakes.': 1, 'Clear plastic.': 1, 'The man is surfing in the ocean.': 1, 'A Fridge.': 1, 'Safety goggles.': 1, 'Reflection of the boat.': 1, 'Burglar bar.': 1, 'Long brown horns.': 1, 'Six.': 1, 'A pan.': 1, '1391.': 1, 'Striped pattern.': 1, 'Black pants.': 1, 'An old style slot machine.': 1, 'Stem hole.': 1, 'Place mat.': 1, 'White and orange.': 1, 'A small white bowl.': 1, 'Grey rolled up pants.': 1, 'A slice of pizza.': 1, 'Trucks.': 1, 'The hooves.': 1, 'White sheer.': 1, 'Cumulus.': 1, 'Cupboards.': 1, 'A spiral.': 1, 'A yellow tray.': 1, 'Pitching.': 1, 'Trees and foliage.': 1, 'Goggles.': 1, 'Short sleeve t-shirt.': 1, 'A toasted sandwich.': 1, 'Creme.': 1, 'Electronic computing devices.': 1, 'Tall brush.': 1, 'The fork.': 1, 'Herding.': 1, '30.': 1, 'Laying.': 1, 'Walking beside the train.': 1, 'Lanes.': 1, 'The tray of food and drink.': 1, 'Dark colored.': 1, 'A suit.': 1, 'Burger.': 1, 'Uniform.': 1, 'Race track.': 1, 'Quicksilver.': 1, 'The skateboard.': 1, 'Pan.': 1, 'He is a priest.': 1, 'Hair dryer.': 1, 'Wood boards.': 1, 'Coconut.': 1, 'The reflection.': 1, 'Standing in a field.': 1, 'Black and blue berries.': 1, 'It is a white head band.': 1, 'Pizzas.': 1, 'Pile of rocks.': 1, 'Herd of animals.': 1, 'K.': 1, 'Knives.': 1, 'Typing.': 1, 'A croissant.': 1, 'A carton.': 1, 'The wings.': 1, '14.': 1, 'Tire stops.': 1, 'A package.': 1, 'The painted lines are white.': 1, 'Winter Olympics.': 1, 'Long sleeves.': 1, 'Sitting inside.': 1, 'Brown dirt.': 1, 'Warm tones.': 1, 'April 22.': 1, 'Benches beside a river.': 1, 'Go kayaking.': 1, 'Heinz.': 1, 'Red tape.': 1, 'Oranges and bananas.': 1, 'To separate lanes.': 1, 'Clock shop.': 1, 'Vegetation.': 1, 'DC.': 1, 'Sitting on wire.': 1, 'A mustache.': 1, 'Red fire hydrant.': 1, 'A cigarette.': 1, 'Feeding giraffe.': 1, 'Clean.': 1, 'A living room.': 1, 'Left sheep.': 1, 'A large grey cloud.': 1, 'Mostly sunny.': 1, 'Pita bread and toppings.': 1, 'A tractor.': 1, 'Mountains and foliage.': 1, 'Brown hair.': 1, 'A black crate.': 1, 'Eating leaves.': 1, 'Feeding the giraffe.': 1, 'Suitcases in front of the store.': 1, 'Black tiles.': 1, '25.': 1, 'Two chimneys.': 1, 'Electric toothbrush.': 1, 'Tri-level.': 1, 'Cold weather clothes.': 1, 'Yacht.': 1, 'An intersection.': 1, 'Price tag.': 1, 'Left side.': 1, 'Pansies.': 1, 'Oven.': 1, 'Driving in the rain.': 1, 'Toothpaste.': 1, 'A design.': 1, 'New York Ave.': 1, 'Cream filling.': 1, 'A post.': 1, 'Maple leaf.': 1, 'A spear.': 1, 'Hotdog.': 1, 'Spokes.': 1, 'Girls shadow.': 1, 'The bold number is a three.': 1, 'A brown sweater.': 1, 'Placemat.': 1, 'A big tree.': 1, 'Three ladies in a blue rowboat.': 1, 'Name.': 1, 'A teacup and saucer.': 1, 'A white paper bag.': 1, 'A bouquet of flowers.': 1, 'Green tree leaves.': 1, 'Cloudy day.': 1, 'The hands.': 1, 'Purple and white.': 1, 'The clockface.': 1, 'Black, white and blue.': 1, 'A skyline.': 1, 'Airplane landing strip.': 1, 'It is navy blue.': 1, 'Wooden fence.': 1, 'Reading a piece of paper.': 1, 'Signal lights.': 1, 'Green, blue, pink, and white.': 1, 'A man with a child on his shoulders, people and a cement guardrail.': 1, 'A microwave oven.': 1, 'Beat up.': 1, 'Elbow guards.': 1, 'A section of donut.': 1, 'Safety railings.': 1, 'Throw rugs.': 1, 'Egg salad with noodles.': 1, 'The room.': 1, 'An iron fence.': 1, 'White curtains.': 1, 'Taxi.': 1, '22.': 1, 'White birds.': 1, 'The poles are striped.': 1, 'A roof.': 1, 'A restaurant.': 1, 'Paved road.': 1, 'Arched.': 1, 'Dirty.': 1, 'Watching the man do skateboard tricks.': 1, 'Bottle has a label on neck.': 1, 'All black.': 1, 'A trolley.': 1, 'Skiing downhill.': 1, 'Small gray tiles.': 1, 'Carving turkey.': 1, 'Frosting and fruit.': 1, \"O'farrell.\": 1, 'Kitten.': 1, 'Swing.': 1, 'Another parrot.': 1, 'Cheyenne.': 1, 'White sleeve.': 1, 'Hearts.': 1, 'White lids.': 1, 'Looking at something.': 1, 'Camper shell.': 1, 'Washing machine soap.': 1, 'The afternoon.': 1, 'Wavy line.': 1, 'Vines.': 1, 'The gray-haired man.': 1, 'Hit a baseball.': 1, 'Knotted section of rope on lower portion.': 1, 'A fleece.': 1, 'Dry brown leaves.': 1, 'Lions.': 1, 'Dirt and shrubs.': 1, 'A double decker bus.': 1, 'A red train.': 1, 'Brickwork.': 1, 'White hats.': 1, 'Waving.': 1, 'Eiffel tower.': 1, 'Yellow bananas.': 1, 'Pitching a baseball.': 1, 'Sofa.': 1, 'Bathtub.': 1, 'White clear snow.': 1, 'Crossing the street.': 1, 'Maple syrup.': 1, 'A trolley sign.': 1, 'Automobiles.': 1, 'A thatched roof.': 1, 'A red ski pole.': 1, 'A SUV.': 1, 'Microphone.': 1, 'Life vests.': 1, 'Wax.': 1, 'Fireworks.': 1, 'Longboards.': 1, 'Old wall.': 1, 'A male.': 1, 'A parking lot.': 1, 'A black backpack.': 1, 'Hard hat.': 1, 'Snowflakes.': 1, 'Mountain range.': 1, 'Looking for food.': 1, 'A pooh bear.': 1, 'To keep the ball in the area.': 1, '2 poles.': 1, 'A red and white bag.': 1, 'Resting head on table.': 1, 'Rackets.': 1, 'Fruit and juice.': 1, 'Top of bun.': 1, 'Waffles.': 1, 'Sony.': 1, 'A vase or water jug.': 1, 'Metal chain link fence.': 1, 'A stand.': 1, 'Cakes.': 1, 'Dark brown long fur.': 1, 'Arts.': 1, 'Sun light.': 1, 'A large clay pot.': 1, 'Honda.': 1, 'A crystal chandelier.': 1, 'A red ball.': 1, 'Red,white, and blue paint.': 1, 'Highway.': 1, 'Orange suitcase.': 1, 'A ski trail.': 1, 'Structure.': 1, '75.': 1, 'The Royal-Saigon.': 1, 'A raquet.': 1, 'White steering wheel.': 1, 'Five round frisbees.': 1, 'Rooster.': 1, 'A rolled up tortilla.': 1, 'Grapefruit.': 1, 'Embracing.': 1, 'Middle.': 1, 'Zerbas.': 1, 'The wave crashing against water.': 1, 'Papers.': 1, 'Blender.': 1, 'Jason.': 1, 'Red and silver.': 1, 'Tea.': 1, 'At noon.': 1, 'Spoke.': 1, 'A meat and potatoes sandwich.': 1, 'Several cakes.': 1, 'Bending to eat.': 1, 'Pool table?.': 1, 'There are tomatoes.': 1, 'Words.': 1, 'Hermon Park.': 1, 'Curled up.': 1, 'Black paint.': 1, 'Sitting in a chair.': 1, 'Claws.': 1, 'Bowl.': 1, 'A couch is covered up.': 1, 'Good luck.': 1, '5c.': 1, 'A black tall box.': 1, 'Canon.': 1, 'Rear wheels on a sand buggy.': 1, 'Row.': 1, 'ISUZU.': 1, 'Crashing into the beach.': 1, 'White paint.': 1, 'Lever.': 1, 'Brown bear.': 1, 'A flat screen computer.': 1, '158723.': 1, 'Lying down on surfboard.': 1, 'Green leaf lettuce.': 1, 'Toaster oven.': 1, 'The one in front.': 1, 'Green chairs.': 1, 'Ski gloves.': 1, 'Roses.': 1, 'A bushel of berries.': 1, 'A red shirt and white pants.': 1, 'Pastry in the middle.': 1, 'Two sandwiches.': 1, 'Long necks.': 1, 'Freight.': 1, 'Carrot.': 1, 'White hamburger bun.': 1, 'White letters.': 1, 'Thumb.': 1, 'A fried egg.': 1, 'A paper plate.': 1, 'Black with a white stripe.': 1, 'A white mouth.': 1, 'Forest.': 1, 'Shop at an airport.': 1, 'A zipper.': 1, 'Small bowl.': 1, 'Concrete wall?.': 1, 'Grass blades.': 1, 'Pizza dough.': 1, 'Tapping the player.': 1, 'A Stool.': 1, 'Yankees.': 1, 'Icing and flowers.': 1, 'Gray T shirt.': 1, 'Spinach.': 1, 'Airplanes.': 1, 'Blouses.': 1, 'The laptop computer.': 1, 'The eyes and the nose.': 1, 'Suitcases.': 1, \"Man's shirt.\": 1, \"Player's skirt.\": 1, \"The cat's face.\": 1, 'Mini blinds.': 1, 'Three flags.': 1, 'An olive.': 1, 'Four legs.': 1, 'Swing at the ball.': 1, 'A NASA jet with a space shuttle attached.': 1, 'Sausage links.': 1, 'A little car.': 1, 'The trail.': 1, 'A pepperoni pizza.': 1, 'Blue, green and white.': 1, 'MAX NORTH.': 1, 'Rear view mirrors.': 1, 'Snowboarding down hill.': 1, \"Rudy's liquors.\": 1, 'Cooling food.': 1, 'Walking through the grass.': 1, 'Hot Dog.': 1, '20.': 1, 'Swampfox.': 1, 'Checkers.': 1, 'A half circle.': 1, 'Black and white cat.': 1, 'The background.': 1, 'A chain linked fence.': 1, 'Curved wires.': 1, 'Paper light.': 1, 'Tie and vest.': 1, 'A white hat.': 1, 'Speaking.': 1, 'An eagle.': 1, 'Man wearing white helmet riding motorcycle.': 1, '33 202.': 1, 'Bright and sunny.': 1, 'Large window.': 1, 'Stocking cap.': 1, 'Cut the cake.': 1, 'Puffy.': 1, 'Dipping Sauce.': 1, 'Human figure.': 1, 'Grass in a pasture.': 1, 'A white stone bench.': 1, 'Chimney.': 1, 'A bell.': 1, 'Rain jacket.': 1, 'Hump.': 1, 'Tables and chairs.': 1, 'Bags.': 1, '8.': 1, 'Leaning forwards.': 1, 'Chocolate bars.': 1, 'Faucets.': 1, 'Carriages.': 1, 'Michael Jordan.': 1, 'Smoke trails.': 1, 'Headlights on the bus.': 1, '35.': 1, 'The barrier.': 1, \"Man's shoes.\": 1, 'A blazer.': 1, 'Trees and grass.': 1, 'Marble.': 1, 'Long dangling earring.': 1, 'Scarves.': 1, 'A hard hat.': 1, 'Beams.': 1, 'Light colored.': 1, 'Brick and cement.': 1, 'Green and Tan.': 1, \"Foreign language on officer's bug shield.\": 1, 'Arabic.': 1, 'Shaded area.': 1, 'The zip ties.': 1, 'Sunflower seeds.': 1, 'Chequers.': 1, 'Large green grassy field.': 1, 'Tokyo.': 1, 'Bucket hat.': 1, 'Stripe.': 1, 'A passenger train.': 1, 'The white board sign.': 1, 'A sky.': 1, 'Registration.': 1, 'A large ceramic pot.': 1, 'A computer screen.': 1, 'N4442X.': 1, 'Propellers.': 1, 'The field.': 1, 'Tan, white , brown.': 1, 'A salad.': 1, 'A track.': 1, 'Goggles are on there eyes.': 1, 'One white hand towel and one white bath towel.': 1, 'Bones.': 1, 'Its green.': 1, 'Pepperoni and sausage.': 1, 'Bowery.': 1, 'Ubuntu.': 1, 'Red with gray.': 1, 'Utility poles.': 1, 'Vegan donuts.': 1, 'Hairband.': 1, 'Cutting boards.': 1, 'A mostly sunny day.': 1, 'Crystals.': 1, 'Salsa.': 1, 'Bent.': 1, 'Hotdog and french fries.': 1, 'Dishwasher.': 1, 'A wooden stool.': 1, 'A blue kayak.': 1, 'Colorful bracelet.': 1, 'Lots of red yellow and blue.': 1, 'A blue court.': 1, 'A soap dispenser and kleenex.': 1, 'Room.': 1, 'TV.': 1, 'Red, white and black.': 1, '4:51.': 1, 'A capital S.': 1, 'A beige table.': 1, 'A black and grey duck.': 1, 'Fluffy fur.': 1, 'To their left.': 1, 'Perfect blue.': 1, 'Mirrors.': 1, 'Tennis skirt.': 1, 'A grey train.': 1, 'Power plugs.': 1, 'Black polls.': 1, 'A ball cap.': 1, 'Soap.': 1, 'The flowers are yellow.': 1, 'High.': 1, 'Dump truck.': 1, 'A variety of vegetables.': 1, 'Playing Wii.': 1, 'Curves and lines.': 1, 'Green stripe.': 1, 'Looking in the boat.': 1, 'Wooden pole.': 1, '881.': 1, 'A large boat.': 1, 'Metal mesh.': 1, 'The little boy.': 1, 'City skyline near water.': 1, '103.': 1, 'A saucer.': 1, 'Pine street.': 1, \"Baby's shirt.\": 1, 'The sea.': 1, 'Its ears.': 1, 'The motorcycle engine.': 1, 'Towel.': 1, 'Fly away.': 1, 'Double-deckers.': 1, 'Sliced.': 1, 'Brown and white spots.': 1, 'Fuel.': 1, 'Tall blurry trees.': 1, 'Black shirt.': 1, 'Hardwood floor.': 1, 'To cool the items.': 1, 'A green fern.': 1, 'Movie.': 1, 'Almond.': 1, 'Sprays water.': 1, 'The elephant on the right.': 1, 'Hula skirt.': 1, 'Looking at the computer screen.': 1, 'The Lucky Taco.': 1, 'A batting helmet.': 1, 'Winter coat.': 1, 'Grass and dirt.': 1, 'An incense burner and vessel.': 1, 'A gray sweater.': 1, 'Area of trees.': 1, 'Hearts and circles.': 1, '13.': 1, 'The bag.': 1, 'Pineapples.': 1, 'Cheetos.': 1, 'A woman.': 1, 'A white rock.': 1, 'Lemon wedge.': 1, 'Closes.': 1, 'Sailboat.': 1, 'A baseball stadium.': 1, 'Two cows sitting on the ground.': 1, 'Fruit punch.': 1, 'Satellites.': 1, 'Go ahead and push me.': 1, '12:44.': 1, 'A signpost.': 1, 'Walking across the road.': 1, 'A mural.': 1, 'Soccer ball.': 1, 'Dish towels.': 1, 'A black phone.': 1, 'The pool.': 1, 'Small mountain.': 1, '49 market.': 1, 'Girafffes.': 1, 'Parasailing.': 1, 'A bronze horse.': 1, 'Maryland & delaware.': 1, 'A breathing mask.': 1, 'Two plugs.': 1, 'A Pizza.': 1, 'On a desk.': 1, 'Broccoli and carrots.': 1, 'Baggage belonging to two men.': 1, 'Florals.': 1, '106.': 1, 'Leafless tree.': 1, 'Front right leg.': 1, 'Platform.': 1, 'A regular sized toilet.': 1, 'The tire.': 1, 'Island.': 1, 'Black/white.': 1, 'Little toys.': 1, 'Ice and snow.': 1, 'Shower curtain.': 1, 'Red striped shirts.': 1, 'Trash can.': 1, \"St. luke's.\": 1, 'Toddler.': 1, 'The wall is brownish.': 1, 'Futon.': 1, 'Assorted frames and memorabilia.': 1, 'Shiny and white.': 1, 'Crunchy toppings.': 1, 'A Frisbee.': 1, 'A bird cage.': 1, 'Hillside.': 1, 'Small travel.': 1, 'Shark kite.': 1, 'Bay window.': 1, 'MasterCard.': 1, '24.': 1, 'Brunette.': 1, 'Parking meters.': 1, 'A semi truck.': 1, 'Metal post.': 1, 'Closet.': 1, 'Basketball net.': 1, 'Box.': 1, 'No spatula.': 1, 'Green, rust, grey.': 1, 'A pink bag.': 1, 'Parking lines.': 1, 'Two dogs.': 1, 'Leg.': 1, 'Dinosaur.': 1, 'Essex.': 1, 'A telephone and laptop.': 1, 'City lights.': 1, 'A metal fence.': 1, 'U shaped lock.': 1, 'Tense.': 1, 'Crossing the road.': 1, '70.': 1, 'Road divider.': 1, 'A songbird.': 1, 'The couch is black.': 1, \"Rider's outfit.\": 1, 'Walk.': 1, 'Scooter.': 1, 'Giraffe statues.': 1, 'Mens bell bottom blue jeans.': 1, 'White gloves.': 1, 'A silver tie.': 1, 'A tin structure.': 1, 'A shelf.': 1, 'Dirt or sand.': 1, 'T shirt.': 1, 'A small, red boat.': 1, 'An ottoman.': 1, 'Crouching down and holding child.': 1, 'A clock face.': 1, 'Coats.': 1, 'Beverages.': 1, 'Tire ruts.': 1, 'A baseball uniform.': 1, 'A floral design surrounding the clock face.': 1, 'Bottled water.': 1, 'SAS.': 1, 'The ocean and sky.': 1, 'Black cat.': 1, 'Cherokee.': 1, 'The chairs.': 1, 'Eat My Sandwich.': 1, 'A grape.': 1, 'Elbow pads.': 1, 'Two street signs.': 1, 'White fur.': 1, 'Stairway.': 1, 'Driveway.': 1, 'Striped shirt.': 1, 'Fingernails.': 1, 'Skiing down a mountain slope.': 1, 'Medicine cabinet.': 1, 'A tub of water.': 1, 'Going to kick the ball.': 1, 'Mobile phones.': 1, 'Chalk lines.': 1, 'Rowing.': 1, 'Wood poles.': 1, 'Vases.': 1, 'GNU.': 1, \"Girl's hair.\": 1, 'The mountains.': 1, 'Grey & black.': 1, 'Yellow and White.': 1, 'A big rock.': 1, 'An orange and white shirt.': 1, 'A black suit.': 1, 'Black pole.': 1, 'A surfer, riding a wave.': 1, 'Right passenger side.': 1, 'Table cloth.': 1, 'Round silver tray.': 1, 'Running towards the man with the balls.': 1, 'Linen holder.': 1, 'Plate of food.': 1, 'The clock face.': 1, 'Melon.': 1, 'A paper towel dispenser.': 1, 'Chain-link fence.': 1, 'The elephant is grey.': 1, 'An octopus.': 1, 'Gray knobs.': 1, 'Blue curtain.': 1, 'Large bags of flour.': 1, 'Girl.': 1, 'Blinds.': 1, 'A spire.': 1, '787.': 1, 'Cookies.': 1, 'Two people.': 1, 'Light clouds.': 1, 'Audi.': 1, 'Winter hats.': 1, 'Part of the sink.': 1, 'Glazed.': 1, 'Middle age.': 1, 'A large white spot.': 1, 'Yellow, white, and black.': 1, 'Natural sunlight.': 1, 'Giant scissors.': 1, 'Reads newspaper.': 1, '987.': 1, 'Swimming pool.': 1, 'The trunk of the elephant.': 1, 'Black bracelet.': 1, 'Orange & blue.': 1, 'A dress.': 1, 'The shed.': 1, 'A hamster.': 1, 'Equipment.': 1, 'The red poles.': 1, 'Pedestrian light.': 1, 'More trees.': 1, 'A seagull.': 1, 'The bus is carrying passengers.': 1, 'A pipe.': 1, '213.': 1, 'Dog?.': 1, 'A pastry dough with meat and cheese inside.': 1, 'Pizza pocket.': 1, 'It is wet.': 1, 'A jungle.': 1, 'An apple,.': 1, 'Setting.': 1, 'Decals.': 1, 'An ocean.': 1, 'Spider web.': 1, 'Tell time.': 1, 'Pro milk.': 1, 'People on horses.': 1, 'ART.': 1, 'Thier noses are black.': 1, 'Cityscape.': 1, 'People crossing train tracks.': 1, 'A Vehicle.': 1, 'A black jacket and black pants.': 1, \"The person's hair.\": 1, 'Photographs.': 1, 'A black and gray building.': 1, 'A glass desk.': 1, 'A white building.': 1, 'Video library.': 1, 'The keyboard.': 1, 'Brown liquid.': 1, 'SUV.': 1, 'Tomato sauce.': 1, 'Rows.': 1, 'Bumpy skin.': 1, 'A rural setting.': 1, 'A baseball team.': 1, 'The bees need you.': 1, 'Pulling the cart.': 1, 'A panda.': 1, 'Cargo.': 1, 'Suit and tie.': 1, 'A long blue and white surf board.': 1, 'Tarmac.': 1, 'A wood board.': 1, 'White and yellow.': 1, 'Sail boat.': 1, 'Palm pilot.': 1, 'White controller.': 1, 'Skiis.': 1, 'Green means go.': 1, 'Blankets.': 1, 'Five chairs.': 1, 'Griesbach.': 1, 'White lighting.': 1, 'Throwing a Frisbee.': 1, 'Tee ball.': 1, 'White t shirt.': 1, 'Horse and buggy.': 1, 'The door handle is bronze.': 1, 'A green court.': 1, 'Letters.': 1, 'Cruise ship.': 1, 'Photographer name.': 1, 'Greenwood Cultural Center Jazz hall of fame next right.': 1, 'Hole.': 1, 'Keeping rain off the woman.': 1, 'Tree Branches.': 1, 'Green and blue luggage.': 1, 'Doors.': 1, 'Produce.': 1, 'The cell phone.': 1, 'A black bear.': 1, 'Stuffed toy.': 1, 'Grass and water.': 1, 'Ankle weights.': 1, 'Life vest.': 1, 'Thatch.': 1, 'A corkboard for signs.': 1, \"The bear cub's ears.\": 1, 'A fishing boat.': 1, \"A woman is upon the man's shoulder.\": 1, 'A plunger.': 1, 'A black bar.': 1, 'Blazer.': 1, 'Bicycle wheel.': 1, 'Hand dryers.': 1, 'Ball of rice.': 1, 'Swatting at something on the shelf above.': 1, 'A truck and van.': 1, 'An atv.': 1, 'Black t-shirt.': 1, 'Heartshape picture.': 1, 'Green pastures and trees.': 1, 'Downed toilet seat.': 1, 'A blue and gray train.': 1, 'Bottom bear on far right.': 1, 'Leaning casually.': 1, 'Red caboose.': 1, 'Sunday.': 1, 'Headdresses.': 1, 'White window with black letters.': 1, 'The can.': 1, 'Fir.': 1, 'The green foliage.': 1, 'A drink.': 1, 'Male, judging by the fur around the horns.': 1, 'The circular sign.': 1, 'A wood rail.': 1, 'White and silver.': 1, 'A person carrying a long object.': 1, 'Clothing.': 1, 'Textured glass.': 1, 'The food.': 1, 'Barrel.': 1, 'Containers on left.': 1, 'Commuter.': 1, 'Repairing a snowboard.': 1, 'An old school locomotive train.': 1, 'Blank expression.': 1, 'Dark green.': 1, 'Brake lights.': 1, 'The one on the right.': 1, 'Sushi.': 1, 'Storage house.': 1, 'Bathing suit.': 1, 'Transport.': 1, \"The girl's outfit.\": 1, 'White chest of drawers.': 1, 'Several electronics.': 1, 'Emergency 911.': 1, 'No Turn On Red.': 1, 'Back pack.': 1, 'KSL 448.': 1, 'The sauce.': 1, 'Tail lights.': 1, 'Blue and cloudless.': 1, 'The donut.': 1, 'A cat outside a house.': 1, 'The net.': 1, 'Posing for a picture.': 1, 'The wheels are black.': 1, 'Shiny.': 1, 'Shelves.': 1, 'Looking up.': 1, 'RICOH.': 1, 'Gray, red and blue.': 1, 'A hotel room.': 1, 'A pair of glasses.': 1, 'Sniffing.': 1, 'Duke of gloucester.': 1, 'Tan small brick.': 1, 'Seaweed.': 1, 'The city.': 1, 'Jagged rocks.': 1, 'An iPod.': 1, 'Cabinets.': 1, 'A danish.': 1, 'Crane.': 1, 'Windsurfing,.': 1, 'The tapes.': 1, 'Holding a sign.': 1, 'A donut.': 1, 'An abbey.': 1, 'Very large.': 1, 'The bird and the rope.': 1, 'The pillow.': 1, 'Stainless steel?.': 1, 'The middle car.': 1, 'Pigeons.': 1, 'A balcony.': 1, 'Spices.': 1, 'Deep dish.': 1, 'The states.': 1, 'Person in coat.': 1, 'It looks like the house is made of wood.': 1, 'A women on a skateboard.': 1, 'Motorcycle sculpture.': 1, 'A dirt road.': 1, 'Wrought iron basket.': 1, 'Cafe Bar.': 1, 'A freighter.': 1, 'It is Franklin St and 3rd Ave.': 1, 'Knife and fork.': 1, 'A storage room.': 1, \"It's wood.\": 1, 'Daniel Beds.': 1, 'Black white and brown.': 1, 'Pictures of doughnuts.': 1, 'Tall boots.': 1, 'Looking at the monitor.': 1, 'Lighting.': 1, 'Cheese slice.': 1, 'Electric lines.': 1, 'Mason jars.': 1, 'Staring.': 1, 'The rear end.': 1, 'Tasting the frosting on finger.': 1, 'No u-turns.': 1, 'A small metal fence.': 1, '747 B.': 1, 'The tennis player.': 1, 'Wooden sticks and lightweight fabric.': 1, 'Fresh vegetables.': 1, 'Winter sports.': 1, 'Nike swoosh.': 1, 'Tan and brown.': 1, 'From below.': 1, 'Shirt and jeans.': 1, 'A metal conveyor belt.': 1, 'A rock formation.': 1, 'Dell.': 1, 'Fence post.': 1, 'MacBook Pro.': 1, 'Green bird head.': 1, 'The zebras.': 1, 'Advertisement sign.': 1, 'Fair.': 1, 'Giving instructions.': 1, 'Wheel.': 1, 'Olives.': 1, 'J.': 1, 'White sauce.': 1, 'XL.': 1, 'Blue vase.': 1, 'A red curtain backdrop.': 1, 'Low tree.': 1, 'Clipboard.': 1, 'Pocket watch.': 1, 'Her leg.': 1, 'Pulling a man on skis.': 1, 'A bunch of trees.': 1, 'The island.': 1, 'Curved designs.': 1, 'Seasonings.': 1, 'Holding umbrella.': 1, 'Key.': 1, 'The teddy bear.': 1, 'White stripes.': 1, 'A white dress.': 1, 'A forest.': 1, 'Seagulls.': 1, 'Juice.': 1, 'A map.': 1, 'He is tying a tie.': 1, 'Windshield.': 1, 'A rack in the store.': 1, '16501.': 1, 'A seat for the dog.': 1, 'The fence.': 1, 'Mud.': 1, 'Batting.': 1, 'A green baseball bat.': 1, 'Toasted.': 1, 'Calf.': 1, 'Feed them.': 1, 'A water heater.': 1, 'Wetsuit.': 1, 'Brown wood table.': 1, 'Bare.': 1, 'Rows of trees?.': 1, 'Money.': 1, 'Toilets.': 1, 'Backhand.': 1, 'It is about 3:31PM.': 1, 'BDSM.': 1, 'The zebra.': 1, 'Cut.': 1, 'Braid.': 1, '176.': 1, 'Balconies.': 1, 'A black door.': 1, 'A sliding glass mirror.': 1, 'Trees and snow.': 1, '228.': 1, 'Sanyo.': 1, \"It's people.\": 1, 'A snow pants.': 1, 'An overvest.': 1, 'Person in a wetsuit.': 1, 'Green poles.': 1, 'Red and green.': 1, 'A brown one.': 1, \"He's looking for food.\": 1, \"Pitcher's mound.\": 1, 'The brown canoes.': 1, 'Shorts and shirt.': 1, 'W.': 1, 'Glass windows.': 1, 'Traffic.': 1, 'Dark and cloudy.': 1, 'Quarters.': 1, 'Large building.': 1, 'A child.': 1, 'Cutting a cake.': 1, 'Suspenders.': 1, 'Black swivel chairs for gaming.': 1, 'Mango.': 1, 'Pink icing.': 1, 'Telephone lines.': 1, \"He's bald.\": 1, 'Pale blue.': 1, 'Wipers.': 1, 'Black and gray.': 1, 'The number is 24.': 1, 'Motorola.': 1, 'Happy Birthday.': 1, 'Cherries.': 1, 'Camping supplies.': 1, 'Crying.': 1, 'Rods.': 1, 'Lush and green.': 1, 'Hangers.': 1, 'A wooden post.': 1, 'Sky and a hill.': 1, 'Flags markings.': 1, 'Column in front of building.': 1, 'Stoves.': 1, 'The walls are white brick.': 1, '7:40.': 1, 'Grey and turquoise.': 1, 'A silver pole.': 1, 'Arrows.': 1, 'To walk on.': 1, 'The vehicles.': 1, 'This is a metal manhole cover.': 1, 'The boy is skateboarding.': 1, 'Woven wicker.': 1, 'Cheap.': 1, 'No windows.': 1, 'Parachute.': 1, 'Olives, tomatoes, mushrooms, and cheese.': 1, 'Plumes of smoke.': 1, 'The back door.': 1, 'Gray and murky.': 1, 'No soda.': 1, 'Bride and groom.': 1, 'A catamaran raft.': 1, \"The elephant and it's rider.\": 1, 'Wooden slats.': 1, 'Dresser.': 1, 'Joy.': 1, 'Fork and knife.': 1, 'A trick on a skateboard.': 1, 'Plungger.': 1, 'Sun visor.': 1, 'Electric pole.': 1, 'A set of skis.': 1, 'Red headlights.': 1, 'White chunks.': 1, 'Traffic lights on top.': 1, 'Cliffs.': 1, 'Golden yellow.': 1, 'Twigs.': 1, 'Speed boat.': 1, 'A sofa.': 1, 'Brown signs.': 1, 'Toboggan.': 1, 'Sweatshirts.': 1, 'Parking.': 1, 'Black chair.': 1, 'Black and brown.': 1, 'A long overcoat.': 1, 'Rails of the railroad track.': 1, 'Coal.': 1, 'Power cables.': 1, 'Lying on a surfboard.': 1, 'Ferry.': 1, 'A plant in a pot.': 1, 'A picture of a man.': 1, 'Stem.': 1, 'A thistle plant.': 1, 'Metal fence.': 1, 'The refrigerators.': 1, 'Green vegetables.': 1, 'Mild.': 1, 'Belt.': 1, 'Royal.': 1, 'Menu.': 1, 'Down position.': 1, 'Pickle.': 1, 'Sweatband.': 1, 'They are talking.': 1, 'Blue and pink.': 1, 'To stop.': 1, 'A white toilet.': 1, 'A watch.': 1, 'A bowtie.': 1, 'Clenched together.': 1, 'KIR 055.': 1, 'Blueish green.': 1, 'There are tags.': 1, 'Some people.': 1, 'A white diaper.': 1, 'Cord.': 1, 'Adidas.': 1, 'Two white drawers.': 1, 'The whole room.': 1, 'Empty tracks.': 1, 'A christmas scene.': 1, 'Baby doll.': 1, 'A CLEAR BLUE SKY.': 1, 'Red lettering.': 1, 'Ridges.': 1, 'Mozzarella.': 1, 'A weather vane.': 1, 'An apple tree.': 1, 'Terraces.': 1, 'Standing on three legs.': 1, 'Is a black bag back pack.': 1, 'Locomotive?.': 1, 'A long tail.': 1, 'Front wheel.': 1, 'Wood color.': 1, 'Cockpit.': 1, 'Target.': 1, 'Making a clay jar.': 1, 'Dark dress.': 1, 'Pumpkins.': 1, 'Bulldog.': 1, 'A large rock.': 1, 'Pot.': 1, 'The books.': 1, 'Buying fruits.': 1, 'A yellow warning sign.': 1, 'The leg is Brown.': 1, 'Dog tags.': 1, 'Hexagons.': 1, 'Neckties.': 1, 'The batter and umpire.': 1, 'Pink and tan.': 1, 'A lighthouse.': 1, 'Black boots.': 1, 'Divide the court.': 1, 'Modern.': 1, 'Green cuckoo clock.': 1, 'White rice.': 1, 'Light poles.': 1, 'A white centerpiece.': 1, 'A motorbike.': 1, 'Piles of rocks.': 1, 'Red and beige.': 1, 'Trees and sidewalk.': 1, 'He has on black sneakers.': 1, 'Clear blue skies.': 1, 'Nuts.': 1, 'A costume.': 1, 'Three sheep.': 1, 'Kiosk charges.': 1, 'The oven door.': 1, 'The doors.': 1, 'Carriage.': 1, 'Knit hat.': 1, '4:30.': 1, 'Chair arm.': 1, 'Water bottle.': 1, 'Juggling.': 1, 'A line.': 1, 'Franklin st and 3rd ave.': 1, 'Shadow of rider.': 1, 'Mat.': 1, 'Black protective gear.': 1, 'A white kite with a pink tail.': 1, 'Contrails.': 1, 'Two traffic lights.': 1, 'Water droplets.': 1, 'Tying tie.': 1, 'Planes.': 1, 'Atomic.': 1, 'A cube.': 1, 'Lizard.': 1, 'Small blue bowl.': 1, 'Walking through park.': 1, 'Camera flash.': 1, 'Glaze.': 1, 'Cellular phone.': 1, 'Noodles.': 1, 'Cameras.': 1, 'A star symbol.': 1, 'White stone.': 1, 'The hot dog bun.': 1, 'Green bananas.': 1, 'Two white sinks.': 1, 'A double yellow line.': 1, 'A windshield.': 1, 'Glassware.': 1, 'Jack.': 1, 'Fluorescent lights.': 1, 'His mouth.': 1, 'Black, orange and white.': 1, 'A honey jar.': 1, 'A steeple.': 1, 'Ground and Houses.': 1, 'Starbucks.': 1, 'Front of train.': 1, 'Turbines.': 1, 'A thumb.': 1, 'Toothpicks.': 1, 'Taking a photo.': 1, 'A dark shirt.': 1, '8th Street.': 1, 'A trunk of a tree.': 1, 'This sky.': 1, 'Healthy.': 1, 'Food tray.': 1, 'Is your birthday.': 1, 'Sign on right.': 1, 'Construction.': 1, 'Homes.': 1, 'A glass of beer.': 1, 'Bacon and egg.': 1, 'White cloth.': 1, 'Fax machine.': 1, 'Red basket.': 1, 'Brick wall.': 1, 'A reflection of glass and plant.': 1, 'Blue polka dot.': 1, 'Pink black and white.': 1, 'Ceramic pitcher.': 1, 'Disposable.': 1, 'Chalk board.': 1, 'A black knitted cap.': 1, 'Red tennis dress.': 1, 'Tall hedges.': 1, 'Guns.': 1, 'A hood.': 1, 'The river.': 1, 'Silver bar.': 1, 'Blue writing.': 1, 'Gold kazoo.': 1, 'Bibs.': 1, 'The bear on the left.': 1, 'Rabbit.': 1, 'Dog collar.': 1, 'Black & red.': 1, 'Different color umbrellas.': 1, 'Standing in the grassy area.': 1, 'A wagon.': 1, '2009.': 1, 'The stem.': 1, 'A row of planes.': 1, 'Log cabin.': 1, 'Silver and wrinkled.': 1, 'Cheese and pepperoni.': 1, 'Dark grey.': 1, 'Boat on right.': 1, 'Large black pole.': 1, 'Roast beef and broccoli.': 1, 'Standing still.': 1, 'Puppets.': 1, 'Handwriting.': 1, '3.': 1, 'Breading.': 1, 'White shirt.': 1, 'Black, white and gray.': 1, 'Sale.': 1, 'Fighter jets.': 1, 'Walk along.': 1, 'A room.': 1, 'Fleece.': 1, 'Toy.': 1, 'Down hill.': 1, 'Tour.': 1, 'The parachute.': 1, 'A black top.': 1, 'A rail.': 1, 'Zeal Optics.': 1, 'Wii.': 1, 'Blue circle.': 1, 'Standing in the water.': 1, 'A hand and a phone in it.': 1, 'Tall tree.': 1, 'Skateboarder.': 1, 'Popcorn.': 1, 'A bow tie.': 1, 'A strap.': 1, 'Lime green paint.': 1, 'The hydrant.': 1, 'Standing in canoe.': 1, 'Facebook.': 1, 'A ledge.': 1, '4 motors and wings.': 1, 'A bus parked next to a stone wall.': 1, 'Reindeer.': 1, 'Green and White.': 1, 'Brackets.': 1, 'Laying in the field.': 1, 'A grey truck with old flat bed.': 1, 'Speaking to a man on the platform.': 1, 'Reading.': 1, 'Reflection of the chair legs.': 1, 'A cloudy sky.': 1, 'Their shadows.': 1, 'Poker chips.': 1, 'The sink is round.': 1, 'A dock.': 1, 'Lounging on the ground.': 1, 'A home made pizza.': 1, 'Iphone.': 1, 'Paved cement.': 1, 'Ski pants.': 1, 'Being flown.': 1, 'A blue cage.': 1, 'The church.': 1, 'Moustache.': 1, 'Wooden chair.': 1, 'ESPN.': 1, 'Ferns.': 1, 'The paper.': 1, 'The bathroom.': 1, 'A blue roll of toilet paper.': 1, 'Serv.': 1, 'Linen.': 1, 'The tennis racket.': 1, 'A white plate with blue trim.': 1, 'The bushes.': 1, 'Standing on the corner.': 1, 'Fender.': 1, 'A clear sphere.': 1, 'A red lei.': 1, 'Salmon.': 1, 'A plastic bag.': 1, \"It's ear is large.\": 1, 'Chair under the umbrella.': 1, 'Snowy.': 1, 'A wooden fence.': 1, 'A big brown bear and smaller bears.': 1, 'Turquoise.': 1, 'Trim.': 1, 'Feet.': 1, 'The fences.': 1, 'Cinder Block.': 1, 'Stone walls.': 1, 'A bowl.': 1, 'Sweatbands.': 1, 'The roast beef sandwich.': 1, 'Life jackets.': 1, 'Spoons.': 1, 'Smiles.': 1, 'A brown stick.': 1, 'Buttered.': 1, 'Recessed lighting.': 1, 'Indoor.': 1, 'Left to right.': 1, 'Swinging.': 1, 'Rock and foliage.': 1, 'White square.': 1, 'Green and pink.': 1, 'Downhill.': 1, 'A red apple is on the table.': 1, 'Cabinet.': 1, 'Tan building.': 1, 'Hitting the ball.': 1, 'Brown filling.': 1, 'Newspaper articles.': 1, 'Orrange.': 1, 'Yellow and grey.': 1, 'A street light.': 1, 'The text is red.': 1, 'A street.': 1, 'A glove/.': 1, 'Griptape.': 1, 'A hotdog.': 1, 'Ears.': 1, 'A city skyline.': 1, '400.': 1, 'METROLINK.': 1, 'Holding hands.': 1, 'Dirty suitcase.': 1, 'Blue blanket.': 1, 'Black tile.': 1, 'Warning.': 1, 'The desk.': 1, 'Swim fins.': 1, 'Pink pants and a white coat.': 1, 'The chair is blue.': 1, 'Line.': 1, 'Market place.': 1, 'Balancing.': 1, 'Pillars.': 1, 'Pink toilet paper.': 1, 'Saucer.': 1, 'Another horse.': 1, 'Brushing teeth.': 1, 'Pink and white.': 1, 'Tea kettle.': 1, 'Shoe.': 1, 'Pantry.': 1, 'Daylight.': 1, 'Armor.': 1, '444 006 4006.': 1, 'Veil.': 1, 'It is a curtain to change behind.': 1, 'Blue carriage.': 1, 'Falling.': 1, 'Gray, white and red.': 1, 'Two bags.': 1, 'A gorilla suit.': 1, 'Chocolate with strawberries.': 1, 'Masks.': 1, 'Pair of pants.': 1, 'Party.': 1, 'A frog.': 1, 'Foil paper.': 1, 'Cucumbers.': 1, 'Disney mobile.': 1, '51.': 1, 'Airport.': 1, 'Reins.': 1, 'Orange, green and blue.': 1, 'Black arms.': 1, 'A white and pink plate.': 1, 'Eyes.': 1, 'Fruit with a severed arm.': 1, 'Evergreen trees.': 1, 'Red car.': 1, 'The lion.': 1, 'Bowl and bottles.': 1, 'Hanging.': 1, 'Sliding.': 1, 'Several boats.': 1, 'Caty.': 1, 'Whiskers.': 1, 'A dog leash.': 1, 'The steel beams.': 1, 'Lamp.': 1, 'White shoes.': 1, 'A reddish building.': 1, 'Cutting an apple.': 1, 'Surf.': 1, 'Soup.': 1, 'Light blue.': 1, '0.': 1, 'The zebra is eating grass.': 1, 'Jumping to catch a frisbee.': 1, 'Daylight hours.': 1, 'Laying on the couch.': 1, 'Steam engine.': 1, 'Ground.': 1, 'Hatch End.': 1, 'Board.': 1, 'Wedding.': 1, 'Resting her head in her hand.': 1, 'White china plate.': 1, 'Posting a sign.': 1, 'A cooking show.': 1, 'A person.': 1, 'A large donut.': 1, 'An entertainment center.': 1, 'Looking at map.': 1, 'A controller.': 1, 'Tour buses.': 1, 'Red apple.': 1, 'Is opaque.': 1, 'Black phone.': 1, 'Slices.': 1, 'Yellow, green, white and purple.': 1, 'A wire.': 1, 'Smartphone.': 1, 'Grass on his back.': 1, 'Minchinton.': 1, 'Glass of beer.': 1, 'White comforter.': 1, 'Plastic apron.': 1, 'Kiteboarding.': 1, 'Plants and bushes.': 1, 'Motorbikes.': 1, 'Animal.': 1, 'Gowns.': 1, 'Fifty-two.': 1, 'A clear blue day.': 1, 'Cutting through the chain.': 1, 'A goat.': 1, 'Tail stabilizer.': 1, 'The soda cans.': 1, 'Float.': 1, 'A sewing machine.': 1, 'Toddler is picking up a cell phone.': 1, 'Pomeranian.': 1, 'The front.': 1, 'Hotdog bun.': 1, 'Bear heads.': 1, 'Happy.': 1, 'Skiing and snowboarding.': 1, 'A city.': 1, 'Get ready to hit the ball.': 1, 'Gun.': 1, 'Black gloves.': 1, 'Front legs.': 1, 'Grass patches in dirt.': 1, 'The man with the sweater vest.': 1, 'Skirt.': 1, 'Alcohol.': 1, 'A bun.': 1, 'Potting soil.': 1, 'Branches.': 1, 'Dent.': 1, 'The bean.': 1, 'Green and white tennis court.': 1, 'Mustard.': 1, 'Five.': 1, 'A narrow vase.': 1, 'Southwest Airlines.': 1, 'Brushing her teeth.': 1, 'Human face.': 1, 'An orange cat.': 1, 'A pay phone.': 1, 'Cauliflower.': 1, 'Gray and tan cat.': 1, 'Lots of bikes.': 1, 'A patch of white hair.': 1, 'Pie crust.': 1, 'People are boating.': 1, 'Road sign.': 1, 'Veggies.': 1, 'Signs and traffic lights.': 1, 'Skateboard path.': 1, 'Texting.': 1, 'The cars.': 1, 'A monitor on the desk.': 1, 'A round table.': 1, 'White surfboard.': 1, 'Dancing.': 1, 'A black fence.': 1, 'A green tray of veggies.': 1, 'A traffic sign.': 1, 'A dry erase board.': 1, 'Back right.': 1, 'A beige hat.': 1, 'A television.': 1, 'Many trees.': 1, 'Playing in the water.': 1, 'Sauce from the meat.': 1, 'Almost knee high.': 1, 'Caps.': 1, 'The green trees.': 1, 'American flags.': 1, 'Stony.': 1, 'Laptop computers.': 1, \"Eating from the lady's plant.\": 1, 'MASH.': 1, 'The pots.': 1, 'A rocking chair.': 1, 'A wing.': 1, 'It was taken.': 1, 'Thick clouds are in the sky.': 1, 'The black base.': 1, 'Dark animal.': 1, 'A group of benches.': 1, \"Man's arm.\": 1, 'White wine.': 1, \"Don't walk.\": 1, 'The surface of the table.': 1, 'A wooden pillar.': 1, 'The stuffed toy.': 1, '7632.': 1, 'Short, black.': 1, 'A green rail.': 1, 'A bear in an enclosure.': 1, 'Tan pants.': 1, 'People sitting.': 1, 'The school bus.': 1, 'Metal legs.': 1, 'Mate.': 1, 'Bracelet.': 1, 'Thin pineapple slice with cherry in center.': 1, 'Straw.': 1, 'The cats nose.': 1, 'Dunkin Donuts.': 1, 'Overcast and rainy.': 1, 'Twisted.': 1, 'Flaga.': 1, 'Computer, drink, papers.': 1, 'Making a cell phone call.': 1, 'Male and female.': 1, 'Dry.': 1, 'The water is aqua blue.': 1, 'A blackboard.': 1, 'A ship.': 1, 'White tablecloth.': 1, 'Smaller waves.': 1, 'Shorts and a shirt.': 1, 'A jug.': 1, 'Water and sky.': 1, 'A pen.': 1, 'Reading lights.': 1, 'A ribbon.': 1, 'Faucet.': 1, 'A succulent.': 1, 'Beware of pedestrians.': 1, 'EgyptAir.': 1, 'A silver laptop.': 1, 'Out of bounds.': 1, 'They are black and white.': 1, 'Pie, sauce and spoon.': 1, 'Whirlpool.': 1, 'A stained window.': 1, 'Raised.': 1, 'The skies.': 1, 'Radio City Music Hall.': 1, 'Trees with green leaves.': 1, 'Brown ground and grass.': 1, 'From the top down.': 1, 'Blue and White.': 1, 'Cowboy.': 1, 'Arch.': 1, 'Tin foil.': 1, 'Small towels.': 1, 'A minion.': 1, 'Fridge and freezer.': 1, 'Vintage.': 1, 'The paw.': 1, 'Black wetsuit.': 1, 'Blurry.': 1, 'Dark Blue.': 1, 'Alpha & beta giraffe.': 1, 'TEAC.': 1, 'A round plate.': 1, 'A military aircraft.': 1, 'Many other photos.': 1, 'A tongue.': 1, 'Pewter.': 1, 'White horse.': 1, 'Desserts.': 1, 'Trunks.': 1, 'A white Wii box.': 1, 'Wooden train.': 1, 'Cone.': 1, 'Graffitti.': 1, 'A stocking cap.': 1, 'Burrito.': 1, 'High stockings.': 1, 'Roman numerals are painted on the bike seat.': 1, 'Cirrus.': 1, 'Royal Blue.': 1, 'Trail.': 1, 'Zebra and giraffe.': 1, 'A bow.': 1, 'Body of water.': 1, 'A tag.': 1, 'Straight forward.': 1, 'A fountain.': 1, 'Vegetable soup.': 1, 'Plate with salad.': 1, 'A set of train tracks.': 1, 'Bowling balls.': 1, 'Red weaved plastic table mat.': 1, 'The buckle.': 1, 'It is blue.': 1, 'Meat.': 1, 'Wagaga Health Centre.': 1, '7:46.': 1, 'Box on pole.': 1, 'Tee shirt.': 1, 'A purple bus.': 1, 'Computer monitor.': 1, 'The handlebars.': 1, 'A bigger laptop.': 1, 'A power pole.': 1, 'A shower door.': 1, 'Grass field.': 1, 'About to depart.': 1, 'Eleven.': 1, 'It is yellow.': 1, 'A horse trailer.': 1, 'Pedaling an upright bicycle.': 1, 'Playing fetch.': 1, 'White with stripes.': 1, 'Five people.': 1, 'Batter.': 1, 'Market Harborough.': 1, 'Red tee and Shorts.': 1, 'Shower head.': 1, 'Bag.': 1, 'Sunny and clear.': 1, 'Bicycle seats.': 1, 'Raining.': 1, 'A sweatshirt.': 1, 'Picking up luggage.': 1, '6:47.': 1, 'Runway.': 1, 'Curling.': 1, 'The tennis player is wearing a purple athletic shirt.': 1, 'Desktop.': 1, 'Piece of yellow pepo.': 1, 'Dining room.': 1, 'The baby toys.': 1, 'It has curtains.': 1, 'Turds.': 1, 'Icelandair.': 1, 'Light wood.': 1, 'Middle-aged.': 1, 'A streetcar.': 1, 'Paper towels.': 1, 'Hoagie.': 1, 'A collared one.': 1, 'The edge.': 1, 'Outdoor scense.': 1, 'A placemat.': 1, 'Counter.': 1, 'Of a rams body.': 1, 'Moving vehicle.': 1, 'Red, white, green, and black.': 1, 'Woman looking in broken mirror.': 1, 'Dasani.': 1, 'Kite string.': 1, 'A brick.': 1, 'A green field.': 1, 'Loading.': 1, 'A donkey.': 1, 'A golfers cap.': 1, 'Flying and sitting on pillars.': 1, 'Navy.': 1, 'The kite.': 1, 'A raised lawn above wall.': 1, 'The grass is a very dark green.': 1, 'Cones and motorcycles.': 1, 'Concrete pillars.': 1, 'Cutting hair.': 1, 'A t-shirt.': 1, 'The toaster oven panel.': 1, 'The metallic box.': 1, \"The blue umbrella in the man's right hand.\": 1, 'Sugar crystals.': 1, 'Larchmont Village.': 1, '4:39.': 1, 'Bending forward.': 1, 'Potatoes.': 1, 'Is setting.': 1, 'Arrow sign.': 1, 'Street lights.': 1, 'Analog.': 1, 'The chair.': 1, 'Tricks.': 1, 'Posts.': 1, 'Large red brick bridge.': 1, 'Stunt.': 1, 'Electronic.': 1, 'There is pink icing on the white paper.': 1, 'Large brown bear.': 1, 'Opening a water hydrant.': 1, 'Palm leaves.': 1, 'The neck.': 1, 'A green textile surface.': 1, 'Rectangular screen.': 1, 'Dense trees.': 1, 'A doll.': 1, 'Barney.': 1, 'Be ready for life.': 1, 'Red with a brown border.': 1, 'Hose.': 1, 'He is barefoot.': 1, 'Yellow jacket.': 1, 'Licking the little giraffe.': 1, 'Slatted metal bench.': 1, 'A number.': 1, 'Green tarp used to protect court when not in use.': 1, 'The front of a metal work of art.': 1, 'Microwave.': 1, 'Colorful vase.': 1, 'The cabinets.': 1, 'Pop up.': 1, 'Sunflower.': 1, 'The stuffing.': 1, 'Cigarettes.': 1, 'Of the man.': 1, 'Wooden posts.': 1, 'Swim trunks.': 1, 'Purple, black, yellow, and red.': 1, 'Clear weather.': 1, 'Toilet paper holders.': 1, 'Digital.': 1, 'A small vehicle.': 1, 'The picture.': 1, 'A \"ripe\" spot.': 1, 'Art.': 1, '883.': 1, 'Residential.': 1, 'Zebras and Giraffes.': 1, 'Everything behind the remote.': 1, 'A lincoln.': 1, 'Fan.': 1, 'Reddish.': 1, 'White wool.': 1, 'The wing.': 1, 'Elderly man.': 1, 'Polar bears.': 1, 'A cement truck.': 1, 'Plenty of flags.': 1, 'The two silver door handles.': 1, 'Red dress.': 1, 'A flower.': 1, 'A pair of feet.': 1, 'Stair.': 1, 'Crashing.': 1, 'A black tire.': 1, 'Glass windshield.': 1, 'Traveling down the track.': 1, 'Black nail polish.': 1, 'Macbook.': 1, 'The monitor.': 1, 'A pumpkin.': 1, 'Ceramic plate.': 1, 'Passenger windows.': 1, 'A shoe.': 1, 'Two pictures.': 1, 'The pavement.': 1, 'Going up a mountain.': 1, 'Red and blue.': 1, 'A miniature Christmas tree.': 1, 'Brown spots.': 1, 'Sleeveless.': 1, 'Tower clock.': 1, 'Swiss army.': 1, 'A white and brown spotted.': 1, 'Mediterranean.': 1, 'Patch of grass.': 1, 'Black bag.': 1, 'A purple dress.': 1, 'White bars.': 1, 'A clothes organizer.': 1, 'Black bike.': 1, 'Dump Truck.': 1, 'Black, white and red.': 1, 'Reading a book.': 1, 'A sign post.': 1, 'Thanks.': 1, 'Barbwire fence.': 1, 'Gray drawers.': 1, 'Metal poles.': 1, 'Truck behind the firetruck.': 1, 'The shirt.': 1, 'A pot.': 1, 'A kitten.': 1, 'The elephant is made from wood.': 1, 'A crown.': 1, 'Metal bars.': 1, 'Ostrich.': 1, 'Egg.': 1, 'A stack of stones.': 1, 'Corned Beef.': 1, 'Background.': 1, 'Ball and bear.': 1, 'Large cow.': 1, 'Bulletin board.': 1, 'Black bracelet and an LED watch.': 1, 'Cash Only.': 1, 'Copper.': 1, 'Snowy mountain range.': 1, 'A wooden equestrian fence.': 1, 'A green cone.': 1, 'Large black tires.': 1, 'Bamboo.': 1, 'Pink tennis shoes.': 1, 'Red & Green.': 1, 'Alert white dog.': 1, 'The left side.': 1, 'A branch.': 1, 'The trick.': 1, 'A pinwheel.': 1, 'Weathered.': 1, 'Boogie board.': 1, 'Laying down together.': 1, 'An iron.': 1, 'Deck.': 1, 'They are yellow.': 1, 'Bar stools.': 1, 'Manual.': 1, 'Blue and black head.': 1, 'Henry T. McLin.': 1, 'Silver and white.': 1, 'Green trees.': 1, 'Black lines.': 1, 'Wednesday.': 1, 'A red tail.': 1, 'A woman riding a skateboard.': 1, 'Rocky ground.': 1, 'Wii mote.': 1, 'A sleeper.': 1, 'A billboard.': 1, 'Paddle.': 1, 'A water glass.': 1, 'Draperies.': 1, 'Lush.': 1, 'Mushroom swiss burger.': 1, 'China airlines.': 1, 'Give way to oncoming vehicles.': 1, 'Apple dessert.': 1, 'Drinking wine.': 1, \"The cat's reflection.\": 1, 'The white bus.': 1, 'A green vest.': 1, '101.5 FM.': 1, 'Toppings.': 1, 'The motorcycle.': 1, 'Telephone poles.': 1, 'Wood and steel.': 1, 'Bowling.': 1, 'Racket and ball.': 1, 'Sky and vegetation.': 1, 'Fencing.': 1, 'A roll of tape.': 1, 'A pawn shop.': 1, 'A stick and a rock.': 1, 'Black and green pictographs.': 1, 'Beard.': 1, 'A gold lion.': 1, 'A soda.': 1, 'Pedestals.': 1, 'A man, skateboard, and a park.': 1, 'A camera flash.': 1, 'A microphone.': 1, 'A yellow door.': 1, 'Cutting pizza.': 1, 'The curb.': 1, 'Brown tree trunks.': 1, 'Shell like wheel.': 1, 'Black with a white face.': 1, 'Red and white stripes?.': 1, 'Completely clear.': 1, 'Peace.': 1, 'Spectators.': 1, 'Watching TV.': 1, 'Train tracks, dirt.': 1, 'Red hair.': 1, 'A door with kids coats hanging on a wall and two pillows on a chair.': 1, 'Strap.': 1, 'A short stone curb.': 1, 'Toilet seat.': 1, 'Red, orange and brown.': 1, 'A black polo shirt.': 1, 'Towing vehicle.': 1, 'Green t-shirt.': 1, 'Ripped blue jeans.': 1, 'Otter.': 1, 'A spiral notebook.': 1, 'To the right.': 1, 'A picture frame.': 1, 'Squatting.': 1, 'A tall concrete building.': 1, 'A tall tree.': 1, 'Stalks.': 1, 'Fins.': 1, 'A roll.': 1, 'Black bow tie on collar.': 1, 'Blue jacket.': 1, 'People.': 1, 'The remote.': 1, 'Cyclist.': 1, 'Speckled.': 1, 'Horns on giraffes head.': 1, 'Metal and glass.': 1, 'A light post.': 1, 'Masts.': 1, 'Different flavore.': 1, 'A frito.': 1, 'The right cow.': 1, 'Brace.': 1, 'A twin.': 1, 'Barrier.': 1, 'Dainty Sichuan Food.': 1, 'A small boat.': 1, 'Face guard.': 1, 'It is noon.': 1, 'Copper and Silver.': 1, 'Pizza Hut.': 1, 'Putting a pizza in the oven.': 1, 'An arch.': 1, 'Windscreen.': 1, 'A steel door.': 1, 'Red circles and lines.': 1, 'A ski stick.': 1, 'A black shirt with white designs.': 1, 'Downhill skiing.': 1, 'River has wire fence.': 1, 'A white rag.': 1, \"Lee's Sandwiches.\": 1, 'Silver truck.': 1, '3D pattern.': 1, 'Backpacks.': 1, 'Evergreen tree.': 1, 'Cork.': 1, 'Cap curling.': 1, 'A lid.': 1, 'A silver trailer.': 1, 'A telescope.': 1, 'Mountains are visible.': 1, '224-0360.': 1, 'Caffe Italia.': 1, 'Swinging it.': 1, 'Syrup.': 1, 'Twin coin parking meters.': 1, 'Nothing.': 1, 'Tank top.': 1, 'Brown fur.': 1, 'A tiara.': 1, 'The number 1.': 1, 'Grate on the street.': 1, 'Gray gravels.': 1, 'Laid back.': 1, 'Picnic table.': 1, 'Beige and brown.': 1, 'The console.': 1, 'Rounded.': 1, 'Handle of the suitcase.': 1, 'Riding a wave.': 1, 'Green hay.': 1, 'Yellow, blue, and green.': 1, 'A strapless gown.': 1, 'The giraffes.': 1, 'A baby holding a frisbee.': 1, 'Tying the tie.': 1, 'Celebrating.': 1, 'Grass and trees.': 1, 'Scotch.': 1, 'Red barn.': 1, 'Rain coat is gray.': 1, 'Fasten seat belts.': 1, 'The umbrella.': 1, 'Storage container.': 1, \"Person's arm.\": 1, 'A logo.': 1, 'A Slipcover.': 1, 'Village.': 1, 'Stop Me.': 1, 'Laying flat.': 1, 'Terrier.': 1, 'Very small.': 1, 'Perked upward.': 1, '1:11.': 1, 'White cutting board.': 1, 'The lush green trees.': 1, 'A painting.': 1, 'SIlver.': 1, 'The stoop and concrete wall.': 1, 'Cheese on square pizza.': 1, 'His pants are red and white.': 1, 'A hillside covered in dirt.': 1, 'Stone pedestal of the building.': 1, 'The rope.': 1, 'Foot prints.': 1, 'Gold and white.': 1, 'A dead bird.': 1, 'Coat and pants.': 1, 'Playing game.': 1, 'Sleeves.': 1, 'Old.': 1, 'Hamburger.': 1, 'Blankets and pillows.': 1, 'Black and red.': 1, 'Birthday party.': 1, 'Beef.': 1, 'White truck.': 1, 'Mop handle.': 1, 'Four white poles.': 1, '5619.': 1, 'Multifresh.': 1, 'Sunflowers.': 1, 'Street sign on pole.': 1, 'Red or blue patches.': 1, 'Dark colored patterned.': 1, 'The brown leaves and dirt.': 1, 'The door knob is gold.': 1, 'The sun.': 1, 'Upright bass.': 1, 'Belly.': 1, 'Lego man.': 1, 'A stem.': 1, 'A cliff.': 1, 'Scania.': 1, 'Chef hats.': 1, 'The surfer.': 1, 'A Darth Vader costume.': 1, 'Small clouds.': 1, 'Dirt and rocks.': 1, 'Whitre.': 1, 'Cables.': 1, \"Woman's jacket.\": 1, 'Bending over to eat.': 1, 'Natural sun light.': 1, 'Forest green.': 1, 'A small wooden fence.': 1, 'A penguin.': 1, '102.': 1, 'Pajamas.': 1, 'Cowboy boot.': 1, 'Computer peripherals.': 1, 'A bar of soap.': 1, 'Blue and tan.': 1, 'The rocks.': 1, 'Lamp shade.': 1, 'Empty concrete pool.': 1, 'Tutu.': 1, 'Fruits and vegetables.': 1, 'Two beds.': 1, 'Drawers.': 1, 'Paddling the surfboard.': 1, 'A polo bat.': 1, 'Bent down.': 1, 'The hat.': 1, 'Blue and white stripes.': 1, 'Green string.': 1, \"It's jeans.\": 1, 'Log.': 1, 'Large roof.': 1, 'A mascot.': 1, 'Downhill and to the right.': 1, 'Kelly.': 1, 'Round circle.': 1, 'One black and one blue.': 1, 'Sitting and eating.': 1, 'Mouse.': 1, 'Refrigerator.': 1, 'Turn signal.': 1, 'Chiquita.': 1, 'A utensil.': 1, 'Going to the bathroom.': 1, 'Long sleeve black shirt.': 1, 'A tub.': 1, 'A shower.': 1, 'Sleeping bag.': 1, 'A human.': 1, 'Wooden structures with blue sky in background.': 1, 'Green patches of grass.': 1, '78.': 1, 'Green and brown.': 1, 'The top.': 1, 'A face mask.': 1, 'Broccoli, chicken and rice.': 1, 'A pencil holder.': 1, 'Big blue letters.': 1, 'Red with black tires.': 1, 'Black yellow and white.': 1, 'Eating utensil.': 1, 'A man pitching a ball.': 1, 'Banner.': 1, 'Short white socks.': 1, '2010.': 1, 'Two floor white building.': 1, 'Pink kite.': 1, 'They are closed.': 1, 'A brown boat.': 1, 'Newspaper.': 1, 'The black cat.': 1, 'Scratch marks.': 1, 'Exhaust/Engine.': 1, 'Swinging a racket.': 1, 'Metals.': 1, 'Scissors.': 1, 'A cart.': 1, 'Vegetarian.': 1, 'Ring.': 1, 'Aircraft.': 1, 'Computer screens.': 1, 'Brown and yellow.': 1, 'The word stop is written on the sign.': 1, 'Black and blue.': 1, 'Crouching behind the catcher.': 1, 'France.': 1, 'Ribbon.': 1, 'Boswell house.': 1, 'A pair of shoes.': 1, 'A bunch of strings.': 1, 'Quintrix.': 1, 'Parked at terminal.': 1, 'Flat screen.': 1, 'A thermostat.': 1, 'The sign.': 1, 'Grape juice.': 1, 'A dark blue shirt and shorts.': 1, 'National theatre.': 1, 'The dog.': 1, 'Tall grass and a house.': 1, 'Dock.': 1, 'Lawnmower.': 1, 'UNITED.': 1, 'Plastic cases.': 1, 'A readied bath.': 1, 'An overpass.': 1, 'The traffic light.': 1, 'A grey hoodie.': 1, 'Pieces.': 1, 'A pair of sunglasses.': 1, 'Ocean tide is crashing into beach.': 1, '42.': 1, 'Sprinkles and icing.': 1, 'An empty vase.': 1, '2894.': 1, 'Goatee.': 1, 'Tail of a red and yellow kite.': 1, 'Lady fingers.': 1, 'Handle bars.': 1, 'Air conditioning.': 1, 'Microsoft.': 1, 'Closing her eyes.': 1, 'A speaker.': 1, 'Chicken with broccoli and peanuts.': 1, 'Slats.': 1, 'A black lid.': 1, 'The knife.': 1, 'Coca Cola.': 1, 'Fire hydrant.': 1, '2005.': 1, 'Laptop screen.': 1, 'Shearing sheep.': 1, 'Lying.': 1, 'The lights.': 1, 'The shadows of trees.': 1, \"I'M SO EXCITED.\": 1, 'Playing with a ball.': 1, \"The shirt's sleeves.\": 1, 'Soccer field.': 1, 'Medical brochures and advertisements.': 1, 'Gold hat.': 1, 'A catcher.': 1, 'Banca of roma.': 1, 'Podium.': 1, 'Barbecue sauce.': 1, 'Baseball field.': 1, 'Skateboarding?.': 1, 'Rock wall.': 1, 'A red coat.': 1, 'White water.': 1, 'Saddle bag.': 1, 'Woman walking in rain.': 1, 'Lush trees.': 1, 'A shirt, jeans and sneakers.': 1, 'White patch.': 1, 'A manhole.': 1, 'The toilet base.': 1, 'Chicken, potatoes, and broccoli.': 1, 'A tv.': 1, 'Folding chair.': 1, 'Orange juice.': 1, 'Lifesaver.': 1, 'Claim ticket.': 1, 'Greenery.': 1, 'Onion, carrot, and celery.': 1, 'White tile.': 1, 'Gutters.': 1, 'Rail tracks.': 1, 'Low cut green grass.': 1, 'A lime.': 1, 'Yellow bags.': 1, 'A Flag.': 1, 'A red banner.': 1, 'Gravel, stones and metals.': 1, 'Kneepads.': 1, 'Pizza spatula.': 1, 'Two trains in a station.': 1, 'It is rice.': 1, 'A large bush with flowers.': 1, 'Floor to ceiling.': 1, 'A skirt.': 1, 'Freebee.': 1, '0:50.': 1, 'Baseball cap.': 1, 'The roof is steel.': 1, 'Nose.': 1, 'A white blossom tree.': 1, 'The laptops.': 1, 'A planter box.': 1, 'Phones.': 1, 'KItchen.': 1, 'Elephant in the wild.': 1, 'Pink and purple.': 1, 'Big Ben.': 1, 'Belltower.': 1, 'A bunny rabbit.': 1, 'A hole.': 1, 'MYA 590.': 1, 'Enjoying view.': 1, 'Brown wood planks.': 1, 'Mating.': 1, 'A white arrow in a blue circle.': 1, 'The radishes.': 1, 'Brown wall.': 1, 'Its black.': 1, 'Drain.': 1, 'A rug.': 1, 'Footboard.': 1, '169.': 1, 'The window frame.': 1, 'A white car.': 1, 'A lot of windows.': 1, 'A yellow line and a white line.': 1, 'Tennis match.': 1, 'Finch.': 1, 'Back of beach chair.': 1, 'Polaroid strip.': 1, 'Panda Bear.': 1, 'Wood rat.': 1, 'Gothic architecture.': 1, 'Time of day.': 1, 'The lambs.': 1, 'The zodiac.': 1, 'One way.': 1, 'Robe.': 1, 'The person in the red shirt.': 1, 'She is kicking.': 1, 'England.': 1, 'Paddling.': 1, 'Framed painting.': 1, 'Blades of grass.': 1, 'Apples and oranges.': 1, 'Southern pacific.': 1, 'Clear blue.': 1, 'A city bus.': 1, 'Two toned.': 1, 'Maple Leaf.': 1, 'Metal and fabric.': 1, 'Red wall.': 1, 'A sun visor.': 1, 'Those are non-glazed doughnuts.': 1, 'Black fence.': 1, 'Statue.': 1, 'The screen of a laptop.': 1, 'Teddy bear face.': 1, 'Mailbox.': 1, 'Driving.': 1, 'Their necks.': 1, 'Man doing jump on skateboard.': 1, 'A line on the field.': 1, 'Gorilla.': 1, 'Broken tree trunk.': 1, 'A bicycle.': 1, 'SoundMusheen.': 1, 'Urinals and a toilet.': 1, 'The shoes are light blue.': 1, 'A blender.': 1, 'Grey and pink spots.': 1, 'Excitement.': 1, 'Advertisements.': 1, 'The cap.': 1, 'Snowboards.': 1, 'A calendar.': 1, 'A ring.': 1, 'Ship.': 1, 'Shrimps mixed in the noodles.': 1, 'A computer mouse.': 1, 'Very blue.': 1, 'Motorcyles.': 1, 'Unbaked.': 1, 'Scrub brush.': 1, 'Handle.': 1, 'A white sink.': 1, 'White label on wine bottle.': 1, 'A light overcoat.': 1, 'It is open.': 1, 'Paintings of nature.': 1, 'Soil.': 1, 'A glove.': 1, 'A brown shirt, beige pants, and black shoes.': 1, 'Watching.': 1, 'Looking at the camera.': 1, 'Rail.': 1, 'Blue helmet.': 1, 'The windshield.': 1, 'A sandy ground.': 1, 'Curly toys.': 1, 'The town across the water.': 1, 'White buns.': 1, 'Burgundy.': 1, 'Wood burning.': 1, 'Facing forward.': 1, 'White sandals.': 1, 'An awning.': 1, 'Banana leaf.': 1, 'Trees in the distance.': 1, 'Edge of a stone surface.': 1, 'Stemware.': 1, 'A \"horse and buggy.\".': 1, 'Columbus.': 1, 'The onions.': 1, 'The parasails.': 1, 'Wall of windows.': 1, 'A zebra.': 1, 'Playing with her phone.': 1, 'A crowd of people.': 1, 'Baseball mitt.': 1, 'Grey stone.': 1, 'A barrel.': 1, 'This is dark green grass.': 1, 'Binder.': 1, 'Bright light.': 1, 'Red brick houses.': 1, 'Skulls.': 1, 'The white keyboard.': 1, 'Sitting in the ground.': 1, 'Hand dryer.': 1, 'The back of the car.': 1, 'A small box.': 1, 'Paint.': 1, 'Controls.': 1, 'Pizza sauce.': 1, 'White dress.': 1, 'Rifles.': 1, 'A street festival.': 1, 'The one way signs.': 1, 'Hot.': 1, 'Two yellow bins.': 1, 'Silver bracelet.': 1, 'Black denim.': 1, 'Toothbrush.': 1, 'The door.': 1, 'MOOK.': 1, 'Mammal.': 1, 'Loooking.': 1, 'Flute.': 1, 'Traffic signal.': 1, '12:15.': 1, 'Midday.': 1, 'A watering hole.': 1, 'Tan and black.': 1, 'Bunched up carpet.': 1, 'The street warning is yellow.': 1, 'Blue water.': 1, 'Jellyfish.': 1, 'A large brick building.': 1, 'Theatre National De Nice NTN.': 1, 'Glass rocks.': 1, 'Los Angeles.': 1, 'Yellow roses.': 1, 'Rainbow.': 1, 'A picnic.': 1, 'Playing frisbee.': 1, 'Brick building.': 1, 'A sports field.': 1, 'Ballet.': 1, 'Red and grey.': 1, 'Open laptop.': 1, 'Hill.': 1, 'The couch.': 1, 'Grabbing for food.': 1, 'A load.': 1, 'Brown and orange.': 1, 'Playing with a toy.': 1, 'That is a pink coat.': 1, 'Wire cable.': 1, 'An id card.': 1, 'Clear with few clouds.': 1, 'Branch.': 1, 'A grate.': 1, 'Black shelf.': 1, 'The tops of the trees.': 1, 'Bay.': 1, 'Fallen leaves.': 1, 'Tree line.': 1, 'LIght Blue.': 1, 'Checkered fabric.': 1, 'METRO.': 1, 'An airplane wing.': 1, 'His right arm.': 1, 'The window.': 1, 'Whole wheat.': 1, 'Laying on a couch.': 1, 'The kitchen.': 1, 'Hot Dogs.': 1})\n",
      "Starting epoch 1/50\n",
      "Epoch [1/50], Batch [1/313], Loss: 8.2903, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [11/313], Loss: 8.2545, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [21/313], Loss: 6.4288, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [31/313], Loss: 7.2965, Accuracy: 0.0625\n",
      "Epoch [1/50], Batch [41/313], Loss: 6.9109, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [51/313], Loss: 7.4707, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [61/313], Loss: 6.9864, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [71/313], Loss: 7.7403, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [81/313], Loss: 6.7255, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [91/313], Loss: 7.1803, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [101/313], Loss: 6.9772, Accuracy: 0.0625\n",
      "Epoch [1/50], Batch [111/313], Loss: 7.2902, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [121/313], Loss: 6.6248, Accuracy: 0.1875\n",
      "Epoch [1/50], Batch [131/313], Loss: 6.4046, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [141/313], Loss: 7.6360, Accuracy: 0.0625\n",
      "Epoch [1/50], Batch [151/313], Loss: 6.4281, Accuracy: 0.0625\n",
      "Epoch [1/50], Batch [161/313], Loss: 6.8429, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [171/313], Loss: 7.9289, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [181/313], Loss: 7.1262, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [191/313], Loss: 7.0143, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [201/313], Loss: 6.2652, Accuracy: 0.1875\n",
      "Epoch [1/50], Batch [211/313], Loss: 7.7125, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [221/313], Loss: 7.3124, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [231/313], Loss: 7.4550, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [241/313], Loss: 6.9219, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [251/313], Loss: 6.4859, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [261/313], Loss: 7.0925, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [271/313], Loss: 7.7149, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [281/313], Loss: 7.0578, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [291/313], Loss: 6.5814, Accuracy: 0.0625\n",
      "Epoch [1/50], Batch [301/313], Loss: 7.2750, Accuracy: 0.0312\n",
      "Epoch [1/50], Batch [311/313], Loss: 6.4954, Accuracy: 0.0625\n",
      "Finished epoch 1/50, Average Loss: 7.1794, Average Accuracy: 0.0446\n",
      "Epoch duration: 1249.67 seconds, Estimated time remaining: 1020.56 minutes\n",
      "Starting epoch 2/50\n",
      "Epoch [2/50], Batch [1/313], Loss: 6.8973, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [11/313], Loss: 6.4043, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [21/313], Loss: 6.5152, Accuracy: 0.0938\n",
      "Epoch [2/50], Batch [31/313], Loss: 7.7068, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [41/313], Loss: 6.1731, Accuracy: 0.0000\n",
      "Epoch [2/50], Batch [51/313], Loss: 5.4650, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [61/313], Loss: 6.5797, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [71/313], Loss: 6.6440, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [81/313], Loss: 6.2434, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [91/313], Loss: 5.9087, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [101/313], Loss: 6.6564, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [111/313], Loss: 6.8508, Accuracy: 0.0000\n",
      "Epoch [2/50], Batch [121/313], Loss: 6.4931, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [131/313], Loss: 6.3853, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [141/313], Loss: 7.5245, Accuracy: 0.0000\n",
      "Epoch [2/50], Batch [151/313], Loss: 7.6293, Accuracy: 0.0000\n",
      "Epoch [2/50], Batch [161/313], Loss: 7.2931, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [171/313], Loss: 6.6401, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [181/313], Loss: 5.9884, Accuracy: 0.0938\n",
      "Epoch [2/50], Batch [191/313], Loss: 6.2783, Accuracy: 0.0000\n",
      "Epoch [2/50], Batch [201/313], Loss: 6.7829, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [211/313], Loss: 6.4431, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [221/313], Loss: 5.9291, Accuracy: 0.0625\n",
      "Epoch [2/50], Batch [231/313], Loss: 6.8130, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [241/313], Loss: 6.5466, Accuracy: 0.0938\n",
      "Epoch [2/50], Batch [251/313], Loss: 6.1236, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [261/313], Loss: 6.9683, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [271/313], Loss: 6.2557, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [281/313], Loss: 7.2225, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [291/313], Loss: 6.0923, Accuracy: 0.1562\n",
      "Epoch [2/50], Batch [301/313], Loss: 7.3177, Accuracy: 0.0312\n",
      "Epoch [2/50], Batch [311/313], Loss: 6.8840, Accuracy: 0.1250\n",
      "Finished epoch 2/50, Average Loss: 6.6130, Average Accuracy: 0.0632\n",
      "Epoch duration: 1228.16 seconds, Estimated time remaining: 982.52 minutes\n",
      "Starting epoch 3/50\n",
      "Epoch [3/50], Batch [1/313], Loss: 6.2339, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [11/313], Loss: 6.2654, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [21/313], Loss: 6.2650, Accuracy: 0.0000\n",
      "Epoch [3/50], Batch [31/313], Loss: 6.9069, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [41/313], Loss: 6.0822, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [51/313], Loss: 6.1487, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [61/313], Loss: 6.4756, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [71/313], Loss: 6.4716, Accuracy: 0.0000\n",
      "Epoch [3/50], Batch [81/313], Loss: 5.6484, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [91/313], Loss: 7.2452, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [101/313], Loss: 6.0675, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [111/313], Loss: 5.8867, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [121/313], Loss: 6.2987, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [131/313], Loss: 6.4174, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [141/313], Loss: 6.4210, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [151/313], Loss: 6.5079, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [161/313], Loss: 6.2224, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [171/313], Loss: 6.6594, Accuracy: 0.0000\n",
      "Epoch [3/50], Batch [181/313], Loss: 6.4856, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [191/313], Loss: 6.4940, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [201/313], Loss: 7.0350, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [211/313], Loss: 6.3983, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [221/313], Loss: 6.6393, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [231/313], Loss: 6.2039, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [241/313], Loss: 6.6566, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [251/313], Loss: 6.4197, Accuracy: 0.0000\n",
      "Epoch [3/50], Batch [261/313], Loss: 6.7993, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [271/313], Loss: 5.3608, Accuracy: 0.0938\n",
      "Epoch [3/50], Batch [281/313], Loss: 6.3553, Accuracy: 0.0625\n",
      "Epoch [3/50], Batch [291/313], Loss: 5.9553, Accuracy: 0.1875\n",
      "Epoch [3/50], Batch [301/313], Loss: 6.7981, Accuracy: 0.0312\n",
      "Epoch [3/50], Batch [311/313], Loss: 6.8669, Accuracy: 0.0625\n",
      "Finished epoch 3/50, Average Loss: 6.2254, Average Accuracy: 0.0736\n",
      "Epoch duration: 1228.88 seconds, Estimated time remaining: 962.63 minutes\n",
      "Starting epoch 4/50\n",
      "Epoch [4/50], Batch [1/313], Loss: 5.6799, Accuracy: 0.1562\n",
      "Epoch [4/50], Batch [11/313], Loss: 5.2973, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [21/313], Loss: 5.9622, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [31/313], Loss: 4.4758, Accuracy: 0.1875\n",
      "Epoch [4/50], Batch [41/313], Loss: 4.8424, Accuracy: 0.1562\n",
      "Epoch [4/50], Batch [51/313], Loss: 5.3071, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [61/313], Loss: 6.3650, Accuracy: 0.0938\n",
      "Epoch [4/50], Batch [71/313], Loss: 6.2305, Accuracy: 0.0625\n",
      "Epoch [4/50], Batch [81/313], Loss: 6.1172, Accuracy: 0.0938\n",
      "Epoch [4/50], Batch [91/313], Loss: 5.7128, Accuracy: 0.0938\n",
      "Epoch [4/50], Batch [101/313], Loss: 5.8770, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [111/313], Loss: 5.6038, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [121/313], Loss: 5.6895, Accuracy: 0.0625\n",
      "Epoch [4/50], Batch [131/313], Loss: 5.1810, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [141/313], Loss: 6.0232, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [151/313], Loss: 6.0741, Accuracy: 0.0625\n",
      "Epoch [4/50], Batch [161/313], Loss: 6.0496, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [171/313], Loss: 5.8853, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [181/313], Loss: 5.6252, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [191/313], Loss: 5.6037, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [201/313], Loss: 6.4934, Accuracy: 0.0938\n",
      "Epoch [4/50], Batch [211/313], Loss: 6.6370, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [221/313], Loss: 5.4501, Accuracy: 0.1562\n",
      "Epoch [4/50], Batch [231/313], Loss: 6.3241, Accuracy: 0.0938\n",
      "Epoch [4/50], Batch [241/313], Loss: 6.3879, Accuracy: 0.0625\n",
      "Epoch [4/50], Batch [251/313], Loss: 5.7649, Accuracy: 0.0000\n",
      "Epoch [4/50], Batch [261/313], Loss: 6.6847, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [271/313], Loss: 6.1770, Accuracy: 0.0312\n",
      "Epoch [4/50], Batch [281/313], Loss: 6.0263, Accuracy: 0.1562\n",
      "Epoch [4/50], Batch [291/313], Loss: 5.4071, Accuracy: 0.1250\n",
      "Epoch [4/50], Batch [301/313], Loss: 5.4462, Accuracy: 0.1875\n",
      "Epoch [4/50], Batch [311/313], Loss: 5.2011, Accuracy: 0.1562\n",
      "Finished epoch 4/50, Average Loss: 5.7611, Average Accuracy: 0.0952\n",
      "Epoch duration: 1230.69 seconds, Estimated time remaining: 943.53 minutes\n",
      "Starting epoch 5/50\n",
      "Epoch [5/50], Batch [1/313], Loss: 5.2038, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [11/313], Loss: 5.2827, Accuracy: 0.1562\n",
      "Epoch [5/50], Batch [21/313], Loss: 4.9632, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [31/313], Loss: 4.8143, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [41/313], Loss: 4.3348, Accuracy: 0.2188\n",
      "Epoch [5/50], Batch [51/313], Loss: 5.0344, Accuracy: 0.1562\n",
      "Epoch [5/50], Batch [61/313], Loss: 4.5563, Accuracy: 0.2500\n",
      "Epoch [5/50], Batch [71/313], Loss: 5.6055, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [81/313], Loss: 4.7137, Accuracy: 0.1875\n",
      "Epoch [5/50], Batch [91/313], Loss: 5.7508, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [101/313], Loss: 4.7004, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [111/313], Loss: 6.1154, Accuracy: 0.0312\n",
      "Epoch [5/50], Batch [121/313], Loss: 5.3892, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [131/313], Loss: 5.9686, Accuracy: 0.0000\n",
      "Epoch [5/50], Batch [141/313], Loss: 5.1461, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [151/313], Loss: 4.8835, Accuracy: 0.0625\n",
      "Epoch [5/50], Batch [161/313], Loss: 5.3429, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [171/313], Loss: 5.4435, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [181/313], Loss: 4.7436, Accuracy: 0.1562\n",
      "Epoch [5/50], Batch [191/313], Loss: 5.3823, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [201/313], Loss: 4.4769, Accuracy: 0.1562\n",
      "Epoch [5/50], Batch [211/313], Loss: 5.2456, Accuracy: 0.0625\n",
      "Epoch [5/50], Batch [221/313], Loss: 5.3391, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [231/313], Loss: 5.5426, Accuracy: 0.1562\n",
      "Epoch [5/50], Batch [241/313], Loss: 4.7776, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [251/313], Loss: 5.7119, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [261/313], Loss: 5.9201, Accuracy: 0.0625\n",
      "Epoch [5/50], Batch [271/313], Loss: 5.6589, Accuracy: 0.0625\n",
      "Epoch [5/50], Batch [281/313], Loss: 5.0585, Accuracy: 0.2188\n",
      "Epoch [5/50], Batch [291/313], Loss: 5.2273, Accuracy: 0.1250\n",
      "Epoch [5/50], Batch [301/313], Loss: 6.2731, Accuracy: 0.0938\n",
      "Epoch [5/50], Batch [311/313], Loss: 5.0233, Accuracy: 0.2188\n",
      "Finished epoch 5/50, Average Loss: 5.2956, Average Accuracy: 0.1135\n",
      "Epoch duration: 1226.94 seconds, Estimated time remaining: 920.20 minutes\n",
      "Starting epoch 6/50\n",
      "Epoch [6/50], Batch [1/313], Loss: 4.6902, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [11/313], Loss: 4.5142, Accuracy: 0.2188\n",
      "Epoch [6/50], Batch [21/313], Loss: 4.9043, Accuracy: 0.2188\n",
      "Epoch [6/50], Batch [31/313], Loss: 4.1850, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [41/313], Loss: 4.8035, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [51/313], Loss: 5.2326, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [61/313], Loss: 4.3619, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [71/313], Loss: 5.1529, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [81/313], Loss: 5.0626, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [91/313], Loss: 4.6318, Accuracy: 0.2500\n",
      "Epoch [6/50], Batch [101/313], Loss: 4.7679, Accuracy: 0.1875\n",
      "Epoch [6/50], Batch [111/313], Loss: 4.7009, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [121/313], Loss: 5.6181, Accuracy: 0.0625\n",
      "Epoch [6/50], Batch [131/313], Loss: 5.0079, Accuracy: 0.0938\n",
      "Epoch [6/50], Batch [141/313], Loss: 5.2493, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [151/313], Loss: 4.8718, Accuracy: 0.0625\n",
      "Epoch [6/50], Batch [161/313], Loss: 4.4072, Accuracy: 0.1875\n",
      "Epoch [6/50], Batch [171/313], Loss: 4.1109, Accuracy: 0.1875\n",
      "Epoch [6/50], Batch [181/313], Loss: 4.0631, Accuracy: 0.2812\n",
      "Epoch [6/50], Batch [191/313], Loss: 4.7464, Accuracy: 0.1875\n",
      "Epoch [6/50], Batch [201/313], Loss: 4.5399, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [211/313], Loss: 4.6629, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [221/313], Loss: 4.4345, Accuracy: 0.1875\n",
      "Epoch [6/50], Batch [231/313], Loss: 5.3149, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [241/313], Loss: 5.7005, Accuracy: 0.0938\n",
      "Epoch [6/50], Batch [251/313], Loss: 4.8906, Accuracy: 0.1250\n",
      "Epoch [6/50], Batch [261/313], Loss: 5.3322, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [271/313], Loss: 4.7060, Accuracy: 0.1562\n",
      "Epoch [6/50], Batch [281/313], Loss: 4.1374, Accuracy: 0.2500\n",
      "Epoch [6/50], Batch [291/313], Loss: 4.4446, Accuracy: 0.2188\n",
      "Epoch [6/50], Batch [301/313], Loss: 5.0431, Accuracy: 0.0938\n",
      "Epoch [6/50], Batch [311/313], Loss: 5.4829, Accuracy: 0.1562\n",
      "Finished epoch 6/50, Average Loss: 4.7918, Average Accuracy: 0.1408\n",
      "Epoch duration: 1223.95 seconds, Estimated time remaining: 897.56 minutes\n",
      "Starting epoch 7/50\n",
      "Epoch [7/50], Batch [1/313], Loss: 3.8218, Accuracy: 0.2812\n",
      "Epoch [7/50], Batch [11/313], Loss: 3.9250, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [21/313], Loss: 4.2231, Accuracy: 0.0625\n",
      "Epoch [7/50], Batch [31/313], Loss: 5.0113, Accuracy: 0.0938\n",
      "Epoch [7/50], Batch [41/313], Loss: 4.2383, Accuracy: 0.1875\n",
      "Epoch [7/50], Batch [51/313], Loss: 3.6394, Accuracy: 0.1875\n",
      "Epoch [7/50], Batch [61/313], Loss: 3.9699, Accuracy: 0.1250\n",
      "Epoch [7/50], Batch [71/313], Loss: 3.1271, Accuracy: 0.3125\n",
      "Epoch [7/50], Batch [81/313], Loss: 4.1430, Accuracy: 0.1250\n",
      "Epoch [7/50], Batch [91/313], Loss: 4.0935, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [101/313], Loss: 3.6955, Accuracy: 0.2188\n",
      "Epoch [7/50], Batch [111/313], Loss: 3.6332, Accuracy: 0.3438\n",
      "Epoch [7/50], Batch [121/313], Loss: 3.7605, Accuracy: 0.2500\n",
      "Epoch [7/50], Batch [131/313], Loss: 3.5558, Accuracy: 0.2500\n",
      "Epoch [7/50], Batch [141/313], Loss: 4.1279, Accuracy: 0.1875\n",
      "Epoch [7/50], Batch [151/313], Loss: 4.4110, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [161/313], Loss: 4.7369, Accuracy: 0.0938\n",
      "Epoch [7/50], Batch [171/313], Loss: 4.6819, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [181/313], Loss: 3.5865, Accuracy: 0.3125\n",
      "Epoch [7/50], Batch [191/313], Loss: 4.6801, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [201/313], Loss: 4.0291, Accuracy: 0.2812\n",
      "Epoch [7/50], Batch [211/313], Loss: 4.0583, Accuracy: 0.1875\n",
      "Epoch [7/50], Batch [221/313], Loss: 4.2171, Accuracy: 0.1250\n",
      "Epoch [7/50], Batch [231/313], Loss: 4.1173, Accuracy: 0.1250\n",
      "Epoch [7/50], Batch [241/313], Loss: 4.3600, Accuracy: 0.2500\n",
      "Epoch [7/50], Batch [251/313], Loss: 4.8560, Accuracy: 0.0625\n",
      "Epoch [7/50], Batch [261/313], Loss: 4.3004, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [271/313], Loss: 4.2840, Accuracy: 0.1875\n",
      "Epoch [7/50], Batch [281/313], Loss: 3.8684, Accuracy: 0.2188\n",
      "Epoch [7/50], Batch [291/313], Loss: 4.1518, Accuracy: 0.1250\n",
      "Epoch [7/50], Batch [301/313], Loss: 4.6152, Accuracy: 0.1562\n",
      "Epoch [7/50], Batch [311/313], Loss: 4.2848, Accuracy: 0.1562\n",
      "Finished epoch 7/50, Average Loss: 4.2344, Average Accuracy: 0.1717\n",
      "Epoch duration: 1226.40 seconds, Estimated time remaining: 878.92 minutes\n",
      "Starting epoch 8/50\n",
      "Epoch [8/50], Batch [1/313], Loss: 3.0219, Accuracy: 0.3125\n",
      "Epoch [8/50], Batch [11/313], Loss: 2.8257, Accuracy: 0.3750\n",
      "Epoch [8/50], Batch [21/313], Loss: 3.0763, Accuracy: 0.3750\n",
      "Epoch [8/50], Batch [31/313], Loss: 4.0233, Accuracy: 0.1562\n",
      "Epoch [8/50], Batch [41/313], Loss: 3.3990, Accuracy: 0.2500\n",
      "Epoch [8/50], Batch [51/313], Loss: 3.6169, Accuracy: 0.1562\n",
      "Epoch [8/50], Batch [61/313], Loss: 3.6480, Accuracy: 0.1250\n",
      "Epoch [8/50], Batch [71/313], Loss: 4.0970, Accuracy: 0.2188\n",
      "Epoch [8/50], Batch [81/313], Loss: 3.8081, Accuracy: 0.2500\n",
      "Epoch [8/50], Batch [91/313], Loss: 2.9361, Accuracy: 0.3438\n",
      "Epoch [8/50], Batch [101/313], Loss: 4.0355, Accuracy: 0.1875\n",
      "Epoch [8/50], Batch [111/313], Loss: 3.7146, Accuracy: 0.1250\n",
      "Epoch [8/50], Batch [121/313], Loss: 3.7317, Accuracy: 0.1875\n",
      "Epoch [8/50], Batch [131/313], Loss: 3.4557, Accuracy: 0.1250\n",
      "Epoch [8/50], Batch [141/313], Loss: 3.4058, Accuracy: 0.2500\n",
      "Epoch [8/50], Batch [151/313], Loss: 3.7040, Accuracy: 0.2188\n",
      "Epoch [8/50], Batch [161/313], Loss: 3.5080, Accuracy: 0.3125\n",
      "Epoch [8/50], Batch [171/313], Loss: 3.8399, Accuracy: 0.2188\n",
      "Epoch [8/50], Batch [181/313], Loss: 3.3415, Accuracy: 0.2500\n",
      "Epoch [8/50], Batch [191/313], Loss: 3.8791, Accuracy: 0.1562\n",
      "Epoch [8/50], Batch [201/313], Loss: 3.5344, Accuracy: 0.2812\n",
      "Epoch [8/50], Batch [211/313], Loss: 3.8825, Accuracy: 0.1250\n",
      "Epoch [8/50], Batch [221/313], Loss: 4.2517, Accuracy: 0.2188\n",
      "Epoch [8/50], Batch [231/313], Loss: 4.4303, Accuracy: 0.1562\n",
      "Epoch [8/50], Batch [241/313], Loss: 3.5001, Accuracy: 0.2188\n",
      "Epoch [8/50], Batch [251/313], Loss: 3.9008, Accuracy: 0.2812\n",
      "Epoch [8/50], Batch [261/313], Loss: 3.0548, Accuracy: 0.3125\n",
      "Epoch [8/50], Batch [271/313], Loss: 3.6905, Accuracy: 0.1875\n",
      "Epoch [8/50], Batch [281/313], Loss: 3.9803, Accuracy: 0.1875\n",
      "Epoch [8/50], Batch [291/313], Loss: 3.8057, Accuracy: 0.2812\n",
      "Epoch [8/50], Batch [301/313], Loss: 3.5125, Accuracy: 0.3125\n",
      "Epoch [8/50], Batch [311/313], Loss: 3.9634, Accuracy: 0.1250\n",
      "Finished epoch 8/50, Average Loss: 3.6642, Average Accuracy: 0.2175\n",
      "Epoch duration: 1229.85 seconds, Estimated time remaining: 860.89 minutes\n",
      "Starting epoch 9/50\n",
      "Epoch [9/50], Batch [1/313], Loss: 2.3546, Accuracy: 0.4688\n",
      "Epoch [9/50], Batch [11/313], Loss: 2.4362, Accuracy: 0.4062\n",
      "Epoch [9/50], Batch [21/313], Loss: 2.3942, Accuracy: 0.3125\n",
      "Epoch [9/50], Batch [31/313], Loss: 3.0406, Accuracy: 0.3125\n",
      "Epoch [9/50], Batch [41/313], Loss: 3.0102, Accuracy: 0.2188\n",
      "Epoch [9/50], Batch [51/313], Loss: 1.8621, Accuracy: 0.5938\n",
      "Epoch [9/50], Batch [61/313], Loss: 2.8495, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [71/313], Loss: 2.5058, Accuracy: 0.4375\n",
      "Epoch [9/50], Batch [81/313], Loss: 2.5499, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [91/313], Loss: 2.7670, Accuracy: 0.3438\n",
      "Epoch [9/50], Batch [101/313], Loss: 2.8933, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [111/313], Loss: 3.6093, Accuracy: 0.1562\n",
      "Epoch [9/50], Batch [121/313], Loss: 3.5886, Accuracy: 0.1875\n",
      "Epoch [9/50], Batch [131/313], Loss: 3.2577, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [141/313], Loss: 2.7257, Accuracy: 0.3438\n",
      "Epoch [9/50], Batch [151/313], Loss: 3.1560, Accuracy: 0.4375\n",
      "Epoch [9/50], Batch [161/313], Loss: 2.8623, Accuracy: 0.3125\n",
      "Epoch [9/50], Batch [171/313], Loss: 3.0310, Accuracy: 0.2188\n",
      "Epoch [9/50], Batch [181/313], Loss: 3.1156, Accuracy: 0.1875\n",
      "Epoch [9/50], Batch [191/313], Loss: 2.7077, Accuracy: 0.3438\n",
      "Epoch [9/50], Batch [201/313], Loss: 3.4425, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [211/313], Loss: 3.0743, Accuracy: 0.2500\n",
      "Epoch [9/50], Batch [221/313], Loss: 3.4168, Accuracy: 0.3125\n",
      "Epoch [9/50], Batch [231/313], Loss: 3.0309, Accuracy: 0.2500\n",
      "Epoch [9/50], Batch [241/313], Loss: 3.6296, Accuracy: 0.2500\n",
      "Epoch [9/50], Batch [251/313], Loss: 3.7548, Accuracy: 0.1875\n",
      "Epoch [9/50], Batch [261/313], Loss: 3.4153, Accuracy: 0.1875\n",
      "Epoch [9/50], Batch [271/313], Loss: 3.5168, Accuracy: 0.1875\n",
      "Epoch [9/50], Batch [281/313], Loss: 3.0573, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [291/313], Loss: 3.5005, Accuracy: 0.2812\n",
      "Epoch [9/50], Batch [301/313], Loss: 3.7086, Accuracy: 0.2188\n",
      "Epoch [9/50], Batch [311/313], Loss: 3.3074, Accuracy: 0.3125\n",
      "Finished epoch 9/50, Average Loss: 3.0623, Average Accuracy: 0.2889\n",
      "Epoch duration: 1229.37 seconds, Estimated time remaining: 840.07 minutes\n",
      "Starting epoch 10/50\n",
      "Epoch [10/50], Batch [1/313], Loss: 2.0320, Accuracy: 0.5000\n",
      "Epoch [10/50], Batch [11/313], Loss: 2.3530, Accuracy: 0.4375\n",
      "Epoch [10/50], Batch [21/313], Loss: 1.5320, Accuracy: 0.5312\n",
      "Epoch [10/50], Batch [31/313], Loss: 2.5242, Accuracy: 0.3438\n",
      "Epoch [10/50], Batch [41/313], Loss: 1.8576, Accuracy: 0.5625\n",
      "Epoch [10/50], Batch [51/313], Loss: 1.9297, Accuracy: 0.4688\n",
      "Epoch [10/50], Batch [61/313], Loss: 2.2805, Accuracy: 0.4375\n",
      "Epoch [10/50], Batch [71/313], Loss: 2.2295, Accuracy: 0.4375\n",
      "Epoch [10/50], Batch [81/313], Loss: 2.4159, Accuracy: 0.3750\n",
      "Epoch [10/50], Batch [91/313], Loss: 2.3623, Accuracy: 0.3750\n",
      "Epoch [10/50], Batch [101/313], Loss: 2.8000, Accuracy: 0.3125\n",
      "Epoch [10/50], Batch [111/313], Loss: 2.5107, Accuracy: 0.3750\n",
      "Epoch [10/50], Batch [121/313], Loss: 2.3854, Accuracy: 0.4688\n",
      "Epoch [10/50], Batch [131/313], Loss: 2.1537, Accuracy: 0.4688\n",
      "Epoch [10/50], Batch [141/313], Loss: 2.8052, Accuracy: 0.2500\n",
      "Epoch [10/50], Batch [151/313], Loss: 2.5530, Accuracy: 0.3438\n",
      "Epoch [10/50], Batch [161/313], Loss: 2.8282, Accuracy: 0.2500\n",
      "Epoch [10/50], Batch [171/313], Loss: 2.5290, Accuracy: 0.3750\n",
      "Epoch [10/50], Batch [181/313], Loss: 2.0441, Accuracy: 0.4375\n",
      "Epoch [10/50], Batch [191/313], Loss: 2.8174, Accuracy: 0.3438\n",
      "Epoch [10/50], Batch [201/313], Loss: 3.1814, Accuracy: 0.2500\n",
      "Epoch [10/50], Batch [211/313], Loss: 2.3508, Accuracy: 0.4062\n",
      "Epoch [10/50], Batch [221/313], Loss: 2.6187, Accuracy: 0.3438\n",
      "Epoch [10/50], Batch [231/313], Loss: 2.5914, Accuracy: 0.4062\n",
      "Epoch [10/50], Batch [241/313], Loss: 3.2671, Accuracy: 0.2812\n",
      "Epoch [10/50], Batch [251/313], Loss: 2.8057, Accuracy: 0.1250\n",
      "Epoch [10/50], Batch [261/313], Loss: 2.6163, Accuracy: 0.3125\n",
      "Epoch [10/50], Batch [271/313], Loss: 2.4545, Accuracy: 0.4375\n",
      "Epoch [10/50], Batch [281/313], Loss: 2.7029, Accuracy: 0.3125\n",
      "Epoch [10/50], Batch [291/313], Loss: 3.0343, Accuracy: 0.3125\n",
      "Epoch [10/50], Batch [301/313], Loss: 3.0703, Accuracy: 0.2500\n",
      "Epoch [10/50], Batch [311/313], Loss: 3.1355, Accuracy: 0.2188\n",
      "Finished epoch 10/50, Average Loss: 2.5129, Average Accuracy: 0.3779\n",
      "Epoch duration: 1251.73 seconds, Estimated time remaining: 834.49 minutes\n",
      "Starting epoch 11/50\n",
      "Epoch [11/50], Batch [1/313], Loss: 1.4235, Accuracy: 0.7188\n",
      "Epoch [11/50], Batch [11/313], Loss: 1.5167, Accuracy: 0.5938\n",
      "Epoch [11/50], Batch [21/313], Loss: 1.2449, Accuracy: 0.6875\n",
      "Epoch [11/50], Batch [31/313], Loss: 1.7647, Accuracy: 0.5312\n",
      "Epoch [11/50], Batch [41/313], Loss: 2.0328, Accuracy: 0.4688\n",
      "Epoch [11/50], Batch [51/313], Loss: 1.7824, Accuracy: 0.5625\n",
      "Epoch [11/50], Batch [61/313], Loss: 2.0418, Accuracy: 0.5000\n",
      "Epoch [11/50], Batch [71/313], Loss: 1.8987, Accuracy: 0.4375\n",
      "Epoch [11/50], Batch [81/313], Loss: 1.6875, Accuracy: 0.5000\n",
      "Epoch [11/50], Batch [91/313], Loss: 2.2775, Accuracy: 0.4688\n",
      "Epoch [11/50], Batch [101/313], Loss: 1.0974, Accuracy: 0.7188\n",
      "Epoch [11/50], Batch [111/313], Loss: 1.9112, Accuracy: 0.5625\n",
      "Epoch [11/50], Batch [121/313], Loss: 1.7987, Accuracy: 0.5000\n",
      "Epoch [11/50], Batch [131/313], Loss: 1.6833, Accuracy: 0.4375\n",
      "Epoch [11/50], Batch [141/313], Loss: 2.1136, Accuracy: 0.5312\n",
      "Epoch [11/50], Batch [151/313], Loss: 2.3086, Accuracy: 0.4062\n",
      "Epoch [11/50], Batch [161/313], Loss: 2.1967, Accuracy: 0.5312\n",
      "Epoch [11/50], Batch [171/313], Loss: 2.0972, Accuracy: 0.3750\n",
      "Epoch [11/50], Batch [181/313], Loss: 1.9126, Accuracy: 0.5312\n",
      "Epoch [11/50], Batch [191/313], Loss: 2.2784, Accuracy: 0.4375\n",
      "Epoch [11/50], Batch [201/313], Loss: 1.4286, Accuracy: 0.6250\n",
      "Epoch [11/50], Batch [211/313], Loss: 1.8087, Accuracy: 0.5000\n",
      "Epoch [11/50], Batch [221/313], Loss: 1.9844, Accuracy: 0.4688\n",
      "Epoch [11/50], Batch [231/313], Loss: 2.1355, Accuracy: 0.4375\n",
      "Epoch [11/50], Batch [241/313], Loss: 2.1832, Accuracy: 0.5000\n",
      "Epoch [11/50], Batch [251/313], Loss: 2.0525, Accuracy: 0.5625\n",
      "Epoch [11/50], Batch [261/313], Loss: 2.5384, Accuracy: 0.3125\n",
      "Epoch [11/50], Batch [271/313], Loss: 2.3740, Accuracy: 0.4688\n",
      "Epoch [11/50], Batch [281/313], Loss: 2.9825, Accuracy: 0.4062\n",
      "Epoch [11/50], Batch [291/313], Loss: 2.8297, Accuracy: 0.4062\n",
      "Epoch [11/50], Batch [301/313], Loss: 2.5473, Accuracy: 0.3125\n",
      "Epoch [11/50], Batch [311/313], Loss: 2.5004, Accuracy: 0.3125\n",
      "Finished epoch 11/50, Average Loss: 2.0100, Average Accuracy: 0.4802\n",
      "Epoch duration: 1233.01 seconds, Estimated time remaining: 801.46 minutes\n",
      "Starting epoch 12/50\n",
      "Epoch [12/50], Batch [1/313], Loss: 1.3061, Accuracy: 0.6250\n",
      "Epoch [12/50], Batch [11/313], Loss: 0.8692, Accuracy: 0.7812\n",
      "Epoch [12/50], Batch [21/313], Loss: 1.2328, Accuracy: 0.6250\n",
      "Epoch [12/50], Batch [31/313], Loss: 1.6135, Accuracy: 0.5938\n",
      "Epoch [12/50], Batch [41/313], Loss: 1.7499, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [51/313], Loss: 1.1837, Accuracy: 0.6562\n",
      "Epoch [12/50], Batch [61/313], Loss: 1.1355, Accuracy: 0.6875\n",
      "Epoch [12/50], Batch [71/313], Loss: 2.0016, Accuracy: 0.5000\n",
      "Epoch [12/50], Batch [81/313], Loss: 1.2058, Accuracy: 0.6562\n",
      "Epoch [12/50], Batch [91/313], Loss: 1.4674, Accuracy: 0.5625\n",
      "Epoch [12/50], Batch [101/313], Loss: 1.3520, Accuracy: 0.6250\n",
      "Epoch [12/50], Batch [111/313], Loss: 1.6816, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [121/313], Loss: 1.8574, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [131/313], Loss: 1.2515, Accuracy: 0.6562\n",
      "Epoch [12/50], Batch [141/313], Loss: 1.5836, Accuracy: 0.5625\n",
      "Epoch [12/50], Batch [151/313], Loss: 1.4248, Accuracy: 0.6875\n",
      "Epoch [12/50], Batch [161/313], Loss: 1.6915, Accuracy: 0.5625\n",
      "Epoch [12/50], Batch [171/313], Loss: 2.2961, Accuracy: 0.4062\n",
      "Epoch [12/50], Batch [181/313], Loss: 1.3650, Accuracy: 0.6875\n",
      "Epoch [12/50], Batch [191/313], Loss: 1.8080, Accuracy: 0.4375\n",
      "Epoch [12/50], Batch [201/313], Loss: 1.9785, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [211/313], Loss: 1.8897, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [221/313], Loss: 1.2053, Accuracy: 0.5625\n",
      "Epoch [12/50], Batch [231/313], Loss: 2.2634, Accuracy: 0.4375\n",
      "Epoch [12/50], Batch [241/313], Loss: 1.8553, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [251/313], Loss: 1.7910, Accuracy: 0.5938\n",
      "Epoch [12/50], Batch [261/313], Loss: 1.6432, Accuracy: 0.6562\n",
      "Epoch [12/50], Batch [271/313], Loss: 0.7881, Accuracy: 0.7812\n",
      "Epoch [12/50], Batch [281/313], Loss: 1.8295, Accuracy: 0.5625\n",
      "Epoch [12/50], Batch [291/313], Loss: 1.9517, Accuracy: 0.5312\n",
      "Epoch [12/50], Batch [301/313], Loss: 1.9875, Accuracy: 0.4375\n",
      "Epoch [12/50], Batch [311/313], Loss: 1.7487, Accuracy: 0.5312\n",
      "Finished epoch 12/50, Average Loss: 1.5914, Average Accuracy: 0.5806\n",
      "Epoch duration: 1233.71 seconds, Estimated time remaining: 781.35 minutes\n",
      "Starting epoch 13/50\n",
      "Epoch [13/50], Batch [1/313], Loss: 0.8838, Accuracy: 0.7500\n",
      "Epoch [13/50], Batch [11/313], Loss: 1.0967, Accuracy: 0.7188\n",
      "Epoch [13/50], Batch [21/313], Loss: 0.8567, Accuracy: 0.7812\n",
      "Epoch [13/50], Batch [31/313], Loss: 1.1904, Accuracy: 0.7812\n",
      "Epoch [13/50], Batch [41/313], Loss: 0.8006, Accuracy: 0.7188\n",
      "Epoch [13/50], Batch [51/313], Loss: 1.0628, Accuracy: 0.7500\n",
      "Epoch [13/50], Batch [61/313], Loss: 0.5104, Accuracy: 0.8125\n",
      "Epoch [13/50], Batch [71/313], Loss: 0.6386, Accuracy: 0.7500\n",
      "Epoch [13/50], Batch [81/313], Loss: 1.1738, Accuracy: 0.7188\n",
      "Epoch [13/50], Batch [91/313], Loss: 1.3436, Accuracy: 0.6250\n",
      "Epoch [13/50], Batch [101/313], Loss: 1.3817, Accuracy: 0.6562\n",
      "Epoch [13/50], Batch [111/313], Loss: 0.8525, Accuracy: 0.7500\n",
      "Epoch [13/50], Batch [121/313], Loss: 1.1556, Accuracy: 0.7188\n",
      "Epoch [13/50], Batch [131/313], Loss: 1.1058, Accuracy: 0.7500\n",
      "Epoch [13/50], Batch [141/313], Loss: 1.5203, Accuracy: 0.5938\n",
      "Epoch [13/50], Batch [151/313], Loss: 2.0074, Accuracy: 0.5312\n",
      "Epoch [13/50], Batch [161/313], Loss: 0.9608, Accuracy: 0.8125\n",
      "Epoch [13/50], Batch [171/313], Loss: 1.0925, Accuracy: 0.7188\n",
      "Epoch [13/50], Batch [181/313], Loss: 1.4628, Accuracy: 0.6875\n",
      "Epoch [13/50], Batch [191/313], Loss: 1.2888, Accuracy: 0.6562\n",
      "Epoch [13/50], Batch [201/313], Loss: 1.5892, Accuracy: 0.5938\n",
      "Epoch [13/50], Batch [211/313], Loss: 0.9120, Accuracy: 0.7812\n",
      "Epoch [13/50], Batch [221/313], Loss: 1.3172, Accuracy: 0.6562\n",
      "Epoch [13/50], Batch [231/313], Loss: 1.5848, Accuracy: 0.5312\n",
      "Epoch [13/50], Batch [241/313], Loss: 1.3163, Accuracy: 0.6875\n",
      "Epoch [13/50], Batch [251/313], Loss: 0.8353, Accuracy: 0.8125\n",
      "Epoch [13/50], Batch [261/313], Loss: 1.4896, Accuracy: 0.6250\n",
      "Epoch [13/50], Batch [271/313], Loss: 1.3791, Accuracy: 0.5312\n",
      "Epoch [13/50], Batch [281/313], Loss: 2.0293, Accuracy: 0.4688\n",
      "Epoch [13/50], Batch [291/313], Loss: 1.4086, Accuracy: 0.6875\n",
      "Epoch [13/50], Batch [301/313], Loss: 1.5839, Accuracy: 0.5625\n",
      "Epoch [13/50], Batch [311/313], Loss: 1.3711, Accuracy: 0.6250\n",
      "Finished epoch 13/50, Average Loss: 1.2837, Average Accuracy: 0.6618\n",
      "Epoch duration: 1228.80 seconds, Estimated time remaining: 757.76 minutes\n",
      "Starting epoch 14/50\n",
      "Epoch [14/50], Batch [1/313], Loss: 0.9425, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [11/313], Loss: 0.9740, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [21/313], Loss: 1.4648, Accuracy: 0.5625\n",
      "Epoch [14/50], Batch [31/313], Loss: 1.0314, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [41/313], Loss: 0.5958, Accuracy: 0.8125\n",
      "Epoch [14/50], Batch [51/313], Loss: 1.1039, Accuracy: 0.6875\n",
      "Epoch [14/50], Batch [61/313], Loss: 0.8385, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [71/313], Loss: 0.9128, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [81/313], Loss: 0.9274, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [91/313], Loss: 1.2855, Accuracy: 0.6562\n",
      "Epoch [14/50], Batch [101/313], Loss: 1.2415, Accuracy: 0.6250\n",
      "Epoch [14/50], Batch [111/313], Loss: 0.8390, Accuracy: 0.8125\n",
      "Epoch [14/50], Batch [121/313], Loss: 0.8819, Accuracy: 0.6875\n",
      "Epoch [14/50], Batch [131/313], Loss: 1.0888, Accuracy: 0.6875\n",
      "Epoch [14/50], Batch [141/313], Loss: 1.4512, Accuracy: 0.6875\n",
      "Epoch [14/50], Batch [151/313], Loss: 0.5804, Accuracy: 0.8438\n",
      "Epoch [14/50], Batch [161/313], Loss: 0.9686, Accuracy: 0.7188\n",
      "Epoch [14/50], Batch [171/313], Loss: 0.7082, Accuracy: 0.7812\n",
      "Epoch [14/50], Batch [181/313], Loss: 0.9026, Accuracy: 0.8438\n",
      "Epoch [14/50], Batch [191/313], Loss: 1.0045, Accuracy: 0.7188\n",
      "Epoch [14/50], Batch [201/313], Loss: 1.0249, Accuracy: 0.6875\n",
      "Epoch [14/50], Batch [211/313], Loss: 0.6434, Accuracy: 0.8125\n",
      "Epoch [14/50], Batch [221/313], Loss: 1.1269, Accuracy: 0.6250\n",
      "Epoch [14/50], Batch [231/313], Loss: 1.1642, Accuracy: 0.6562\n",
      "Epoch [14/50], Batch [241/313], Loss: 0.6700, Accuracy: 0.8125\n",
      "Epoch [14/50], Batch [251/313], Loss: 1.0878, Accuracy: 0.7188\n",
      "Epoch [14/50], Batch [261/313], Loss: 1.1805, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [271/313], Loss: 1.1105, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [281/313], Loss: 1.2257, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [291/313], Loss: 1.2216, Accuracy: 0.7500\n",
      "Epoch [14/50], Batch [301/313], Loss: 0.7799, Accuracy: 0.7188\n",
      "Epoch [14/50], Batch [311/313], Loss: 1.2407, Accuracy: 0.5938\n",
      "Finished epoch 14/50, Average Loss: 1.1057, Average Accuracy: 0.7035\n",
      "Epoch duration: 1228.42 seconds, Estimated time remaining: 737.05 minutes\n",
      "Starting epoch 15/50\n",
      "Epoch [15/50], Batch [1/313], Loss: 0.4331, Accuracy: 0.8750\n",
      "Epoch [15/50], Batch [11/313], Loss: 0.3320, Accuracy: 0.9375\n",
      "Epoch [15/50], Batch [21/313], Loss: 0.4683, Accuracy: 0.8438\n",
      "Epoch [15/50], Batch [31/313], Loss: 0.5944, Accuracy: 0.8438\n",
      "Epoch [15/50], Batch [41/313], Loss: 0.6325, Accuracy: 0.8438\n",
      "Epoch [15/50], Batch [51/313], Loss: 0.6566, Accuracy: 0.8438\n",
      "Epoch [15/50], Batch [61/313], Loss: 0.9935, Accuracy: 0.6562\n",
      "Epoch [15/50], Batch [71/313], Loss: 0.9761, Accuracy: 0.7500\n",
      "Epoch [15/50], Batch [81/313], Loss: 1.1024, Accuracy: 0.6250\n",
      "Epoch [15/50], Batch [91/313], Loss: 0.6960, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [101/313], Loss: 0.9170, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [111/313], Loss: 0.8585, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [121/313], Loss: 0.6889, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [131/313], Loss: 0.5389, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [141/313], Loss: 1.0926, Accuracy: 0.7188\n",
      "Epoch [15/50], Batch [151/313], Loss: 0.3486, Accuracy: 0.9375\n",
      "Epoch [15/50], Batch [161/313], Loss: 0.6541, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [171/313], Loss: 0.5928, Accuracy: 0.7812\n",
      "Epoch [15/50], Batch [181/313], Loss: 0.9328, Accuracy: 0.7812\n",
      "Epoch [15/50], Batch [191/313], Loss: 0.8023, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [201/313], Loss: 1.6056, Accuracy: 0.5625\n",
      "Epoch [15/50], Batch [211/313], Loss: 1.5535, Accuracy: 0.5938\n",
      "Epoch [15/50], Batch [221/313], Loss: 0.8270, Accuracy: 0.8125\n",
      "Epoch [15/50], Batch [231/313], Loss: 1.2207, Accuracy: 0.7500\n",
      "Epoch [15/50], Batch [241/313], Loss: 0.8710, Accuracy: 0.7188\n",
      "Epoch [15/50], Batch [251/313], Loss: 1.2982, Accuracy: 0.6875\n",
      "Epoch [15/50], Batch [261/313], Loss: 0.7671, Accuracy: 0.7812\n",
      "Epoch [15/50], Batch [271/313], Loss: 0.8708, Accuracy: 0.7500\n",
      "Epoch [15/50], Batch [281/313], Loss: 0.6741, Accuracy: 0.8438\n",
      "Epoch [15/50], Batch [291/313], Loss: 0.9864, Accuracy: 0.6875\n",
      "Epoch [15/50], Batch [301/313], Loss: 1.3290, Accuracy: 0.6250\n",
      "Epoch [15/50], Batch [311/313], Loss: 0.9806, Accuracy: 0.7812\n",
      "Finished epoch 15/50, Average Loss: 0.9524, Average Accuracy: 0.7389\n",
      "Epoch duration: 1230.17 seconds, Estimated time remaining: 717.60 minutes\n",
      "Starting epoch 16/50\n",
      "Epoch [16/50], Batch [1/313], Loss: 0.6874, Accuracy: 0.7188\n",
      "Epoch [16/50], Batch [11/313], Loss: 0.8405, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [21/313], Loss: 1.3651, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [31/313], Loss: 1.0347, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [41/313], Loss: 0.5776, Accuracy: 0.8750\n",
      "Epoch [16/50], Batch [51/313], Loss: 0.5901, Accuracy: 0.9062\n",
      "Epoch [16/50], Batch [61/313], Loss: 0.4925, Accuracy: 0.9375\n",
      "Epoch [16/50], Batch [71/313], Loss: 0.4944, Accuracy: 0.8438\n",
      "Epoch [16/50], Batch [81/313], Loss: 0.9869, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [91/313], Loss: 0.7651, Accuracy: 0.7500\n",
      "Epoch [16/50], Batch [101/313], Loss: 0.6711, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [111/313], Loss: 0.8565, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [121/313], Loss: 0.6094, Accuracy: 0.8438\n",
      "Epoch [16/50], Batch [131/313], Loss: 1.1324, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [141/313], Loss: 0.8645, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [151/313], Loss: 0.4105, Accuracy: 0.8750\n",
      "Epoch [16/50], Batch [161/313], Loss: 1.1073, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [171/313], Loss: 0.5270, Accuracy: 0.8438\n",
      "Epoch [16/50], Batch [181/313], Loss: 0.6935, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [191/313], Loss: 0.6176, Accuracy: 0.9062\n",
      "Epoch [16/50], Batch [201/313], Loss: 0.6432, Accuracy: 0.8750\n",
      "Epoch [16/50], Batch [211/313], Loss: 1.1113, Accuracy: 0.6875\n",
      "Epoch [16/50], Batch [221/313], Loss: 1.0697, Accuracy: 0.7188\n",
      "Epoch [16/50], Batch [231/313], Loss: 0.7465, Accuracy: 0.7500\n",
      "Epoch [16/50], Batch [241/313], Loss: 0.8488, Accuracy: 0.7188\n",
      "Epoch [16/50], Batch [251/313], Loss: 1.0856, Accuracy: 0.7188\n",
      "Epoch [16/50], Batch [261/313], Loss: 0.7099, Accuracy: 0.8438\n",
      "Epoch [16/50], Batch [271/313], Loss: 0.7599, Accuracy: 0.7500\n",
      "Epoch [16/50], Batch [281/313], Loss: 0.6959, Accuracy: 0.8438\n",
      "Epoch [16/50], Batch [291/313], Loss: 0.6445, Accuracy: 0.7812\n",
      "Epoch [16/50], Batch [301/313], Loss: 1.2738, Accuracy: 0.6250\n",
      "Epoch [16/50], Batch [311/313], Loss: 1.0838, Accuracy: 0.6875\n",
      "Finished epoch 16/50, Average Loss: 0.8570, Average Accuracy: 0.7560\n",
      "Epoch duration: 1233.54 seconds, Estimated time remaining: 699.01 minutes\n",
      "Starting epoch 17/50\n",
      "Epoch [17/50], Batch [1/313], Loss: 0.8832, Accuracy: 0.6875\n",
      "Epoch [17/50], Batch [11/313], Loss: 0.6052, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [21/313], Loss: 0.6938, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [31/313], Loss: 0.6428, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [41/313], Loss: 0.7265, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [51/313], Loss: 0.6860, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [61/313], Loss: 0.8067, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [71/313], Loss: 0.8181, Accuracy: 0.7812\n",
      "Epoch [17/50], Batch [81/313], Loss: 0.6069, Accuracy: 0.8438\n",
      "Epoch [17/50], Batch [91/313], Loss: 0.9909, Accuracy: 0.7188\n",
      "Epoch [17/50], Batch [101/313], Loss: 1.2235, Accuracy: 0.6562\n",
      "Epoch [17/50], Batch [111/313], Loss: 0.3223, Accuracy: 0.8750\n",
      "Epoch [17/50], Batch [121/313], Loss: 0.5930, Accuracy: 0.8750\n",
      "Epoch [17/50], Batch [131/313], Loss: 0.5217, Accuracy: 0.7500\n",
      "Epoch [17/50], Batch [141/313], Loss: 1.0341, Accuracy: 0.6875\n",
      "Epoch [17/50], Batch [151/313], Loss: 0.4848, Accuracy: 0.7812\n",
      "Epoch [17/50], Batch [161/313], Loss: 0.7640, Accuracy: 0.7500\n",
      "Epoch [17/50], Batch [171/313], Loss: 0.5135, Accuracy: 0.9062\n",
      "Epoch [17/50], Batch [181/313], Loss: 0.8722, Accuracy: 0.7500\n",
      "Epoch [17/50], Batch [191/313], Loss: 0.6498, Accuracy: 0.7812\n",
      "Epoch [17/50], Batch [201/313], Loss: 1.0751, Accuracy: 0.7188\n",
      "Epoch [17/50], Batch [211/313], Loss: 0.8312, Accuracy: 0.6875\n",
      "Epoch [17/50], Batch [221/313], Loss: 1.0139, Accuracy: 0.7500\n",
      "Epoch [17/50], Batch [231/313], Loss: 0.5442, Accuracy: 0.8125\n",
      "Epoch [17/50], Batch [241/313], Loss: 0.6484, Accuracy: 0.7812\n",
      "Epoch [17/50], Batch [251/313], Loss: 0.9641, Accuracy: 0.7500\n",
      "Epoch [17/50], Batch [261/313], Loss: 1.1255, Accuracy: 0.6875\n",
      "Epoch [17/50], Batch [271/313], Loss: 0.9453, Accuracy: 0.7188\n",
      "Epoch [17/50], Batch [281/313], Loss: 0.9815, Accuracy: 0.6875\n",
      "Epoch [17/50], Batch [291/313], Loss: 1.1279, Accuracy: 0.5625\n",
      "Epoch [17/50], Batch [301/313], Loss: 1.8765, Accuracy: 0.5000\n",
      "Epoch [17/50], Batch [311/313], Loss: 0.9847, Accuracy: 0.7188\n",
      "Finished epoch 17/50, Average Loss: 0.7998, Average Accuracy: 0.7668\n",
      "Epoch duration: 1230.41 seconds, Estimated time remaining: 676.72 minutes\n",
      "Starting epoch 18/50\n",
      "Epoch [18/50], Batch [1/313], Loss: 0.6697, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [11/313], Loss: 0.4949, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [21/313], Loss: 0.9092, Accuracy: 0.6875\n",
      "Epoch [18/50], Batch [31/313], Loss: 0.5948, Accuracy: 0.8750\n",
      "Epoch [18/50], Batch [41/313], Loss: 0.8501, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [51/313], Loss: 0.5789, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [61/313], Loss: 0.4925, Accuracy: 0.8750\n",
      "Epoch [18/50], Batch [71/313], Loss: 0.4824, Accuracy: 0.8125\n",
      "Epoch [18/50], Batch [81/313], Loss: 0.5245, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [91/313], Loss: 0.6264, Accuracy: 0.8125\n",
      "Epoch [18/50], Batch [101/313], Loss: 0.7920, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [111/313], Loss: 0.6594, Accuracy: 0.7188\n",
      "Epoch [18/50], Batch [121/313], Loss: 0.9744, Accuracy: 0.6875\n",
      "Epoch [18/50], Batch [131/313], Loss: 0.6135, Accuracy: 0.8750\n",
      "Epoch [18/50], Batch [141/313], Loss: 0.7120, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [151/313], Loss: 1.1795, Accuracy: 0.6250\n",
      "Epoch [18/50], Batch [161/313], Loss: 0.6922, Accuracy: 0.8125\n",
      "Epoch [18/50], Batch [171/313], Loss: 0.8855, Accuracy: 0.7500\n",
      "Epoch [18/50], Batch [181/313], Loss: 0.8003, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [191/313], Loss: 0.5936, Accuracy: 0.8125\n",
      "Epoch [18/50], Batch [201/313], Loss: 0.6293, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [211/313], Loss: 0.5362, Accuracy: 0.8750\n",
      "Epoch [18/50], Batch [221/313], Loss: 0.8214, Accuracy: 0.7188\n",
      "Epoch [18/50], Batch [231/313], Loss: 0.7240, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [241/313], Loss: 0.7379, Accuracy: 0.7812\n",
      "Epoch [18/50], Batch [251/313], Loss: 0.6083, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [261/313], Loss: 0.7673, Accuracy: 0.7500\n",
      "Epoch [18/50], Batch [271/313], Loss: 0.7859, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [281/313], Loss: 1.2665, Accuracy: 0.7188\n",
      "Epoch [18/50], Batch [291/313], Loss: 0.6423, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [301/313], Loss: 0.7180, Accuracy: 0.8438\n",
      "Epoch [18/50], Batch [311/313], Loss: 0.4229, Accuracy: 0.9375\n",
      "Finished epoch 18/50, Average Loss: 0.7471, Average Accuracy: 0.7875\n",
      "Epoch duration: 1231.97 seconds, Estimated time remaining: 657.05 minutes\n",
      "Starting epoch 19/50\n",
      "Epoch [19/50], Batch [1/313], Loss: 0.5332, Accuracy: 0.8750\n",
      "Epoch [19/50], Batch [11/313], Loss: 0.3086, Accuracy: 0.8750\n",
      "Epoch [19/50], Batch [21/313], Loss: 0.5515, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [31/313], Loss: 0.3920, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [41/313], Loss: 0.4562, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [51/313], Loss: 0.3242, Accuracy: 0.9375\n",
      "Epoch [19/50], Batch [61/313], Loss: 0.5798, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [71/313], Loss: 0.7940, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [81/313], Loss: 0.3248, Accuracy: 0.8750\n",
      "Epoch [19/50], Batch [91/313], Loss: 0.8864, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [101/313], Loss: 1.2313, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [111/313], Loss: 0.6701, Accuracy: 0.7812\n",
      "Epoch [19/50], Batch [121/313], Loss: 0.6332, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [131/313], Loss: 0.5269, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [141/313], Loss: 0.4962, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [151/313], Loss: 0.5305, Accuracy: 0.7500\n",
      "Epoch [19/50], Batch [161/313], Loss: 0.5358, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [171/313], Loss: 0.7759, Accuracy: 0.7812\n",
      "Epoch [19/50], Batch [181/313], Loss: 0.6262, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [191/313], Loss: 0.6046, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [201/313], Loss: 0.7018, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [211/313], Loss: 0.7438, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [221/313], Loss: 1.0847, Accuracy: 0.6562\n",
      "Epoch [19/50], Batch [231/313], Loss: 0.7054, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [241/313], Loss: 0.5752, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [251/313], Loss: 1.2793, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [261/313], Loss: 0.5931, Accuracy: 0.7812\n",
      "Epoch [19/50], Batch [271/313], Loss: 1.0097, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [281/313], Loss: 1.0750, Accuracy: 0.7188\n",
      "Epoch [19/50], Batch [291/313], Loss: 0.6066, Accuracy: 0.8438\n",
      "Epoch [19/50], Batch [301/313], Loss: 0.7781, Accuracy: 0.8125\n",
      "Epoch [19/50], Batch [311/313], Loss: 0.9530, Accuracy: 0.6875\n",
      "Finished epoch 19/50, Average Loss: 0.7050, Average Accuracy: 0.7948\n",
      "Epoch duration: 1233.32 seconds, Estimated time remaining: 637.22 minutes\n",
      "Starting epoch 20/50\n",
      "Epoch [20/50], Batch [1/313], Loss: 0.6065, Accuracy: 0.7812\n",
      "Epoch [20/50], Batch [11/313], Loss: 0.5242, Accuracy: 0.7812\n",
      "Epoch [20/50], Batch [21/313], Loss: 0.3470, Accuracy: 0.9062\n",
      "Epoch [20/50], Batch [31/313], Loss: 0.2708, Accuracy: 0.8750\n",
      "Epoch [20/50], Batch [41/313], Loss: 0.8210, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [51/313], Loss: 0.5440, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [61/313], Loss: 0.2961, Accuracy: 0.9375\n",
      "Epoch [20/50], Batch [71/313], Loss: 0.4491, Accuracy: 0.8750\n",
      "Epoch [20/50], Batch [81/313], Loss: 0.4339, Accuracy: 0.8750\n",
      "Epoch [20/50], Batch [91/313], Loss: 0.9871, Accuracy: 0.7188\n",
      "Epoch [20/50], Batch [101/313], Loss: 0.3768, Accuracy: 0.9062\n",
      "Epoch [20/50], Batch [111/313], Loss: 0.4466, Accuracy: 0.9062\n",
      "Epoch [20/50], Batch [121/313], Loss: 0.7217, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [131/313], Loss: 0.6010, Accuracy: 0.8438\n",
      "Epoch [20/50], Batch [141/313], Loss: 0.5940, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [151/313], Loss: 0.5955, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [161/313], Loss: 0.5987, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [171/313], Loss: 0.6889, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [181/313], Loss: 0.4708, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [191/313], Loss: 0.6809, Accuracy: 0.7812\n",
      "Epoch [20/50], Batch [201/313], Loss: 0.6792, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [211/313], Loss: 0.6127, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [221/313], Loss: 1.0346, Accuracy: 0.6875\n",
      "Epoch [20/50], Batch [231/313], Loss: 0.7092, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [241/313], Loss: 0.6527, Accuracy: 0.8438\n",
      "Epoch [20/50], Batch [251/313], Loss: 0.8033, Accuracy: 0.7188\n",
      "Epoch [20/50], Batch [261/313], Loss: 0.3143, Accuracy: 0.9062\n",
      "Epoch [20/50], Batch [271/313], Loss: 0.9813, Accuracy: 0.6875\n",
      "Epoch [20/50], Batch [281/313], Loss: 0.4386, Accuracy: 0.8750\n",
      "Epoch [20/50], Batch [291/313], Loss: 0.8570, Accuracy: 0.7500\n",
      "Epoch [20/50], Batch [301/313], Loss: 0.7789, Accuracy: 0.8125\n",
      "Epoch [20/50], Batch [311/313], Loss: 1.0353, Accuracy: 0.6875\n",
      "Finished epoch 20/50, Average Loss: 0.6617, Average Accuracy: 0.8061\n",
      "Epoch duration: 1233.32 seconds, Estimated time remaining: 616.66 minutes\n",
      "Starting epoch 21/50\n",
      "Epoch [21/50], Batch [1/313], Loss: 0.6554, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [11/313], Loss: 0.4086, Accuracy: 0.9062\n",
      "Epoch [21/50], Batch [21/313], Loss: 0.7252, Accuracy: 0.7500\n",
      "Epoch [21/50], Batch [31/313], Loss: 0.1576, Accuracy: 0.9688\n",
      "Epoch [21/50], Batch [41/313], Loss: 0.3476, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [51/313], Loss: 0.5061, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [61/313], Loss: 0.3850, Accuracy: 0.9062\n",
      "Epoch [21/50], Batch [71/313], Loss: 0.5388, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [81/313], Loss: 0.5005, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [91/313], Loss: 0.3941, Accuracy: 0.9062\n",
      "Epoch [21/50], Batch [101/313], Loss: 0.5096, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [111/313], Loss: 0.4351, Accuracy: 0.9062\n",
      "Epoch [21/50], Batch [121/313], Loss: 0.7176, Accuracy: 0.7500\n",
      "Epoch [21/50], Batch [131/313], Loss: 0.3985, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [141/313], Loss: 0.5962, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [151/313], Loss: 0.5053, Accuracy: 0.8750\n",
      "Epoch [21/50], Batch [161/313], Loss: 0.7691, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [171/313], Loss: 0.7496, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [181/313], Loss: 1.1192, Accuracy: 0.6562\n",
      "Epoch [21/50], Batch [191/313], Loss: 0.5800, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [201/313], Loss: 0.5365, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [211/313], Loss: 0.6630, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [221/313], Loss: 0.5637, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [231/313], Loss: 0.3766, Accuracy: 0.8438\n",
      "Epoch [21/50], Batch [241/313], Loss: 0.9301, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [251/313], Loss: 0.6390, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [261/313], Loss: 0.5342, Accuracy: 0.8125\n",
      "Epoch [21/50], Batch [271/313], Loss: 0.7596, Accuracy: 0.7812\n",
      "Epoch [21/50], Batch [281/313], Loss: 0.8170, Accuracy: 0.7500\n",
      "Epoch [21/50], Batch [291/313], Loss: 1.2528, Accuracy: 0.6562\n",
      "Epoch [21/50], Batch [301/313], Loss: 0.5019, Accuracy: 0.9062\n",
      "Epoch [21/50], Batch [311/313], Loss: 0.7029, Accuracy: 0.7812\n",
      "Finished epoch 21/50, Average Loss: 0.6406, Average Accuracy: 0.8102\n",
      "Epoch duration: 1232.11 seconds, Estimated time remaining: 595.52 minutes\n",
      "Starting epoch 22/50\n",
      "Epoch [22/50], Batch [1/313], Loss: 0.6660, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [11/313], Loss: 0.6477, Accuracy: 0.7500\n",
      "Epoch [22/50], Batch [21/313], Loss: 0.6522, Accuracy: 0.6562\n",
      "Epoch [22/50], Batch [31/313], Loss: 1.1238, Accuracy: 0.8438\n",
      "Epoch [22/50], Batch [41/313], Loss: 0.4610, Accuracy: 0.8438\n",
      "Epoch [22/50], Batch [51/313], Loss: 0.6402, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [61/313], Loss: 0.5370, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [71/313], Loss: 1.4243, Accuracy: 0.6562\n",
      "Epoch [22/50], Batch [81/313], Loss: 0.7589, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [91/313], Loss: 0.0817, Accuracy: 0.9688\n",
      "Epoch [22/50], Batch [101/313], Loss: 0.4273, Accuracy: 0.8750\n",
      "Epoch [22/50], Batch [111/313], Loss: 0.7801, Accuracy: 0.7500\n",
      "Epoch [22/50], Batch [121/313], Loss: 0.6929, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [131/313], Loss: 0.9360, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [141/313], Loss: 0.7349, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [151/313], Loss: 0.8865, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [161/313], Loss: 0.4662, Accuracy: 0.8750\n",
      "Epoch [22/50], Batch [171/313], Loss: 0.4040, Accuracy: 0.8750\n",
      "Epoch [22/50], Batch [181/313], Loss: 0.4113, Accuracy: 0.8438\n",
      "Epoch [22/50], Batch [191/313], Loss: 1.0423, Accuracy: 0.7188\n",
      "Epoch [22/50], Batch [201/313], Loss: 0.8220, Accuracy: 0.7500\n",
      "Epoch [22/50], Batch [211/313], Loss: 0.6862, Accuracy: 0.7812\n",
      "Epoch [22/50], Batch [221/313], Loss: 0.5700, Accuracy: 0.8438\n",
      "Epoch [22/50], Batch [231/313], Loss: 0.7537, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [241/313], Loss: 1.1558, Accuracy: 0.6875\n",
      "Epoch [22/50], Batch [251/313], Loss: 0.5074, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [261/313], Loss: 0.7613, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [271/313], Loss: 0.4514, Accuracy: 0.9062\n",
      "Epoch [22/50], Batch [281/313], Loss: 0.8265, Accuracy: 0.8125\n",
      "Epoch [22/50], Batch [291/313], Loss: 0.7021, Accuracy: 0.7500\n",
      "Epoch [22/50], Batch [301/313], Loss: 0.5984, Accuracy: 0.8438\n",
      "Epoch [22/50], Batch [311/313], Loss: 0.5446, Accuracy: 0.8125\n",
      "Finished epoch 22/50, Average Loss: 0.6268, Average Accuracy: 0.8160\n",
      "Epoch duration: 1229.95 seconds, Estimated time remaining: 573.97 minutes\n",
      "Starting epoch 23/50\n",
      "Epoch [23/50], Batch [1/313], Loss: 0.4373, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [11/313], Loss: 0.7030, Accuracy: 0.7500\n",
      "Epoch [23/50], Batch [21/313], Loss: 0.7285, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [31/313], Loss: 0.4056, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [41/313], Loss: 0.3242, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [51/313], Loss: 0.6803, Accuracy: 0.7188\n",
      "Epoch [23/50], Batch [61/313], Loss: 0.3238, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [71/313], Loss: 0.9191, Accuracy: 0.7500\n",
      "Epoch [23/50], Batch [81/313], Loss: 0.3419, Accuracy: 0.8750\n",
      "Epoch [23/50], Batch [91/313], Loss: 0.2981, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [101/313], Loss: 0.3158, Accuracy: 0.9688\n",
      "Epoch [23/50], Batch [111/313], Loss: 0.7287, Accuracy: 0.7500\n",
      "Epoch [23/50], Batch [121/313], Loss: 0.6926, Accuracy: 0.6875\n",
      "Epoch [23/50], Batch [131/313], Loss: 0.6846, Accuracy: 0.8125\n",
      "Epoch [23/50], Batch [141/313], Loss: 0.1271, Accuracy: 0.9375\n",
      "Epoch [23/50], Batch [151/313], Loss: 1.0219, Accuracy: 0.8125\n",
      "Epoch [23/50], Batch [161/313], Loss: 0.8750, Accuracy: 0.7500\n",
      "Epoch [23/50], Batch [171/313], Loss: 0.6593, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [181/313], Loss: 0.6490, Accuracy: 0.8125\n",
      "Epoch [23/50], Batch [191/313], Loss: 0.6727, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [201/313], Loss: 0.6858, Accuracy: 0.7500\n",
      "Epoch [23/50], Batch [211/313], Loss: 1.2146, Accuracy: 0.7188\n",
      "Epoch [23/50], Batch [221/313], Loss: 0.8598, Accuracy: 0.7812\n",
      "Epoch [23/50], Batch [231/313], Loss: 0.4257, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [241/313], Loss: 0.4317, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [251/313], Loss: 0.5756, Accuracy: 0.8750\n",
      "Epoch [23/50], Batch [261/313], Loss: 0.5087, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [271/313], Loss: 0.5959, Accuracy: 0.8438\n",
      "Epoch [23/50], Batch [281/313], Loss: 0.2694, Accuracy: 0.9375\n",
      "Epoch [23/50], Batch [291/313], Loss: 0.6359, Accuracy: 0.8125\n",
      "Epoch [23/50], Batch [301/313], Loss: 0.3748, Accuracy: 0.9062\n",
      "Epoch [23/50], Batch [311/313], Loss: 0.8521, Accuracy: 0.7500\n",
      "Finished epoch 23/50, Average Loss: 0.5871, Average Accuracy: 0.8243\n",
      "Epoch duration: 1230.29 seconds, Estimated time remaining: 553.63 minutes\n",
      "Starting epoch 24/50\n",
      "Epoch [24/50], Batch [1/313], Loss: 0.3728, Accuracy: 0.8750\n",
      "Epoch [24/50], Batch [11/313], Loss: 0.4784, Accuracy: 0.8438\n",
      "Epoch [24/50], Batch [21/313], Loss: 0.3766, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [31/313], Loss: 0.5717, Accuracy: 0.8438\n",
      "Epoch [24/50], Batch [41/313], Loss: 0.9070, Accuracy: 0.7188\n",
      "Epoch [24/50], Batch [51/313], Loss: 0.5758, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [61/313], Loss: 0.3005, Accuracy: 0.9062\n",
      "Epoch [24/50], Batch [71/313], Loss: 0.6581, Accuracy: 0.7812\n",
      "Epoch [24/50], Batch [81/313], Loss: 0.5100, Accuracy: 0.8438\n",
      "Epoch [24/50], Batch [91/313], Loss: 0.6626, Accuracy: 0.7500\n",
      "Epoch [24/50], Batch [101/313], Loss: 0.3335, Accuracy: 0.8750\n",
      "Epoch [24/50], Batch [111/313], Loss: 0.3357, Accuracy: 0.9062\n",
      "Epoch [24/50], Batch [121/313], Loss: 0.7349, Accuracy: 0.7500\n",
      "Epoch [24/50], Batch [131/313], Loss: 0.8266, Accuracy: 0.7188\n",
      "Epoch [24/50], Batch [141/313], Loss: 0.9210, Accuracy: 0.7812\n",
      "Epoch [24/50], Batch [151/313], Loss: 0.4924, Accuracy: 0.8438\n",
      "Epoch [24/50], Batch [161/313], Loss: 0.5053, Accuracy: 0.7500\n",
      "Epoch [24/50], Batch [171/313], Loss: 0.2563, Accuracy: 0.9375\n",
      "Epoch [24/50], Batch [181/313], Loss: 0.3529, Accuracy: 0.8750\n",
      "Epoch [24/50], Batch [191/313], Loss: 0.6682, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [201/313], Loss: 0.4418, Accuracy: 0.8750\n",
      "Epoch [24/50], Batch [211/313], Loss: 0.6550, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [221/313], Loss: 0.8158, Accuracy: 0.7812\n",
      "Epoch [24/50], Batch [231/313], Loss: 0.2270, Accuracy: 0.9375\n",
      "Epoch [24/50], Batch [241/313], Loss: 0.6047, Accuracy: 0.7812\n",
      "Epoch [24/50], Batch [251/313], Loss: 0.5009, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [261/313], Loss: 0.3608, Accuracy: 0.8750\n",
      "Epoch [24/50], Batch [271/313], Loss: 1.3414, Accuracy: 0.6875\n",
      "Epoch [24/50], Batch [281/313], Loss: 0.6449, Accuracy: 0.8125\n",
      "Epoch [24/50], Batch [291/313], Loss: 0.2728, Accuracy: 0.9375\n",
      "Epoch [24/50], Batch [301/313], Loss: 1.6670, Accuracy: 0.6250\n",
      "Epoch [24/50], Batch [311/313], Loss: 0.7484, Accuracy: 0.7812\n",
      "Finished epoch 24/50, Average Loss: 0.5766, Average Accuracy: 0.8234\n",
      "Epoch duration: 1234.60 seconds, Estimated time remaining: 534.99 minutes\n",
      "Starting epoch 25/50\n",
      "Epoch [25/50], Batch [1/313], Loss: 0.3501, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [11/313], Loss: 0.2815, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [21/313], Loss: 0.6626, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [31/313], Loss: 0.3106, Accuracy: 0.8438\n",
      "Epoch [25/50], Batch [41/313], Loss: 0.3711, Accuracy: 0.8750\n",
      "Epoch [25/50], Batch [51/313], Loss: 0.2928, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [61/313], Loss: 0.5225, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [71/313], Loss: 0.3617, Accuracy: 0.8750\n",
      "Epoch [25/50], Batch [81/313], Loss: 0.5113, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [91/313], Loss: 0.4330, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [101/313], Loss: 0.6184, Accuracy: 0.8125\n",
      "Epoch [25/50], Batch [111/313], Loss: 0.3141, Accuracy: 0.8750\n",
      "Epoch [25/50], Batch [121/313], Loss: 0.3184, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [131/313], Loss: 0.8405, Accuracy: 0.8125\n",
      "Epoch [25/50], Batch [141/313], Loss: 0.6211, Accuracy: 0.8750\n",
      "Epoch [25/50], Batch [151/313], Loss: 0.4317, Accuracy: 0.8438\n",
      "Epoch [25/50], Batch [161/313], Loss: 0.7973, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [171/313], Loss: 0.7639, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [181/313], Loss: 0.5147, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [191/313], Loss: 0.5995, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [201/313], Loss: 0.7243, Accuracy: 0.8125\n",
      "Epoch [25/50], Batch [211/313], Loss: 0.1814, Accuracy: 0.9375\n",
      "Epoch [25/50], Batch [221/313], Loss: 0.4339, Accuracy: 0.9062\n",
      "Epoch [25/50], Batch [231/313], Loss: 0.7618, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [241/313], Loss: 0.7510, Accuracy: 0.8125\n",
      "Epoch [25/50], Batch [251/313], Loss: 0.7269, Accuracy: 0.7500\n",
      "Epoch [25/50], Batch [261/313], Loss: 0.5399, Accuracy: 0.8438\n",
      "Epoch [25/50], Batch [271/313], Loss: 0.6675, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [281/313], Loss: 0.8128, Accuracy: 0.7812\n",
      "Epoch [25/50], Batch [291/313], Loss: 0.4588, Accuracy: 0.8750\n",
      "Epoch [25/50], Batch [301/313], Loss: 0.5318, Accuracy: 0.8125\n",
      "Epoch [25/50], Batch [311/313], Loss: 0.6033, Accuracy: 0.8750\n",
      "Finished epoch 25/50, Average Loss: 0.5525, Average Accuracy: 0.8243\n",
      "Epoch duration: 1233.78 seconds, Estimated time remaining: 514.08 minutes\n",
      "Starting epoch 26/50\n",
      "Epoch [26/50], Batch [1/313], Loss: 0.4456, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [11/313], Loss: 0.3728, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [21/313], Loss: 0.0737, Accuracy: 0.9688\n",
      "Epoch [26/50], Batch [31/313], Loss: 0.3018, Accuracy: 0.9062\n",
      "Epoch [26/50], Batch [41/313], Loss: 0.3457, Accuracy: 0.8750\n",
      "Epoch [26/50], Batch [51/313], Loss: 0.4013, Accuracy: 0.9062\n",
      "Epoch [26/50], Batch [61/313], Loss: 0.5601, Accuracy: 0.7812\n",
      "Epoch [26/50], Batch [71/313], Loss: 0.4379, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [81/313], Loss: 0.2080, Accuracy: 0.9375\n",
      "Epoch [26/50], Batch [91/313], Loss: 0.4291, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [101/313], Loss: 0.4260, Accuracy: 0.8750\n",
      "Epoch [26/50], Batch [111/313], Loss: 0.3394, Accuracy: 0.8750\n",
      "Epoch [26/50], Batch [121/313], Loss: 0.6433, Accuracy: 0.7812\n",
      "Epoch [26/50], Batch [131/313], Loss: 0.4444, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [141/313], Loss: 0.5151, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [151/313], Loss: 0.4812, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [161/313], Loss: 1.0285, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [171/313], Loss: 0.3344, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [181/313], Loss: 0.4619, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [191/313], Loss: 0.6333, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [201/313], Loss: 0.7846, Accuracy: 0.7188\n",
      "Epoch [26/50], Batch [211/313], Loss: 0.2411, Accuracy: 0.9062\n",
      "Epoch [26/50], Batch [221/313], Loss: 0.5914, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [231/313], Loss: 0.6532, Accuracy: 0.7188\n",
      "Epoch [26/50], Batch [241/313], Loss: 0.5292, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [251/313], Loss: 0.4659, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [261/313], Loss: 0.5013, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [271/313], Loss: 0.6833, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [281/313], Loss: 0.5019, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [291/313], Loss: 0.4877, Accuracy: 0.8438\n",
      "Epoch [26/50], Batch [301/313], Loss: 0.8366, Accuracy: 0.8125\n",
      "Epoch [26/50], Batch [311/313], Loss: 0.3910, Accuracy: 0.9062\n",
      "Finished epoch 26/50, Average Loss: 0.5351, Average Accuracy: 0.8382\n",
      "Epoch duration: 1234.36 seconds, Estimated time remaining: 493.74 minutes\n",
      "Starting epoch 27/50\n",
      "Epoch [27/50], Batch [1/313], Loss: 0.2021, Accuracy: 0.9062\n",
      "Epoch [27/50], Batch [11/313], Loss: 0.4911, Accuracy: 0.7812\n",
      "Epoch [27/50], Batch [21/313], Loss: 0.3949, Accuracy: 0.9062\n",
      "Epoch [27/50], Batch [31/313], Loss: 0.3491, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [41/313], Loss: 0.2271, Accuracy: 0.9375\n",
      "Epoch [27/50], Batch [51/313], Loss: 0.3228, Accuracy: 0.9375\n",
      "Epoch [27/50], Batch [61/313], Loss: 0.3913, Accuracy: 0.8438\n",
      "Epoch [27/50], Batch [71/313], Loss: 0.7251, Accuracy: 0.7812\n",
      "Epoch [27/50], Batch [81/313], Loss: 0.4958, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [91/313], Loss: 0.2168, Accuracy: 0.9688\n",
      "Epoch [27/50], Batch [101/313], Loss: 0.3670, Accuracy: 0.8750\n",
      "Epoch [27/50], Batch [111/313], Loss: 0.4570, Accuracy: 0.8438\n",
      "Epoch [27/50], Batch [121/313], Loss: 0.4505, Accuracy: 0.9062\n",
      "Epoch [27/50], Batch [131/313], Loss: 0.5260, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [141/313], Loss: 0.4586, Accuracy: 0.8750\n",
      "Epoch [27/50], Batch [151/313], Loss: 0.3231, Accuracy: 0.9062\n",
      "Epoch [27/50], Batch [161/313], Loss: 0.7310, Accuracy: 0.7812\n",
      "Epoch [27/50], Batch [171/313], Loss: 0.6910, Accuracy: 0.8438\n",
      "Epoch [27/50], Batch [181/313], Loss: 0.7130, Accuracy: 0.8750\n",
      "Epoch [27/50], Batch [191/313], Loss: 0.4110, Accuracy: 0.8438\n",
      "Epoch [27/50], Batch [201/313], Loss: 0.5502, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [211/313], Loss: 0.8294, Accuracy: 0.7188\n",
      "Epoch [27/50], Batch [221/313], Loss: 0.6546, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [231/313], Loss: 0.2961, Accuracy: 0.9062\n",
      "Epoch [27/50], Batch [241/313], Loss: 0.2773, Accuracy: 0.8750\n",
      "Epoch [27/50], Batch [251/313], Loss: 0.7200, Accuracy: 0.7812\n",
      "Epoch [27/50], Batch [261/313], Loss: 0.3361, Accuracy: 0.8750\n",
      "Epoch [27/50], Batch [271/313], Loss: 1.0125, Accuracy: 0.7500\n",
      "Epoch [27/50], Batch [281/313], Loss: 0.7803, Accuracy: 0.8125\n",
      "Epoch [27/50], Batch [291/313], Loss: 0.6234, Accuracy: 0.8438\n",
      "Epoch [27/50], Batch [301/313], Loss: 0.7673, Accuracy: 0.7500\n",
      "Epoch [27/50], Batch [311/313], Loss: 0.5315, Accuracy: 0.8750\n",
      "Finished epoch 27/50, Average Loss: 0.5061, Average Accuracy: 0.8453\n",
      "Epoch duration: 1234.48 seconds, Estimated time remaining: 473.22 minutes\n",
      "Starting epoch 28/50\n",
      "Epoch [28/50], Batch [1/313], Loss: 0.2882, Accuracy: 0.8750\n",
      "Epoch [28/50], Batch [11/313], Loss: 0.5159, Accuracy: 0.7812\n",
      "Epoch [28/50], Batch [21/313], Loss: 0.2665, Accuracy: 0.9375\n",
      "Epoch [28/50], Batch [31/313], Loss: 0.2601, Accuracy: 0.9375\n",
      "Epoch [28/50], Batch [41/313], Loss: 0.1602, Accuracy: 0.9375\n",
      "Epoch [28/50], Batch [51/313], Loss: 0.3794, Accuracy: 0.8438\n",
      "Epoch [28/50], Batch [61/313], Loss: 0.3804, Accuracy: 0.9062\n",
      "Epoch [28/50], Batch [71/313], Loss: 0.5947, Accuracy: 0.8125\n",
      "Epoch [28/50], Batch [81/313], Loss: 0.3774, Accuracy: 0.8750\n",
      "Epoch [28/50], Batch [91/313], Loss: 0.2101, Accuracy: 0.9688\n",
      "Epoch [28/50], Batch [101/313], Loss: 0.4224, Accuracy: 0.9062\n",
      "Epoch [28/50], Batch [111/313], Loss: 0.3706, Accuracy: 0.8750\n",
      "Epoch [28/50], Batch [121/313], Loss: 0.2998, Accuracy: 0.8750\n",
      "Epoch [28/50], Batch [131/313], Loss: 1.0056, Accuracy: 0.7812\n",
      "Epoch [28/50], Batch [141/313], Loss: 0.1721, Accuracy: 0.9688\n",
      "Epoch [28/50], Batch [151/313], Loss: 0.4693, Accuracy: 0.8438\n",
      "Epoch [28/50], Batch [161/313], Loss: 1.2117, Accuracy: 0.7188\n",
      "Epoch [28/50], Batch [171/313], Loss: 0.1940, Accuracy: 0.9375\n",
      "Epoch [28/50], Batch [181/313], Loss: 0.5272, Accuracy: 0.8750\n",
      "Epoch [28/50], Batch [191/313], Loss: 0.7219, Accuracy: 0.8125\n",
      "Epoch [28/50], Batch [201/313], Loss: 0.7829, Accuracy: 0.7188\n",
      "Epoch [28/50], Batch [211/313], Loss: 0.7463, Accuracy: 0.6562\n",
      "Epoch [28/50], Batch [221/313], Loss: 0.8201, Accuracy: 0.7500\n",
      "Epoch [28/50], Batch [231/313], Loss: 0.3846, Accuracy: 0.9062\n",
      "Epoch [28/50], Batch [241/313], Loss: 0.3406, Accuracy: 0.8438\n",
      "Epoch [28/50], Batch [251/313], Loss: 0.3624, Accuracy: 0.9062\n",
      "Epoch [28/50], Batch [261/313], Loss: 0.6152, Accuracy: 0.7812\n",
      "Epoch [28/50], Batch [271/313], Loss: 0.7307, Accuracy: 0.7812\n",
      "Epoch [28/50], Batch [281/313], Loss: 0.8063, Accuracy: 0.7812\n",
      "Epoch [28/50], Batch [291/313], Loss: 0.6466, Accuracy: 0.8125\n",
      "Epoch [28/50], Batch [301/313], Loss: 0.4621, Accuracy: 0.8438\n",
      "Epoch [28/50], Batch [311/313], Loss: 0.5123, Accuracy: 0.8438\n",
      "Finished epoch 28/50, Average Loss: 0.4767, Average Accuracy: 0.8515\n",
      "Epoch duration: 1235.94 seconds, Estimated time remaining: 453.18 minutes\n",
      "Starting epoch 29/50\n",
      "Epoch [29/50], Batch [1/313], Loss: 0.5906, Accuracy: 0.8438\n",
      "Epoch [29/50], Batch [11/313], Loss: 0.3369, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [21/313], Loss: 0.3572, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [31/313], Loss: 0.4317, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [41/313], Loss: 0.3280, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [51/313], Loss: 0.4914, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [61/313], Loss: 0.0425, Accuracy: 1.0000\n",
      "Epoch [29/50], Batch [71/313], Loss: 0.2766, Accuracy: 0.9375\n",
      "Epoch [29/50], Batch [81/313], Loss: 0.2437, Accuracy: 0.9375\n",
      "Epoch [29/50], Batch [91/313], Loss: 0.2795, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [101/313], Loss: 0.5465, Accuracy: 0.7500\n",
      "Epoch [29/50], Batch [111/313], Loss: 0.5206, Accuracy: 0.8438\n",
      "Epoch [29/50], Batch [121/313], Loss: 0.3000, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [131/313], Loss: 0.3705, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [141/313], Loss: 0.3263, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [151/313], Loss: 0.4117, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [161/313], Loss: 0.6782, Accuracy: 0.8125\n",
      "Epoch [29/50], Batch [171/313], Loss: 0.2999, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [181/313], Loss: 0.3957, Accuracy: 0.8438\n",
      "Epoch [29/50], Batch [191/313], Loss: 0.4124, Accuracy: 0.8438\n",
      "Epoch [29/50], Batch [201/313], Loss: 0.5309, Accuracy: 0.7812\n",
      "Epoch [29/50], Batch [211/313], Loss: 0.3452, Accuracy: 0.8750\n",
      "Epoch [29/50], Batch [221/313], Loss: 0.2846, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [231/313], Loss: 0.6777, Accuracy: 0.7812\n",
      "Epoch [29/50], Batch [241/313], Loss: 0.5366, Accuracy: 0.7812\n",
      "Epoch [29/50], Batch [251/313], Loss: 0.3696, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [261/313], Loss: 0.8567, Accuracy: 0.7188\n",
      "Epoch [29/50], Batch [271/313], Loss: 0.3049, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [281/313], Loss: 0.7560, Accuracy: 0.7812\n",
      "Epoch [29/50], Batch [291/313], Loss: 0.1505, Accuracy: 0.9688\n",
      "Epoch [29/50], Batch [301/313], Loss: 0.2485, Accuracy: 0.9062\n",
      "Epoch [29/50], Batch [311/313], Loss: 0.9326, Accuracy: 0.7500\n",
      "Finished epoch 29/50, Average Loss: 0.4474, Average Accuracy: 0.8571\n",
      "Epoch duration: 1234.57 seconds, Estimated time remaining: 432.10 minutes\n",
      "Starting epoch 30/50\n",
      "Epoch [30/50], Batch [1/313], Loss: 0.1096, Accuracy: 0.9375\n",
      "Epoch [30/50], Batch [11/313], Loss: 0.2194, Accuracy: 0.9375\n",
      "Epoch [30/50], Batch [21/313], Loss: 0.2384, Accuracy: 0.9375\n",
      "Epoch [30/50], Batch [31/313], Loss: 0.5036, Accuracy: 0.8125\n",
      "Epoch [30/50], Batch [41/313], Loss: 0.4317, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [51/313], Loss: 0.2232, Accuracy: 0.9062\n",
      "Epoch [30/50], Batch [61/313], Loss: 0.1123, Accuracy: 0.9688\n",
      "Epoch [30/50], Batch [71/313], Loss: 0.4074, Accuracy: 0.9062\n",
      "Epoch [30/50], Batch [81/313], Loss: 0.4338, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [91/313], Loss: 0.3263, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [101/313], Loss: 0.3929, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [111/313], Loss: 0.6059, Accuracy: 0.8125\n",
      "Epoch [30/50], Batch [121/313], Loss: 0.2847, Accuracy: 0.9062\n",
      "Epoch [30/50], Batch [131/313], Loss: 0.3363, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [141/313], Loss: 0.4441, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [151/313], Loss: 0.3940, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [161/313], Loss: 0.8497, Accuracy: 0.7812\n",
      "Epoch [30/50], Batch [171/313], Loss: 0.2406, Accuracy: 0.9375\n",
      "Epoch [30/50], Batch [181/313], Loss: 0.5856, Accuracy: 0.7188\n",
      "Epoch [30/50], Batch [191/313], Loss: 0.3807, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [201/313], Loss: 0.3886, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [211/313], Loss: 0.3523, Accuracy: 0.9062\n",
      "Epoch [30/50], Batch [221/313], Loss: 0.3227, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [231/313], Loss: 0.4723, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [241/313], Loss: 0.9696, Accuracy: 0.6875\n",
      "Epoch [30/50], Batch [251/313], Loss: 0.4612, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [261/313], Loss: 0.3986, Accuracy: 0.8750\n",
      "Epoch [30/50], Batch [271/313], Loss: 0.6307, Accuracy: 0.7188\n",
      "Epoch [30/50], Batch [281/313], Loss: 0.2104, Accuracy: 0.9375\n",
      "Epoch [30/50], Batch [291/313], Loss: 0.7712, Accuracy: 0.7812\n",
      "Epoch [30/50], Batch [301/313], Loss: 0.5817, Accuracy: 0.8438\n",
      "Epoch [30/50], Batch [311/313], Loss: 0.7027, Accuracy: 0.7500\n",
      "Finished epoch 30/50, Average Loss: 0.4327, Average Accuracy: 0.8629\n",
      "Epoch duration: 1235.63 seconds, Estimated time remaining: 411.88 minutes\n",
      "Starting epoch 31/50\n",
      "Epoch [31/50], Batch [1/313], Loss: 0.3721, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [11/313], Loss: 0.3239, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [21/313], Loss: 0.4159, Accuracy: 0.7812\n",
      "Epoch [31/50], Batch [31/313], Loss: 0.4632, Accuracy: 0.8438\n",
      "Epoch [31/50], Batch [41/313], Loss: 0.3101, Accuracy: 0.9688\n",
      "Epoch [31/50], Batch [51/313], Loss: 0.4221, Accuracy: 0.8438\n",
      "Epoch [31/50], Batch [61/313], Loss: 0.4865, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [71/313], Loss: 0.5478, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [81/313], Loss: 0.3523, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [91/313], Loss: 0.4437, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [101/313], Loss: 0.3567, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [111/313], Loss: 0.3941, Accuracy: 0.8438\n",
      "Epoch [31/50], Batch [121/313], Loss: 0.5203, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [131/313], Loss: 0.4401, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [141/313], Loss: 0.5687, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [151/313], Loss: 0.4190, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [161/313], Loss: 0.4065, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [171/313], Loss: 0.1586, Accuracy: 0.9375\n",
      "Epoch [31/50], Batch [181/313], Loss: 0.2328, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [191/313], Loss: 0.5414, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [201/313], Loss: 0.5847, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [211/313], Loss: 0.3859, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [221/313], Loss: 0.4842, Accuracy: 0.8438\n",
      "Epoch [31/50], Batch [231/313], Loss: 0.2630, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [241/313], Loss: 0.3260, Accuracy: 0.9375\n",
      "Epoch [31/50], Batch [251/313], Loss: 0.6820, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [261/313], Loss: 0.4988, Accuracy: 0.8125\n",
      "Epoch [31/50], Batch [271/313], Loss: 0.2831, Accuracy: 0.9062\n",
      "Epoch [31/50], Batch [281/313], Loss: 0.5385, Accuracy: 0.7500\n",
      "Epoch [31/50], Batch [291/313], Loss: 0.4949, Accuracy: 0.8438\n",
      "Epoch [31/50], Batch [301/313], Loss: 0.6300, Accuracy: 0.8750\n",
      "Epoch [31/50], Batch [311/313], Loss: 0.5969, Accuracy: 0.8438\n",
      "Finished epoch 31/50, Average Loss: 0.4193, Average Accuracy: 0.8699\n",
      "Epoch duration: 1234.18 seconds, Estimated time remaining: 390.82 minutes\n",
      "Starting epoch 32/50\n",
      "Epoch [32/50], Batch [1/313], Loss: 0.5693, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [11/313], Loss: 0.1295, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [21/313], Loss: 0.2736, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [31/313], Loss: 0.4559, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [41/313], Loss: 0.1112, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [51/313], Loss: 0.3623, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [61/313], Loss: 0.3004, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [71/313], Loss: 0.4673, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [81/313], Loss: 0.2450, Accuracy: 0.9062\n",
      "Epoch [32/50], Batch [91/313], Loss: 0.5156, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [101/313], Loss: 0.2777, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [111/313], Loss: 0.4031, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [121/313], Loss: 0.6215, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [131/313], Loss: 0.2992, Accuracy: 0.9062\n",
      "Epoch [32/50], Batch [141/313], Loss: 0.2545, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [151/313], Loss: 0.1749, Accuracy: 0.9688\n",
      "Epoch [32/50], Batch [161/313], Loss: 0.5076, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [171/313], Loss: 0.4163, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [181/313], Loss: 0.3912, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [191/313], Loss: 0.4469, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [201/313], Loss: 0.2100, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [211/313], Loss: 0.5061, Accuracy: 0.8438\n",
      "Epoch [32/50], Batch [221/313], Loss: 0.3754, Accuracy: 0.9375\n",
      "Epoch [32/50], Batch [231/313], Loss: 0.4562, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [241/313], Loss: 0.3674, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [251/313], Loss: 0.3075, Accuracy: 0.9062\n",
      "Epoch [32/50], Batch [261/313], Loss: 0.4949, Accuracy: 0.8125\n",
      "Epoch [32/50], Batch [271/313], Loss: 0.5354, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [281/313], Loss: 0.4471, Accuracy: 0.8750\n",
      "Epoch [32/50], Batch [291/313], Loss: 0.5076, Accuracy: 0.7812\n",
      "Epoch [32/50], Batch [301/313], Loss: 0.6782, Accuracy: 0.7812\n",
      "Epoch [32/50], Batch [311/313], Loss: 0.3529, Accuracy: 0.9375\n",
      "Finished epoch 32/50, Average Loss: 0.4358, Average Accuracy: 0.8635\n",
      "Epoch duration: 1234.52 seconds, Estimated time remaining: 370.36 minutes\n",
      "Starting epoch 33/50\n",
      "Epoch [33/50], Batch [1/313], Loss: 0.4101, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [11/313], Loss: 0.3980, Accuracy: 0.8438\n",
      "Epoch [33/50], Batch [21/313], Loss: 0.1928, Accuracy: 0.9375\n",
      "Epoch [33/50], Batch [31/313], Loss: 0.3539, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [41/313], Loss: 0.7220, Accuracy: 0.7500\n",
      "Epoch [33/50], Batch [51/313], Loss: 0.5068, Accuracy: 0.7500\n",
      "Epoch [33/50], Batch [61/313], Loss: 0.3404, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [71/313], Loss: 0.5168, Accuracy: 0.9062\n",
      "Epoch [33/50], Batch [81/313], Loss: 0.2175, Accuracy: 0.9688\n",
      "Epoch [33/50], Batch [91/313], Loss: 0.3530, Accuracy: 0.9062\n",
      "Epoch [33/50], Batch [101/313], Loss: 0.4748, Accuracy: 0.8438\n",
      "Epoch [33/50], Batch [111/313], Loss: 0.2778, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [121/313], Loss: 0.1851, Accuracy: 0.9375\n",
      "Epoch [33/50], Batch [131/313], Loss: 0.1785, Accuracy: 0.9375\n",
      "Epoch [33/50], Batch [141/313], Loss: 0.3631, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [151/313], Loss: 0.2620, Accuracy: 0.9062\n",
      "Epoch [33/50], Batch [161/313], Loss: 0.6348, Accuracy: 0.8438\n",
      "Epoch [33/50], Batch [171/313], Loss: 0.1900, Accuracy: 0.9375\n",
      "Epoch [33/50], Batch [181/313], Loss: 0.4510, Accuracy: 0.8438\n",
      "Epoch [33/50], Batch [191/313], Loss: 0.1888, Accuracy: 0.9062\n",
      "Epoch [33/50], Batch [201/313], Loss: 1.2377, Accuracy: 0.7500\n",
      "Epoch [33/50], Batch [211/313], Loss: 0.4300, Accuracy: 0.8125\n",
      "Epoch [33/50], Batch [221/313], Loss: 0.5804, Accuracy: 0.8438\n",
      "Epoch [33/50], Batch [231/313], Loss: 0.5913, Accuracy: 0.8125\n",
      "Epoch [33/50], Batch [241/313], Loss: 0.1616, Accuracy: 0.9688\n",
      "Epoch [33/50], Batch [251/313], Loss: 0.2650, Accuracy: 0.9062\n",
      "Epoch [33/50], Batch [261/313], Loss: 0.2021, Accuracy: 0.9688\n",
      "Epoch [33/50], Batch [271/313], Loss: 0.3234, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [281/313], Loss: 0.3993, Accuracy: 0.8750\n",
      "Epoch [33/50], Batch [291/313], Loss: 0.6496, Accuracy: 0.7188\n",
      "Epoch [33/50], Batch [301/313], Loss: 0.5837, Accuracy: 0.7812\n",
      "Epoch [33/50], Batch [311/313], Loss: 0.4812, Accuracy: 0.8438\n",
      "Finished epoch 33/50, Average Loss: 0.4187, Average Accuracy: 0.8685\n",
      "Epoch duration: 1235.80 seconds, Estimated time remaining: 350.14 minutes\n",
      "Starting epoch 34/50\n",
      "Epoch [34/50], Batch [1/313], Loss: 0.3534, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [11/313], Loss: 0.2678, Accuracy: 0.9375\n",
      "Epoch [34/50], Batch [21/313], Loss: 0.3736, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [31/313], Loss: 0.2572, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [41/313], Loss: 1.1977, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [51/313], Loss: 0.5118, Accuracy: 0.8125\n",
      "Epoch [34/50], Batch [61/313], Loss: 0.1718, Accuracy: 0.9375\n",
      "Epoch [34/50], Batch [71/313], Loss: 0.2003, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [81/313], Loss: 0.1003, Accuracy: 0.9688\n",
      "Epoch [34/50], Batch [91/313], Loss: 0.1498, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [101/313], Loss: 0.4313, Accuracy: 0.8438\n",
      "Epoch [34/50], Batch [111/313], Loss: 0.2874, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [121/313], Loss: 0.1745, Accuracy: 0.9375\n",
      "Epoch [34/50], Batch [131/313], Loss: 0.3172, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [141/313], Loss: 0.1797, Accuracy: 0.9375\n",
      "Epoch [34/50], Batch [151/313], Loss: 0.5999, Accuracy: 0.8125\n",
      "Epoch [34/50], Batch [161/313], Loss: 0.5419, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [171/313], Loss: 0.1798, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [181/313], Loss: 0.4322, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [191/313], Loss: 0.5314, Accuracy: 0.8125\n",
      "Epoch [34/50], Batch [201/313], Loss: 0.5318, Accuracy: 0.8438\n",
      "Epoch [34/50], Batch [211/313], Loss: 0.3753, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [221/313], Loss: 0.1803, Accuracy: 0.9375\n",
      "Epoch [34/50], Batch [231/313], Loss: 0.3855, Accuracy: 0.8438\n",
      "Epoch [34/50], Batch [241/313], Loss: 0.2956, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [251/313], Loss: 0.2717, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [261/313], Loss: 0.6533, Accuracy: 0.8438\n",
      "Epoch [34/50], Batch [271/313], Loss: 0.6450, Accuracy: 0.8750\n",
      "Epoch [34/50], Batch [281/313], Loss: 0.2674, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [291/313], Loss: 0.7830, Accuracy: 0.7500\n",
      "Epoch [34/50], Batch [301/313], Loss: 0.5530, Accuracy: 0.9062\n",
      "Epoch [34/50], Batch [311/313], Loss: 0.4282, Accuracy: 0.8438\n",
      "Finished epoch 34/50, Average Loss: 0.4271, Average Accuracy: 0.8660\n",
      "Epoch duration: 1236.34 seconds, Estimated time remaining: 329.69 minutes\n",
      "Starting epoch 35/50\n",
      "Epoch [35/50], Batch [1/313], Loss: 0.1637, Accuracy: 0.9688\n",
      "Epoch [35/50], Batch [11/313], Loss: 0.3597, Accuracy: 0.8438\n",
      "Epoch [35/50], Batch [21/313], Loss: 0.4704, Accuracy: 0.8125\n",
      "Epoch [35/50], Batch [31/313], Loss: 0.1320, Accuracy: 0.9688\n",
      "Epoch [35/50], Batch [41/313], Loss: 0.1177, Accuracy: 0.9688\n",
      "Epoch [35/50], Batch [51/313], Loss: 0.2878, Accuracy: 0.9688\n",
      "Epoch [35/50], Batch [61/313], Loss: 0.4287, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [71/313], Loss: 0.2581, Accuracy: 0.9375\n",
      "Epoch [35/50], Batch [81/313], Loss: 0.4804, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [91/313], Loss: 0.3751, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [101/313], Loss: 0.5692, Accuracy: 0.8125\n",
      "Epoch [35/50], Batch [111/313], Loss: 0.3339, Accuracy: 0.9062\n",
      "Epoch [35/50], Batch [121/313], Loss: 0.4717, Accuracy: 0.8438\n",
      "Epoch [35/50], Batch [131/313], Loss: 0.4848, Accuracy: 0.8125\n",
      "Epoch [35/50], Batch [141/313], Loss: 0.4975, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [151/313], Loss: 0.6538, Accuracy: 0.7812\n",
      "Epoch [35/50], Batch [161/313], Loss: 0.8651, Accuracy: 0.7812\n",
      "Epoch [35/50], Batch [171/313], Loss: 0.2262, Accuracy: 0.9688\n",
      "Epoch [35/50], Batch [181/313], Loss: 0.6533, Accuracy: 0.7812\n",
      "Epoch [35/50], Batch [191/313], Loss: 0.6700, Accuracy: 0.7812\n",
      "Epoch [35/50], Batch [201/313], Loss: 0.4612, Accuracy: 0.8438\n",
      "Epoch [35/50], Batch [211/313], Loss: 0.9799, Accuracy: 0.7188\n",
      "Epoch [35/50], Batch [221/313], Loss: 1.0320, Accuracy: 0.7812\n",
      "Epoch [35/50], Batch [231/313], Loss: 0.0442, Accuracy: 1.0000\n",
      "Epoch [35/50], Batch [241/313], Loss: 0.4278, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [251/313], Loss: 0.3604, Accuracy: 0.9062\n",
      "Epoch [35/50], Batch [261/313], Loss: 0.2295, Accuracy: 0.9062\n",
      "Epoch [35/50], Batch [271/313], Loss: 0.3175, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [281/313], Loss: 0.5658, Accuracy: 0.7500\n",
      "Epoch [35/50], Batch [291/313], Loss: 0.4079, Accuracy: 0.8750\n",
      "Epoch [35/50], Batch [301/313], Loss: 0.5580, Accuracy: 0.8438\n",
      "Epoch [35/50], Batch [311/313], Loss: 0.3405, Accuracy: 0.8438\n",
      "Finished epoch 35/50, Average Loss: 0.4307, Average Accuracy: 0.8654\n",
      "Epoch duration: 1235.86 seconds, Estimated time remaining: 308.97 minutes\n",
      "Starting epoch 36/50\n",
      "Epoch [36/50], Batch [1/313], Loss: 0.2949, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [11/313], Loss: 0.3003, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [21/313], Loss: 0.4224, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [31/313], Loss: 0.3486, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [41/313], Loss: 0.7152, Accuracy: 0.7812\n",
      "Epoch [36/50], Batch [51/313], Loss: 0.4469, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [61/313], Loss: 0.1521, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [71/313], Loss: 0.4917, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [81/313], Loss: 0.3475, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [91/313], Loss: 0.0812, Accuracy: 1.0000\n",
      "Epoch [36/50], Batch [101/313], Loss: 0.2569, Accuracy: 0.9375\n",
      "Epoch [36/50], Batch [111/313], Loss: 0.3868, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [121/313], Loss: 0.2180, Accuracy: 0.9375\n",
      "Epoch [36/50], Batch [131/313], Loss: 0.3091, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [141/313], Loss: 0.3424, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [151/313], Loss: 0.3232, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [161/313], Loss: 0.3737, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [171/313], Loss: 0.3193, Accuracy: 0.8125\n",
      "Epoch [36/50], Batch [181/313], Loss: 0.5966, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [191/313], Loss: 0.1817, Accuracy: 0.9375\n",
      "Epoch [36/50], Batch [201/313], Loss: 0.3273, Accuracy: 0.9375\n",
      "Epoch [36/50], Batch [211/313], Loss: 0.5034, Accuracy: 0.8125\n",
      "Epoch [36/50], Batch [221/313], Loss: 0.4153, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [231/313], Loss: 0.2489, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [241/313], Loss: 0.4205, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [251/313], Loss: 0.4672, Accuracy: 0.8438\n",
      "Epoch [36/50], Batch [261/313], Loss: 0.3315, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [271/313], Loss: 0.2798, Accuracy: 0.9062\n",
      "Epoch [36/50], Batch [281/313], Loss: 0.3732, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [291/313], Loss: 0.4738, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [301/313], Loss: 0.3091, Accuracy: 0.8750\n",
      "Epoch [36/50], Batch [311/313], Loss: 0.6488, Accuracy: 0.7188\n",
      "Finished epoch 36/50, Average Loss: 0.3968, Average Accuracy: 0.8724\n",
      "Epoch duration: 1233.87 seconds, Estimated time remaining: 287.90 minutes\n",
      "Starting epoch 37/50\n",
      "Epoch [37/50], Batch [1/313], Loss: 0.1048, Accuracy: 0.9688\n",
      "Epoch [37/50], Batch [11/313], Loss: 0.3779, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [21/313], Loss: 0.2395, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [31/313], Loss: 0.1062, Accuracy: 0.9375\n",
      "Epoch [37/50], Batch [41/313], Loss: 0.2345, Accuracy: 0.9375\n",
      "Epoch [37/50], Batch [51/313], Loss: 0.2541, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [61/313], Loss: 0.3444, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [71/313], Loss: 0.3487, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [81/313], Loss: 0.3105, Accuracy: 0.9375\n",
      "Epoch [37/50], Batch [91/313], Loss: 0.2432, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [101/313], Loss: 0.3484, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [111/313], Loss: 0.1138, Accuracy: 0.9688\n",
      "Epoch [37/50], Batch [121/313], Loss: 0.0987, Accuracy: 0.9688\n",
      "Epoch [37/50], Batch [131/313], Loss: 0.5738, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [141/313], Loss: 0.2416, Accuracy: 0.9062\n",
      "Epoch [37/50], Batch [151/313], Loss: 0.4422, Accuracy: 0.9062\n",
      "Epoch [37/50], Batch [161/313], Loss: 0.5112, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [171/313], Loss: 0.3282, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [181/313], Loss: 0.5077, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [191/313], Loss: 0.3566, Accuracy: 0.9062\n",
      "Epoch [37/50], Batch [201/313], Loss: 0.5167, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [211/313], Loss: 0.3790, Accuracy: 0.9062\n",
      "Epoch [37/50], Batch [221/313], Loss: 0.5124, Accuracy: 0.8750\n",
      "Epoch [37/50], Batch [231/313], Loss: 0.5213, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [241/313], Loss: 0.3591, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [251/313], Loss: 0.3590, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [261/313], Loss: 0.5477, Accuracy: 0.7500\n",
      "Epoch [37/50], Batch [271/313], Loss: 0.5042, Accuracy: 0.8125\n",
      "Epoch [37/50], Batch [281/313], Loss: 0.5254, Accuracy: 0.8438\n",
      "Epoch [37/50], Batch [291/313], Loss: 0.4309, Accuracy: 0.8125\n",
      "Epoch [37/50], Batch [301/313], Loss: 0.1897, Accuracy: 0.9688\n",
      "Epoch [37/50], Batch [311/313], Loss: 0.7473, Accuracy: 0.7812\n",
      "Finished epoch 37/50, Average Loss: 0.3529, Average Accuracy: 0.8859\n",
      "Epoch duration: 1235.88 seconds, Estimated time remaining: 267.77 minutes\n",
      "Starting epoch 38/50\n",
      "Epoch [38/50], Batch [1/313], Loss: 0.3257, Accuracy: 0.9062\n",
      "Epoch [38/50], Batch [11/313], Loss: 0.1326, Accuracy: 0.9688\n",
      "Epoch [38/50], Batch [21/313], Loss: 0.3269, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [31/313], Loss: 0.1284, Accuracy: 1.0000\n",
      "Epoch [38/50], Batch [41/313], Loss: 0.4361, Accuracy: 0.8438\n",
      "Epoch [38/50], Batch [51/313], Loss: 0.2958, Accuracy: 0.9062\n",
      "Epoch [38/50], Batch [61/313], Loss: 0.1642, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [71/313], Loss: 0.2836, Accuracy: 0.9062\n",
      "Epoch [38/50], Batch [81/313], Loss: 0.3130, Accuracy: 0.9062\n",
      "Epoch [38/50], Batch [91/313], Loss: 0.2098, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [101/313], Loss: 0.3732, Accuracy: 0.8438\n",
      "Epoch [38/50], Batch [111/313], Loss: 0.4757, Accuracy: 0.8438\n",
      "Epoch [38/50], Batch [121/313], Loss: 0.2364, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [131/313], Loss: 0.1868, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [141/313], Loss: 0.2195, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [151/313], Loss: 0.4485, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [161/313], Loss: 0.5000, Accuracy: 0.8125\n",
      "Epoch [38/50], Batch [171/313], Loss: 0.3678, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [181/313], Loss: 0.2842, Accuracy: 0.8438\n",
      "Epoch [38/50], Batch [191/313], Loss: 0.5031, Accuracy: 0.8125\n",
      "Epoch [38/50], Batch [201/313], Loss: 0.2229, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [211/313], Loss: 0.2059, Accuracy: 0.9375\n",
      "Epoch [38/50], Batch [221/313], Loss: 0.7324, Accuracy: 0.7812\n",
      "Epoch [38/50], Batch [231/313], Loss: 0.3769, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [241/313], Loss: 0.4847, Accuracy: 0.8125\n",
      "Epoch [38/50], Batch [251/313], Loss: 0.5916, Accuracy: 0.8125\n",
      "Epoch [38/50], Batch [261/313], Loss: 0.0667, Accuracy: 1.0000\n",
      "Epoch [38/50], Batch [271/313], Loss: 0.2135, Accuracy: 0.9062\n",
      "Epoch [38/50], Batch [281/313], Loss: 0.2894, Accuracy: 0.7812\n",
      "Epoch [38/50], Batch [291/313], Loss: 0.3856, Accuracy: 0.8438\n",
      "Epoch [38/50], Batch [301/313], Loss: 0.5240, Accuracy: 0.8750\n",
      "Epoch [38/50], Batch [311/313], Loss: 0.2710, Accuracy: 0.9062\n",
      "Finished epoch 38/50, Average Loss: 0.3292, Average Accuracy: 0.8930\n",
      "Epoch duration: 1235.76 seconds, Estimated time remaining: 247.15 minutes\n",
      "Starting epoch 39/50\n",
      "Epoch [39/50], Batch [1/313], Loss: 0.3493, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [11/313], Loss: 0.1007, Accuracy: 0.9688\n",
      "Epoch [39/50], Batch [21/313], Loss: 0.2773, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [31/313], Loss: 0.2557, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [41/313], Loss: 0.1641, Accuracy: 0.9688\n",
      "Epoch [39/50], Batch [51/313], Loss: 0.0461, Accuracy: 1.0000\n",
      "Epoch [39/50], Batch [61/313], Loss: 0.0326, Accuracy: 1.0000\n",
      "Epoch [39/50], Batch [71/313], Loss: 0.1286, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [81/313], Loss: 0.3073, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [91/313], Loss: 0.2474, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [101/313], Loss: 0.5087, Accuracy: 0.8125\n",
      "Epoch [39/50], Batch [111/313], Loss: 0.3565, Accuracy: 0.8438\n",
      "Epoch [39/50], Batch [121/313], Loss: 0.2557, Accuracy: 0.9375\n",
      "Epoch [39/50], Batch [131/313], Loss: 0.2393, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [141/313], Loss: 0.3332, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [151/313], Loss: 0.3226, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [161/313], Loss: 0.4199, Accuracy: 0.8438\n",
      "Epoch [39/50], Batch [171/313], Loss: 0.4477, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [181/313], Loss: 0.2915, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [191/313], Loss: 0.3904, Accuracy: 0.8438\n",
      "Epoch [39/50], Batch [201/313], Loss: 0.1661, Accuracy: 0.9688\n",
      "Epoch [39/50], Batch [211/313], Loss: 0.3018, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [221/313], Loss: 0.5159, Accuracy: 0.8438\n",
      "Epoch [39/50], Batch [231/313], Loss: 0.4004, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [241/313], Loss: 0.4860, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [251/313], Loss: 0.2899, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [261/313], Loss: 0.2196, Accuracy: 0.8750\n",
      "Epoch [39/50], Batch [271/313], Loss: 0.3254, Accuracy: 0.9062\n",
      "Epoch [39/50], Batch [281/313], Loss: 0.0789, Accuracy: 1.0000\n",
      "Epoch [39/50], Batch [291/313], Loss: 0.6001, Accuracy: 0.8438\n",
      "Epoch [39/50], Batch [301/313], Loss: 0.1273, Accuracy: 0.9688\n",
      "Epoch [39/50], Batch [311/313], Loss: 0.2596, Accuracy: 0.8750\n",
      "Finished epoch 39/50, Average Loss: 0.3067, Average Accuracy: 0.9008\n",
      "Epoch duration: 1234.59 seconds, Estimated time remaining: 226.34 minutes\n",
      "Starting epoch 40/50\n",
      "Epoch [40/50], Batch [1/313], Loss: 0.3091, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [11/313], Loss: 0.2868, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [21/313], Loss: 0.3093, Accuracy: 0.9688\n",
      "Epoch [40/50], Batch [31/313], Loss: 0.3810, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [41/313], Loss: 0.3811, Accuracy: 0.9062\n",
      "Epoch [40/50], Batch [51/313], Loss: 0.1244, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [61/313], Loss: 0.3634, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [71/313], Loss: 0.2147, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [81/313], Loss: 0.2264, Accuracy: 0.9062\n",
      "Epoch [40/50], Batch [91/313], Loss: 0.1931, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [101/313], Loss: 0.3043, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [111/313], Loss: 0.2522, Accuracy: 0.9062\n",
      "Epoch [40/50], Batch [121/313], Loss: 0.5430, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [131/313], Loss: 0.3782, Accuracy: 0.9688\n",
      "Epoch [40/50], Batch [141/313], Loss: 0.2057, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [151/313], Loss: 0.2812, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [161/313], Loss: 0.3665, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [171/313], Loss: 0.3397, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [181/313], Loss: 0.1313, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [191/313], Loss: 0.4317, Accuracy: 0.8438\n",
      "Epoch [40/50], Batch [201/313], Loss: 0.1437, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [211/313], Loss: 0.1117, Accuracy: 0.9688\n",
      "Epoch [40/50], Batch [221/313], Loss: 0.5375, Accuracy: 0.8125\n",
      "Epoch [40/50], Batch [231/313], Loss: 0.3544, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [241/313], Loss: 0.3747, Accuracy: 0.9062\n",
      "Epoch [40/50], Batch [251/313], Loss: 0.3733, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [261/313], Loss: 0.0974, Accuracy: 0.9688\n",
      "Epoch [40/50], Batch [271/313], Loss: 0.2611, Accuracy: 0.9062\n",
      "Epoch [40/50], Batch [281/313], Loss: 0.2167, Accuracy: 0.9688\n",
      "Epoch [40/50], Batch [291/313], Loss: 0.2624, Accuracy: 0.8750\n",
      "Epoch [40/50], Batch [301/313], Loss: 0.2900, Accuracy: 0.9375\n",
      "Epoch [40/50], Batch [311/313], Loss: 0.6879, Accuracy: 0.8438\n",
      "Finished epoch 40/50, Average Loss: 0.3195, Average Accuracy: 0.8994\n",
      "Epoch duration: 1233.75 seconds, Estimated time remaining: 205.62 minutes\n",
      "Starting epoch 41/50\n",
      "Epoch [41/50], Batch [1/313], Loss: 0.5143, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [11/313], Loss: 0.1706, Accuracy: 0.9688\n",
      "Epoch [41/50], Batch [21/313], Loss: 0.2247, Accuracy: 0.9375\n",
      "Epoch [41/50], Batch [31/313], Loss: 0.5774, Accuracy: 0.8438\n",
      "Epoch [41/50], Batch [41/313], Loss: 0.1196, Accuracy: 0.9688\n",
      "Epoch [41/50], Batch [51/313], Loss: 0.2894, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [61/313], Loss: 0.1898, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [71/313], Loss: 0.1667, Accuracy: 0.9688\n",
      "Epoch [41/50], Batch [81/313], Loss: 0.2180, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [91/313], Loss: 0.3576, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [101/313], Loss: 0.1714, Accuracy: 0.9375\n",
      "Epoch [41/50], Batch [111/313], Loss: 0.4704, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [121/313], Loss: 0.1366, Accuracy: 0.9688\n",
      "Epoch [41/50], Batch [131/313], Loss: 0.4174, Accuracy: 0.8438\n",
      "Epoch [41/50], Batch [141/313], Loss: 0.7149, Accuracy: 0.8125\n",
      "Epoch [41/50], Batch [151/313], Loss: 0.2403, Accuracy: 0.9375\n",
      "Epoch [41/50], Batch [161/313], Loss: 0.4181, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [171/313], Loss: 0.2346, Accuracy: 0.9375\n",
      "Epoch [41/50], Batch [181/313], Loss: 0.0473, Accuracy: 1.0000\n",
      "Epoch [41/50], Batch [191/313], Loss: 0.2946, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [201/313], Loss: 0.3143, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [211/313], Loss: 0.1510, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [221/313], Loss: 0.0836, Accuracy: 0.9688\n",
      "Epoch [41/50], Batch [231/313], Loss: 0.2567, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [241/313], Loss: 0.4378, Accuracy: 0.8438\n",
      "Epoch [41/50], Batch [251/313], Loss: 0.2116, Accuracy: 0.9062\n",
      "Epoch [41/50], Batch [261/313], Loss: 0.5501, Accuracy: 0.8125\n",
      "Epoch [41/50], Batch [271/313], Loss: 0.4179, Accuracy: 0.8438\n",
      "Epoch [41/50], Batch [281/313], Loss: 0.1749, Accuracy: 0.9375\n",
      "Epoch [41/50], Batch [291/313], Loss: 0.7626, Accuracy: 0.7812\n",
      "Epoch [41/50], Batch [301/313], Loss: 0.3902, Accuracy: 0.8750\n",
      "Epoch [41/50], Batch [311/313], Loss: 0.1657, Accuracy: 0.9375\n",
      "Finished epoch 41/50, Average Loss: 0.3258, Average Accuracy: 0.8959\n",
      "Epoch duration: 1234.13 seconds, Estimated time remaining: 185.12 minutes\n",
      "Starting epoch 42/50\n",
      "Epoch [42/50], Batch [1/313], Loss: 0.1120, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [11/313], Loss: 0.0989, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [21/313], Loss: 0.1065, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [31/313], Loss: 0.1556, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [41/313], Loss: 0.5310, Accuracy: 0.7812\n",
      "Epoch [42/50], Batch [51/313], Loss: 0.1593, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [61/313], Loss: 0.3861, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [71/313], Loss: 0.4636, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [81/313], Loss: 0.0874, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [91/313], Loss: 0.0932, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [101/313], Loss: 0.1852, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [111/313], Loss: 0.2716, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [121/313], Loss: 0.4956, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [131/313], Loss: 0.1441, Accuracy: 0.9688\n",
      "Epoch [42/50], Batch [141/313], Loss: 0.4369, Accuracy: 0.8438\n",
      "Epoch [42/50], Batch [151/313], Loss: 0.4824, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [161/313], Loss: 0.0860, Accuracy: 1.0000\n",
      "Epoch [42/50], Batch [171/313], Loss: 0.3921, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [181/313], Loss: 0.3315, Accuracy: 0.9062\n",
      "Epoch [42/50], Batch [191/313], Loss: 0.3857, Accuracy: 0.8750\n",
      "Epoch [42/50], Batch [201/313], Loss: 0.3368, Accuracy: 0.8750\n",
      "Epoch [42/50], Batch [211/313], Loss: 0.2222, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [221/313], Loss: 0.2308, Accuracy: 0.8750\n",
      "Epoch [42/50], Batch [231/313], Loss: 0.7913, Accuracy: 0.7500\n",
      "Epoch [42/50], Batch [241/313], Loss: 0.2310, Accuracy: 0.8750\n",
      "Epoch [42/50], Batch [251/313], Loss: 0.5954, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [261/313], Loss: 0.2041, Accuracy: 0.9375\n",
      "Epoch [42/50], Batch [271/313], Loss: 0.8831, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [281/313], Loss: 0.2972, Accuracy: 0.8438\n",
      "Epoch [42/50], Batch [291/313], Loss: 0.3715, Accuracy: 0.9062\n",
      "Epoch [42/50], Batch [301/313], Loss: 0.4767, Accuracy: 0.8125\n",
      "Epoch [42/50], Batch [311/313], Loss: 0.3715, Accuracy: 0.8750\n",
      "Finished epoch 42/50, Average Loss: 0.3431, Average Accuracy: 0.8900\n",
      "Epoch duration: 1236.83 seconds, Estimated time remaining: 164.91 minutes\n",
      "Starting epoch 43/50\n",
      "Epoch [43/50], Batch [1/313], Loss: 0.0632, Accuracy: 0.9688\n",
      "Epoch [43/50], Batch [11/313], Loss: 0.3530, Accuracy: 0.8750\n",
      "Epoch [43/50], Batch [21/313], Loss: 0.6215, Accuracy: 0.7188\n",
      "Epoch [43/50], Batch [31/313], Loss: 0.1431, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [41/313], Loss: 0.4707, Accuracy: 0.8750\n",
      "Epoch [43/50], Batch [51/313], Loss: 0.2437, Accuracy: 0.9688\n",
      "Epoch [43/50], Batch [61/313], Loss: 0.4553, Accuracy: 0.8750\n",
      "Epoch [43/50], Batch [71/313], Loss: 0.2062, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [81/313], Loss: 0.1637, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [91/313], Loss: 0.0767, Accuracy: 1.0000\n",
      "Epoch [43/50], Batch [101/313], Loss: 0.1114, Accuracy: 1.0000\n",
      "Epoch [43/50], Batch [111/313], Loss: 0.3363, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [121/313], Loss: 0.1666, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [131/313], Loss: 0.3225, Accuracy: 0.8750\n",
      "Epoch [43/50], Batch [141/313], Loss: 0.2022, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [151/313], Loss: 0.4043, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [161/313], Loss: 0.3928, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [171/313], Loss: 0.3630, Accuracy: 0.8438\n",
      "Epoch [43/50], Batch [181/313], Loss: 0.4016, Accuracy: 0.8125\n",
      "Epoch [43/50], Batch [191/313], Loss: 0.2276, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [201/313], Loss: 0.3898, Accuracy: 0.8125\n",
      "Epoch [43/50], Batch [211/313], Loss: 0.2508, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [221/313], Loss: 0.2383, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [231/313], Loss: 0.6911, Accuracy: 0.7500\n",
      "Epoch [43/50], Batch [241/313], Loss: 0.7042, Accuracy: 0.7188\n",
      "Epoch [43/50], Batch [251/313], Loss: 0.2113, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [261/313], Loss: 0.6391, Accuracy: 0.7812\n",
      "Epoch [43/50], Batch [271/313], Loss: 0.2316, Accuracy: 0.9375\n",
      "Epoch [43/50], Batch [281/313], Loss: 0.1589, Accuracy: 0.9688\n",
      "Epoch [43/50], Batch [291/313], Loss: 0.1722, Accuracy: 0.9062\n",
      "Epoch [43/50], Batch [301/313], Loss: 0.6106, Accuracy: 0.8438\n",
      "Epoch [43/50], Batch [311/313], Loss: 0.7691, Accuracy: 0.8125\n",
      "Finished epoch 43/50, Average Loss: 0.3393, Average Accuracy: 0.8918\n",
      "Epoch duration: 1237.77 seconds, Estimated time remaining: 144.41 minutes\n",
      "Starting epoch 44/50\n",
      "Epoch [44/50], Batch [1/313], Loss: 0.1348, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [11/313], Loss: 0.1804, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [21/313], Loss: 0.3363, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [31/313], Loss: 0.0542, Accuracy: 1.0000\n",
      "Epoch [44/50], Batch [41/313], Loss: 0.1733, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [51/313], Loss: 0.3022, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [61/313], Loss: 0.0607, Accuracy: 1.0000\n",
      "Epoch [44/50], Batch [71/313], Loss: 0.1529, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [81/313], Loss: 0.1706, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [91/313], Loss: 0.7042, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [101/313], Loss: 0.0667, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [111/313], Loss: 0.3663, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [121/313], Loss: 0.1093, Accuracy: 1.0000\n",
      "Epoch [44/50], Batch [131/313], Loss: 0.2868, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [141/313], Loss: 0.1908, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [151/313], Loss: 0.1280, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [161/313], Loss: 0.3205, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [171/313], Loss: 0.4500, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [181/313], Loss: 0.3089, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [191/313], Loss: 0.5192, Accuracy: 0.8125\n",
      "Epoch [44/50], Batch [201/313], Loss: 0.6421, Accuracy: 0.8125\n",
      "Epoch [44/50], Batch [211/313], Loss: 0.0905, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [221/313], Loss: 0.2002, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [231/313], Loss: 0.2345, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [241/313], Loss: 0.1234, Accuracy: 0.9688\n",
      "Epoch [44/50], Batch [251/313], Loss: 0.5031, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [261/313], Loss: 0.3930, Accuracy: 0.9062\n",
      "Epoch [44/50], Batch [271/313], Loss: 0.4776, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [281/313], Loss: 0.2928, Accuracy: 0.8750\n",
      "Epoch [44/50], Batch [291/313], Loss: 0.3428, Accuracy: 0.9375\n",
      "Epoch [44/50], Batch [301/313], Loss: 0.5556, Accuracy: 0.8438\n",
      "Epoch [44/50], Batch [311/313], Loss: 0.2607, Accuracy: 0.9375\n",
      "Finished epoch 44/50, Average Loss: 0.3036, Average Accuracy: 0.9002\n",
      "Epoch duration: 1237.46 seconds, Estimated time remaining: 123.75 minutes\n",
      "Starting epoch 45/50\n",
      "Epoch [45/50], Batch [1/313], Loss: 0.5365, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [11/313], Loss: 0.2071, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [21/313], Loss: 0.1566, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [31/313], Loss: 0.6011, Accuracy: 0.7812\n",
      "Epoch [45/50], Batch [41/313], Loss: 0.2860, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [51/313], Loss: 0.3925, Accuracy: 0.8438\n",
      "Epoch [45/50], Batch [61/313], Loss: 0.1844, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [71/313], Loss: 0.2852, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [81/313], Loss: 0.1808, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [91/313], Loss: 0.2651, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [101/313], Loss: 0.0688, Accuracy: 1.0000\n",
      "Epoch [45/50], Batch [111/313], Loss: 0.2804, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [121/313], Loss: 0.5503, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [131/313], Loss: 0.1232, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [141/313], Loss: 0.4943, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [151/313], Loss: 0.1899, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [161/313], Loss: 0.3581, Accuracy: 0.8125\n",
      "Epoch [45/50], Batch [171/313], Loss: 0.3907, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [181/313], Loss: 0.3663, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [191/313], Loss: 0.3507, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [201/313], Loss: 0.2761, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [211/313], Loss: 0.3125, Accuracy: 0.8750\n",
      "Epoch [45/50], Batch [221/313], Loss: 0.1768, Accuracy: 0.9688\n",
      "Epoch [45/50], Batch [231/313], Loss: 0.0882, Accuracy: 0.9688\n",
      "Epoch [45/50], Batch [241/313], Loss: 0.5104, Accuracy: 0.8125\n",
      "Epoch [45/50], Batch [251/313], Loss: 0.5075, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [261/313], Loss: 0.1884, Accuracy: 0.9375\n",
      "Epoch [45/50], Batch [271/313], Loss: 0.5930, Accuracy: 0.8438\n",
      "Epoch [45/50], Batch [281/313], Loss: 0.0986, Accuracy: 0.9688\n",
      "Epoch [45/50], Batch [291/313], Loss: 0.7538, Accuracy: 0.7500\n",
      "Epoch [45/50], Batch [301/313], Loss: 0.2837, Accuracy: 0.9062\n",
      "Epoch [45/50], Batch [311/313], Loss: 0.2672, Accuracy: 0.9375\n",
      "Finished epoch 45/50, Average Loss: 0.2803, Average Accuracy: 0.9102\n",
      "Epoch duration: 1237.84 seconds, Estimated time remaining: 103.15 minutes\n",
      "Starting epoch 46/50\n",
      "Epoch [46/50], Batch [1/313], Loss: 0.2007, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [11/313], Loss: 0.2087, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [21/313], Loss: 0.0984, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [31/313], Loss: 0.2297, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [41/313], Loss: 0.2779, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [51/313], Loss: 0.1306, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [61/313], Loss: 0.2049, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [71/313], Loss: 0.4045, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [81/313], Loss: 0.2847, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [91/313], Loss: 0.1086, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [101/313], Loss: 0.1284, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [111/313], Loss: 0.0293, Accuracy: 1.0000\n",
      "Epoch [46/50], Batch [121/313], Loss: 0.3668, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [131/313], Loss: 0.2785, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [141/313], Loss: 0.4252, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [151/313], Loss: 0.2854, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [161/313], Loss: 0.5058, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [171/313], Loss: 0.3079, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [181/313], Loss: 0.1142, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [191/313], Loss: 0.2928, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [201/313], Loss: 0.5728, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [211/313], Loss: 0.0895, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [221/313], Loss: 0.1182, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [231/313], Loss: 0.1546, Accuracy: 0.9688\n",
      "Epoch [46/50], Batch [241/313], Loss: 0.3125, Accuracy: 0.8750\n",
      "Epoch [46/50], Batch [251/313], Loss: 0.4537, Accuracy: 0.8438\n",
      "Epoch [46/50], Batch [261/313], Loss: 0.4755, Accuracy: 0.8438\n",
      "Epoch [46/50], Batch [271/313], Loss: 0.1871, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [281/313], Loss: 0.2720, Accuracy: 0.9062\n",
      "Epoch [46/50], Batch [291/313], Loss: 0.1780, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [301/313], Loss: 0.1158, Accuracy: 0.9375\n",
      "Epoch [46/50], Batch [311/313], Loss: 0.3219, Accuracy: 0.8438\n",
      "Finished epoch 46/50, Average Loss: 0.2648, Average Accuracy: 0.9159\n",
      "Epoch duration: 1237.17 seconds, Estimated time remaining: 82.48 minutes\n",
      "Starting epoch 47/50\n",
      "Epoch [47/50], Batch [1/313], Loss: 0.0044, Accuracy: 1.0000\n",
      "Epoch [47/50], Batch [11/313], Loss: 0.3420, Accuracy: 0.8750\n",
      "Epoch [47/50], Batch [21/313], Loss: 0.1579, Accuracy: 0.9688\n",
      "Epoch [47/50], Batch [31/313], Loss: 0.4318, Accuracy: 0.8438\n",
      "Epoch [47/50], Batch [41/313], Loss: 0.5210, Accuracy: 0.8438\n",
      "Epoch [47/50], Batch [51/313], Loss: 0.1674, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [61/313], Loss: 0.2333, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [71/313], Loss: 0.1151, Accuracy: 0.9688\n",
      "Epoch [47/50], Batch [81/313], Loss: 0.5485, Accuracy: 0.8438\n",
      "Epoch [47/50], Batch [91/313], Loss: 0.0857, Accuracy: 0.9688\n",
      "Epoch [47/50], Batch [101/313], Loss: 0.3011, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [111/313], Loss: 0.6828, Accuracy: 0.8750\n",
      "Epoch [47/50], Batch [121/313], Loss: 0.1931, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [131/313], Loss: 0.4479, Accuracy: 0.8750\n",
      "Epoch [47/50], Batch [141/313], Loss: 0.3948, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [151/313], Loss: 0.2267, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [161/313], Loss: 0.1149, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [171/313], Loss: 0.1407, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [181/313], Loss: 0.1943, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [191/313], Loss: 0.3733, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [201/313], Loss: 0.1325, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [211/313], Loss: 0.2386, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [221/313], Loss: 0.3068, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [231/313], Loss: 0.2203, Accuracy: 0.8750\n",
      "Epoch [47/50], Batch [241/313], Loss: 0.1469, Accuracy: 0.9375\n",
      "Epoch [47/50], Batch [251/313], Loss: 0.3675, Accuracy: 0.8750\n",
      "Epoch [47/50], Batch [261/313], Loss: 0.2787, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [271/313], Loss: 0.1418, Accuracy: 0.9688\n",
      "Epoch [47/50], Batch [281/313], Loss: 0.2005, Accuracy: 0.9062\n",
      "Epoch [47/50], Batch [291/313], Loss: 0.5472, Accuracy: 0.7812\n",
      "Epoch [47/50], Batch [301/313], Loss: 0.0982, Accuracy: 0.9688\n",
      "Epoch [47/50], Batch [311/313], Loss: 0.2217, Accuracy: 0.9375\n",
      "Finished epoch 47/50, Average Loss: 0.2482, Average Accuracy: 0.9206\n",
      "Epoch duration: 1234.41 seconds, Estimated time remaining: 61.72 minutes\n",
      "Starting epoch 48/50\n",
      "Epoch [48/50], Batch [1/313], Loss: 0.2970, Accuracy: 0.9062\n",
      "Epoch [48/50], Batch [11/313], Loss: 0.1733, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [21/313], Loss: 0.1168, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [31/313], Loss: 0.4158, Accuracy: 0.8750\n",
      "Epoch [48/50], Batch [41/313], Loss: 0.0873, Accuracy: 0.9688\n",
      "Epoch [48/50], Batch [51/313], Loss: 0.1125, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [61/313], Loss: 0.2632, Accuracy: 0.9062\n",
      "Epoch [48/50], Batch [71/313], Loss: 0.1780, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [81/313], Loss: 0.0466, Accuracy: 0.9688\n",
      "Epoch [48/50], Batch [91/313], Loss: 0.1476, Accuracy: 0.9688\n",
      "Epoch [48/50], Batch [101/313], Loss: 0.6624, Accuracy: 0.8438\n",
      "Epoch [48/50], Batch [111/313], Loss: 0.3593, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [121/313], Loss: 0.2757, Accuracy: 0.9062\n",
      "Epoch [48/50], Batch [131/313], Loss: 0.2325, Accuracy: 0.9062\n",
      "Epoch [48/50], Batch [141/313], Loss: 0.0347, Accuracy: 1.0000\n",
      "Epoch [48/50], Batch [151/313], Loss: 0.4028, Accuracy: 0.8750\n",
      "Epoch [48/50], Batch [161/313], Loss: 0.2295, Accuracy: 0.9062\n",
      "Epoch [48/50], Batch [171/313], Loss: 0.2479, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [181/313], Loss: 0.0613, Accuracy: 1.0000\n",
      "Epoch [48/50], Batch [191/313], Loss: 0.1694, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [201/313], Loss: 0.0474, Accuracy: 1.0000\n",
      "Epoch [48/50], Batch [211/313], Loss: 0.0247, Accuracy: 1.0000\n",
      "Epoch [48/50], Batch [221/313], Loss: 0.0345, Accuracy: 1.0000\n",
      "Epoch [48/50], Batch [231/313], Loss: 0.1200, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [241/313], Loss: 0.3697, Accuracy: 0.8750\n",
      "Epoch [48/50], Batch [251/313], Loss: 0.3396, Accuracy: 0.8750\n",
      "Epoch [48/50], Batch [261/313], Loss: 0.4235, Accuracy: 0.8438\n",
      "Epoch [48/50], Batch [271/313], Loss: 0.1594, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [281/313], Loss: 0.5247, Accuracy: 0.7812\n",
      "Epoch [48/50], Batch [291/313], Loss: 0.2433, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [301/313], Loss: 0.1358, Accuracy: 0.9375\n",
      "Epoch [48/50], Batch [311/313], Loss: 0.5412, Accuracy: 0.8125\n",
      "Finished epoch 48/50, Average Loss: 0.2510, Average Accuracy: 0.9167\n",
      "Epoch duration: 1234.30 seconds, Estimated time remaining: 41.14 minutes\n",
      "Starting epoch 49/50\n",
      "Epoch [49/50], Batch [1/313], Loss: 0.2104, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [11/313], Loss: 0.2475, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [21/313], Loss: 0.0136, Accuracy: 1.0000\n",
      "Epoch [49/50], Batch [31/313], Loss: 0.0881, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [41/313], Loss: 0.1614, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [51/313], Loss: 0.1663, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [61/313], Loss: 0.1838, Accuracy: 0.9062\n",
      "Epoch [49/50], Batch [71/313], Loss: 0.1268, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [81/313], Loss: 0.2000, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [91/313], Loss: 0.2522, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [101/313], Loss: 0.1558, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [111/313], Loss: 0.2712, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [121/313], Loss: 0.2728, Accuracy: 0.9062\n",
      "Epoch [49/50], Batch [131/313], Loss: 0.5056, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [141/313], Loss: 0.1172, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [151/313], Loss: 0.0692, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [161/313], Loss: 0.1318, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [171/313], Loss: 0.3142, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [181/313], Loss: 0.5243, Accuracy: 0.8125\n",
      "Epoch [49/50], Batch [191/313], Loss: 0.2625, Accuracy: 0.8750\n",
      "Epoch [49/50], Batch [201/313], Loss: 0.4822, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [211/313], Loss: 0.3490, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [221/313], Loss: 0.0386, Accuracy: 1.0000\n",
      "Epoch [49/50], Batch [231/313], Loss: 0.4242, Accuracy: 0.8750\n",
      "Epoch [49/50], Batch [241/313], Loss: 0.3592, Accuracy: 0.9062\n",
      "Epoch [49/50], Batch [251/313], Loss: 0.1517, Accuracy: 0.9688\n",
      "Epoch [49/50], Batch [261/313], Loss: 0.3004, Accuracy: 0.9062\n",
      "Epoch [49/50], Batch [271/313], Loss: 0.4706, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [281/313], Loss: 1.0059, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [291/313], Loss: 0.2383, Accuracy: 0.9375\n",
      "Epoch [49/50], Batch [301/313], Loss: 0.5816, Accuracy: 0.8438\n",
      "Epoch [49/50], Batch [311/313], Loss: 0.1077, Accuracy: 0.9688\n",
      "Finished epoch 49/50, Average Loss: 0.2483, Average Accuracy: 0.9222\n",
      "Epoch duration: 1234.97 seconds, Estimated time remaining: 20.58 minutes\n",
      "Starting epoch 50/50\n",
      "Epoch [50/50], Batch [1/313], Loss: 0.1887, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [11/313], Loss: 0.2659, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [21/313], Loss: 0.2084, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [31/313], Loss: 0.2802, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [41/313], Loss: 0.1692, Accuracy: 0.9688\n",
      "Epoch [50/50], Batch [51/313], Loss: 0.2797, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [61/313], Loss: 0.2708, Accuracy: 0.8750\n",
      "Epoch [50/50], Batch [71/313], Loss: 0.1523, Accuracy: 0.8750\n",
      "Epoch [50/50], Batch [81/313], Loss: 0.1133, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [91/313], Loss: 0.4596, Accuracy: 0.8750\n",
      "Epoch [50/50], Batch [101/313], Loss: 0.0269, Accuracy: 1.0000\n",
      "Epoch [50/50], Batch [111/313], Loss: 0.1533, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [121/313], Loss: 0.2195, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [131/313], Loss: 0.2844, Accuracy: 0.8750\n",
      "Epoch [50/50], Batch [141/313], Loss: 0.0893, Accuracy: 0.9688\n",
      "Epoch [50/50], Batch [151/313], Loss: 0.3072, Accuracy: 0.9688\n",
      "Epoch [50/50], Batch [161/313], Loss: 0.2449, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [171/313], Loss: 0.2063, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [181/313], Loss: 0.3921, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [191/313], Loss: 0.2516, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [201/313], Loss: 0.4674, Accuracy: 0.8438\n",
      "Epoch [50/50], Batch [211/313], Loss: 0.1300, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [221/313], Loss: 0.6270, Accuracy: 0.8438\n",
      "Epoch [50/50], Batch [231/313], Loss: 0.2120, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [241/313], Loss: 0.1639, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [251/313], Loss: 0.0946, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [261/313], Loss: 0.2174, Accuracy: 0.9375\n",
      "Epoch [50/50], Batch [271/313], Loss: 0.1574, Accuracy: 0.9688\n",
      "Epoch [50/50], Batch [281/313], Loss: 0.1703, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [291/313], Loss: 0.4634, Accuracy: 0.8438\n",
      "Epoch [50/50], Batch [301/313], Loss: 0.3094, Accuracy: 0.9062\n",
      "Epoch [50/50], Batch [311/313], Loss: 0.1507, Accuracy: 0.9375\n",
      "Finished epoch 50/50, Average Loss: 0.2533, Average Accuracy: 0.9203\n",
      "Epoch duration: 2800.64 seconds, Estimated time remaining: 0.00 minutes\n",
      "Training completed in 1054.24 minutes!\n",
      "Total <unk> tokens encountered: 0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#code 8\n",
    "import json\n",
    "import os\n",
    "import random\n",
    "import nltk\n",
    "from collections import Counter\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.nn.utils.rnn import pad_sequence\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms, models\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "\n",
    "# Set the NLTK data path and download 'punkt'\n",
    "nltk.data.path.append(r'C:\\Users\\Hisoka\\nltk_data')\n",
    "nltk.download('punkt')\n",
    "\n",
    "# Function to load JSON data\n",
    "def load_json(file_path):\n",
    "    with open(file_path, 'r') as f:\n",
    "        return json.load(f)\n",
    "\n",
    "# Load the datasets\n",
    "question_answers_file = r'C:\\Users\\Hisoka\\Desktop\\grat\\question_answers.json'\n",
    "objects_file = r'C:\\Users\\Hisoka\\Desktop\\grat\\objects.json'\n",
    "relationships_file = r'C:\\Users\\Hisoka\\Desktop\\grat\\relationships.json'\n",
    "image_folder = r'C:\\Users\\Hisoka\\Desktop\\grat\\VG_100K'\n",
    "\n",
    "question_answers_data = load_json(question_answers_file)\n",
    "objects_data = load_json(objects_file)\n",
    "relationships_data = load_json(relationships_file)\n",
    "\n",
    "# Extract \"what\" questions\n",
    "what_questions = []\n",
    "for item in question_answers_data:\n",
    "    for qa in item['qas']:\n",
    "        if qa['question'].lower().startswith('what'):\n",
    "            what_questions.append({\n",
    "                'image_id': qa['image_id'],\n",
    "                'question': qa['question'],\n",
    "                'answer': qa['answer']\n",
    "            })\n",
    "\n",
    "# Sample a subset of \"what\" questions to speed up processing\n",
    "sample_size = 10000\n",
    "sampled_what_questions = random.sample(what_questions, min(sample_size, len(what_questions)))\n",
    "\n",
    "# Check class distribution\n",
    "answer_counts = Counter([qa['answer'] for qa in sampled_what_questions])\n",
    "print(\"Class distribution:\", answer_counts)\n",
    "\n",
    "# Tokenize and build vocabulary using NLTK\n",
    "def tokenize(text):\n",
    "    return nltk.word_tokenize(text.lower())\n",
    "\n",
    "# Build vocabularies\n",
    "question_tokens = [token for qa in sampled_what_questions for token in tokenize(qa['question'])]\n",
    "question_vocab = {token: idx for idx, (token, _) in enumerate(Counter(question_tokens).items(), start=1)}\n",
    "question_vocab['<unk>'] = 0\n",
    "\n",
    "answer_tokens = [qa['answer'] for qa in sampled_what_questions]  # Treat full answers as tokens\n",
    "answer_vocab = {token: idx for idx, token in enumerate(set(answer_tokens), start=1)}\n",
    "answer_vocab['<unk>'] = 0\n",
    "\n",
    "# Function to convert text to tensor\n",
    "class TextTransform:\n",
    "    def __init__(self, vocab):\n",
    "        self.vocab = vocab\n",
    "\n",
    "    def __call__(self, text):\n",
    "        return torch.tensor([self.vocab.get(token, self.vocab['<unk>']) for token in tokenize(text)])\n",
    "\n",
    "# Initialize TextTransform for questions\n",
    "question_transform = TextTransform(question_vocab)\n",
    "\n",
    "# Define the VQA Dataset\n",
    "class VQADataset(Dataset):\n",
    "    def __init__(self, data, image_folder, transform=None, question_transform=None, answer_vocab=None):\n",
    "        self.data = data\n",
    "        self.image_folder = image_folder\n",
    "        self.transform = transform\n",
    "        self.question_transform = question_transform\n",
    "        self.answer_vocab = answer_vocab\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        item = self.data[idx]\n",
    "        image_path = os.path.join(self.image_folder, f\"{item['image_id']}.jpg\")\n",
    "        try:\n",
    "            image = Image.open(image_path).convert('RGB')\n",
    "        except FileNotFoundError:\n",
    "            print(f\"Image file {image_path} not found.\")\n",
    "            raise\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading image {image_path}: {e}\")\n",
    "            raise\n",
    "\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        question = item['question']\n",
    "        answer = item['answer']\n",
    "        question_tensor = self.question_transform(question)\n",
    "        answer_tensor = torch.tensor(self.answer_vocab.get(answer, self.answer_vocab['<unk>']))  # Convert answer to a single integer\n",
    "        return image, question_tensor, answer_tensor\n",
    "\n",
    "# Define the transforms for the images with data augmentation\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomRotation(10),\n",
    "    transforms.ToTensor(),\n",
    "])\n",
    "\n",
    "# Create the dataset and data loader\n",
    "vqa_dataset = VQADataset(sampled_what_questions, image_folder, transform=transform, \n",
    "                         question_transform=question_transform, answer_vocab=answer_vocab)\n",
    "\n",
    "def collate_fn(batch):\n",
    "    images, questions, answers = zip(*batch)\n",
    "    images = torch.stack(images)\n",
    "    questions = pad_sequence(questions, batch_first=True, padding_value=0)\n",
    "    answers = torch.stack(answers)\n",
    "    return images, questions, answers\n",
    "\n",
    "data_loader = DataLoader(vqa_dataset, batch_size=32, shuffle=True, collate_fn=collate_fn)\n",
    "\n",
    "# Define the VQA Model\n",
    "class VQAModel(nn.Module):\n",
    "    def __init__(self, vocab_size, num_classes):\n",
    "        super(VQAModel, self).__init__()\n",
    "        # Image feature extraction\n",
    "        self.cnn = models.resnet18(weights=models.ResNet18_Weights.IMAGENET1K_V1)\n",
    "        self.cnn.fc = nn.Linear(self.cnn.fc.in_features, 512)\n",
    "        # Question processing\n",
    "        self.embedding = nn.Embedding(vocab_size, 300)\n",
    "        self.rnn = nn.LSTM(input_size=300, hidden_size=512, num_layers=2, batch_first=True)\n",
    "        # Combining features\n",
    "        self.fc1 = nn.Linear(1024, 512)\n",
    "        self.fc2 = nn.Linear(512, num_classes)\n",
    "\n",
    "    def forward(self, image, question):\n",
    "        # Image features\n",
    "        image_features = self.cnn(image)\n",
    "        # Question features\n",
    "        question = self.embedding(question)\n",
    "        question_features, _ = self.rnn(question)\n",
    "        question_features = question_features[:, -1, :]  # Get the last hidden state\n",
    "        # Combine features\n",
    "        combined_features = torch.cat((image_features, question_features), dim=1)\n",
    "        combined_features = self.fc1(combined_features)\n",
    "        output = self.fc2(combined_features)\n",
    "        return output\n",
    "\n",
    "# Hyperparameters\n",
    "vocab_size = len(question_vocab)\n",
    "num_classes = len(answer_vocab)  # Number of unique answers\n",
    "learning_rate = 0.001  # Reduced learning rate\n",
    "num_epochs = 50\n",
    "\n",
    "# Initialize the model, loss function, and optimizer\n",
    "model = VQAModel(vocab_size, num_classes)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
    "\n",
    "# Function to calculate accuracy\n",
    "def calculate_accuracy(outputs, labels):\n",
    "    _, preds = torch.max(outputs, 1)\n",
    "    corrects = torch.sum(preds == labels).item()\n",
    "    accuracy = corrects / labels.size(0)\n",
    "    return accuracy\n",
    "\n",
    "# Training loop\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)\n",
    "\n",
    "total_start_time = time.time()\n",
    "unk_count = 0  # Counter for <unk> tokens\n",
    "\n",
    "# For storing loss and accuracy history\n",
    "train_losses = []\n",
    "train_accuracies = []\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    print(f\"Starting epoch {epoch+1}/{num_epochs}\")\n",
    "    epoch_start_time = time.time()\n",
    "    epoch_loss = 0.0\n",
    "    epoch_accuracy = 0.0\n",
    "    num_batches = 0\n",
    "\n",
    "    for batch_idx, (images, questions, answers) in enumerate(data_loader):\n",
    "        images = images.to(device)\n",
    "        questions = questions.to(device)\n",
    "        answers = answers.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images, questions)\n",
    "        loss = criterion(outputs, answers)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        accuracy = calculate_accuracy(outputs, answers)\n",
    "\n",
    "        epoch_loss += loss.item()\n",
    "        epoch_accuracy += accuracy\n",
    "        num_batches += 1\n",
    "\n",
    "        if batch_idx % 10 == 0:  # Adjust this number to print less or more frequently\n",
    "            print(f\"Epoch [{epoch+1}/{num_epochs}], Batch [{batch_idx+1}/{len(data_loader)}], Loss: {loss.item():.4f}, Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "    epoch_loss /= num_batches\n",
    "    epoch_accuracy /= num_batches\n",
    "\n",
    "    train_losses.append(epoch_loss)\n",
    "    train_accuracies.append(epoch_accuracy)\n",
    "\n",
    "    epoch_end_time = time.time()\n",
    "    epoch_duration = epoch_end_time - epoch_start_time\n",
    "    remaining_epochs = num_epochs - (epoch + 1)\n",
    "    estimated_time_remaining = epoch_duration * remaining_epochs\n",
    "\n",
    "    print(f\"Finished epoch {epoch+1}/{num_epochs}, Average Loss: {epoch_loss:.4f}, Average Accuracy: {epoch_accuracy:.4f}\")\n",
    "    print(f\"Epoch duration: {epoch_duration:.2f} seconds, Estimated time remaining: {estimated_time_remaining/60:.2f} minutes\")\n",
    "\n",
    "total_end_time = time.time()\n",
    "total_duration = total_end_time - total_start_time\n",
    "print(f\"Training completed in {total_duration/60:.2f} minutes!\")\n",
    "\n",
    "# Print the number of <unk> tokens encountered during training\n",
    "print(f\"Total <unk> tokens encountered: {unk_count}\")\n",
    "\n",
    "# Plot training history\n",
    "def plot_history(train_losses, train_accuracies):\n",
    "    epochs = range(1, len(train_losses) + 1)\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(epochs, train_losses, label='Training Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Training Loss Over Epochs')\n",
    "    plt.legend()\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(epochs, train_accuracies, label='Training Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.title('Training Accuracy Over Epochs')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "plot_history(train_losses, train_accuracies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a89767c-2689-4bfb-96f1-7225f9dca489",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\Hisoka\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting epoch 1/50\n",
      "Epoch [1/50], Batch [1/250], Loss: 6.8483, Accuracy: 0.0000\n",
      "Epoch [1/50], Batch [11/250], Loss: 4.9425, Accuracy: 0.3125\n",
      "Epoch [1/50], Batch [21/250], Loss: 4.2590, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [31/250], Loss: 4.4283, Accuracy: 0.3438\n",
      "Epoch [1/50], Batch [41/250], Loss: 4.3015, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [51/250], Loss: 4.2361, Accuracy: 0.3125\n",
      "Epoch [1/50], Batch [61/250], Loss: 3.5277, Accuracy: 0.2188\n",
      "Epoch [1/50], Batch [71/250], Loss: 5.0149, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [81/250], Loss: 4.1443, Accuracy: 0.1875\n",
      "Epoch [1/50], Batch [91/250], Loss: 4.0086, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [101/250], Loss: 4.0343, Accuracy: 0.1250\n",
      "Epoch [1/50], Batch [111/250], Loss: 3.2727, Accuracy: 0.3750\n",
      "Epoch [1/50], Batch [121/250], Loss: 4.3792, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [131/250], Loss: 3.9784, Accuracy: 0.2812\n",
      "Epoch [1/50], Batch [141/250], Loss: 3.5689, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [151/250], Loss: 4.0113, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [161/250], Loss: 3.6762, Accuracy: 0.3438\n",
      "Epoch [1/50], Batch [171/250], Loss: 3.5803, Accuracy: 0.2812\n",
      "Epoch [1/50], Batch [181/250], Loss: 3.8880, Accuracy: 0.1562\n",
      "Epoch [1/50], Batch [191/250], Loss: 3.3927, Accuracy: 0.3438\n",
      "Epoch [1/50], Batch [201/250], Loss: 2.9770, Accuracy: 0.2812\n",
      "Epoch [1/50], Batch [211/250], Loss: 4.0040, Accuracy: 0.2500\n",
      "Epoch [1/50], Batch [221/250], Loss: 4.8127, Accuracy: 0.1562\n",
      "Epoch [1/50], Batch [231/250], Loss: 4.6103, Accuracy: 0.0938\n",
      "Epoch [1/50], Batch [241/250], Loss: 3.8667, Accuracy: 0.1562\n",
      "Finished epoch 1/50, Average Train Loss: 4.1194, Average Train Accuracy: 0.2510\n",
      "Average Validation Loss: 3.7229, Average Validation Accuracy: 0.2808\n",
      "Epoch duration: 2980.78 seconds, Estimated time remaining: 2434.30 minutes\n",
      "Starting epoch 2/50\n",
      "Epoch [2/50], Batch [1/250], Loss: 3.8862, Accuracy: 0.2500\n",
      "Epoch [2/50], Batch [11/250], Loss: 3.8633, Accuracy: 0.2812\n",
      "Epoch [2/50], Batch [21/250], Loss: 3.7911, Accuracy: 0.2500\n",
      "Epoch [2/50], Batch [31/250], Loss: 3.9750, Accuracy: 0.3125\n",
      "Epoch [2/50], Batch [41/250], Loss: 3.7723, Accuracy: 0.2188\n",
      "Epoch [2/50], Batch [51/250], Loss: 3.9723, Accuracy: 0.2500\n",
      "Epoch [2/50], Batch [61/250], Loss: 4.1130, Accuracy: 0.2812\n",
      "Epoch [2/50], Batch [71/250], Loss: 3.9338, Accuracy: 0.2812\n",
      "Epoch [2/50], Batch [81/250], Loss: 3.3431, Accuracy: 0.3438\n",
      "Epoch [2/50], Batch [91/250], Loss: 3.0757, Accuracy: 0.2500\n",
      "Epoch [2/50], Batch [101/250], Loss: 4.1174, Accuracy: 0.1875\n",
      "Epoch [2/50], Batch [111/250], Loss: 4.2310, Accuracy: 0.2812\n",
      "Epoch [2/50], Batch [121/250], Loss: 4.2122, Accuracy: 0.1250\n",
      "Epoch [2/50], Batch [131/250], Loss: 4.3096, Accuracy: 0.1562\n",
      "Epoch [2/50], Batch [141/250], Loss: 5.1321, Accuracy: 0.0938\n",
      "Epoch [2/50], Batch [151/250], Loss: 4.5566, Accuracy: 0.2188\n",
      "Epoch [2/50], Batch [161/250], Loss: 4.5295, Accuracy: 0.2188\n",
      "Epoch [2/50], Batch [171/250], Loss: 3.9102, Accuracy: 0.2812\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import random\n",
    "import nltk\n",
    "from collections import Counter\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.nn.utils.rnn import pad_sequence\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms, models\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "\n",
    "# Set the NLTK data path and download 'punkt'\n",
    "nltk.data.path.append(r'C:\\Users\\Hisoka\\nltk_data')\n",
    "nltk.download('punkt')\n",
    "\n",
    "# Function to load JSON data\n",
    "def load_json(file_path):\n",
    "    with open(file_path, 'r') as f:\n",
    "        return json.load(f)\n",
    "\n",
    "# Load the datasets\n",
    "objects_file = r'C:\\Users\\Hisoka\\Desktop\\grat\\objects.json'\n",
    "relationships_file = r'C:\\Users\\Hisoka\\Desktop\\grat\\relationships.json'\n",
    "image_folder = r'C:\\Users\\Hisoka\\Desktop\\grat\\VG_100K'\n",
    "\n",
    "objects_data = load_json(objects_file)\n",
    "relationships_data = load_json(relationships_file)\n",
    "\n",
    "# Extract relationships\n",
    "relationships = []\n",
    "for item in relationships_data:\n",
    "    image_id = item['image_id']\n",
    "    for rel in item['relationships']:\n",
    "        relationships.append({\n",
    "            'image_id': image_id,\n",
    "            'subject_id': rel['subject']['object_id'],\n",
    "            'object_id': rel['object']['object_id'],\n",
    "            'predicate': rel['predicate']\n",
    "        })\n",
    "\n",
    "# Sample a subset of relationships to speed up processing\n",
    "sample_size = 10000\n",
    "sampled_relationships = random.sample(relationships, min(sample_size, len(relationships)))\n",
    "\n",
    "# Split data into training and validation sets\n",
    "train_split = int(0.8 * len(sampled_relationships))\n",
    "train_relationships = sampled_relationships[:train_split]\n",
    "val_relationships = sampled_relationships[train_split:]\n",
    "\n",
    "# Build vocabularies\n",
    "def build_vocab(data, key):\n",
    "    tokens = [item[key] for item in data]\n",
    "    vocab = {token: idx for idx, token in enumerate(set(tokens), start=1)}\n",
    "    vocab['<unk>'] = 0\n",
    "    return vocab\n",
    "\n",
    "predicate_vocab = build_vocab(sampled_relationships, 'predicate')\n",
    "\n",
    "# Function to convert text to tensor\n",
    "class TextTransform:\n",
    "    def __init__(self, vocab):\n",
    "        self.vocab = vocab\n",
    "\n",
    "    def __call__(self, text):\n",
    "        return torch.tensor([self.vocab.get(text, self.vocab['<unk>'])])\n",
    "\n",
    "# Initialize TextTransform for predicates\n",
    "predicate_transform = TextTransform(predicate_vocab)\n",
    "\n",
    "# Define the VQA Dataset\n",
    "class VQADataset(Dataset):\n",
    "    def __init__(self, data, image_folder, transform=None, predicate_transform=None):\n",
    "        self.data = data\n",
    "        self.image_folder = image_folder\n",
    "        self.transform = transform\n",
    "        self.predicate_transform = predicate_transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        item = self.data[idx]\n",
    "        image_path = os.path.join(self.image_folder, f\"{item['image_id']}.jpg\")\n",
    "        try:\n",
    "            image = Image.open(image_path).convert('RGB')\n",
    "        except FileNotFoundError:\n",
    "            print(f\"Image file {image_path} not found.\")\n",
    "            raise\n",
    "        except Exception as e:\n",
    "            print(f\"Error loading image {image_path}: {e}\")\n",
    "            raise\n",
    "\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        \n",
    "        predicate = item['predicate']\n",
    "        predicate_tensor = self.predicate_transform(predicate)\n",
    "\n",
    "        return image, predicate_tensor\n",
    "\n",
    "# Define the transforms for the images with data augmentation\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),\n",
    "    transforms.RandomHorizontalFlip(),\n",
    "    transforms.RandomRotation(10),\n",
    "    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),\n",
    "    transforms.ToTensor(),\n",
    "])\n",
    "\n",
    "# Create the datasets and data loaders\n",
    "train_dataset = VQADataset(train_relationships, image_folder, transform=transform, predicate_transform=predicate_transform)\n",
    "val_dataset = VQADataset(val_relationships, image_folder, transform=transform, predicate_transform=predicate_transform)\n",
    "\n",
    "def collate_fn(batch):\n",
    "    images, predicates = zip(*batch)\n",
    "    images = torch.stack(images)\n",
    "    predicates = pad_sequence(predicates, batch_first=True, padding_value=0)\n",
    "    return images, predicates\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, collate_fn=collate_fn)\n",
    "val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, collate_fn=collate_fn)\n",
    "\n",
    "# Define the VQA Model\n",
    "class VQAModel(nn.Module):\n",
    "    def __init__(self, num_classes):\n",
    "        super(VQAModel, self).__init__()\n",
    "        # Image feature extraction\n",
    "        self.cnn = models.resnet50(weights=models.ResNet50_Weights.IMAGENET1K_V1)\n",
    "        self.cnn.fc = nn.Linear(self.cnn.fc.in_features, 512)\n",
    "        # Combining features\n",
    "        self.fc1 = nn.Linear(512, 512)\n",
    "        self.dropout = nn.Dropout(0.5)\n",
    "        self.fc2 = nn.Linear(512, num_classes)\n",
    "\n",
    "    def forward(self, image):\n",
    "        # Image features\n",
    "        image_features = self.cnn(image)\n",
    "        # Combine features\n",
    "        combined_features = self.fc1(image_features)\n",
    "        combined_features = self.dropout(combined_features)\n",
    "        output = self.fc2(combined_features)\n",
    "        return output\n",
    "\n",
    "# Hyperparameters\n",
    "num_classes = len(predicate_vocab)  # Number of unique predicates\n",
    "learning_rate = 0.0001  # Reduced learning rate\n",
    "num_epochs = 50\n",
    "\n",
    "# Initialize the model, loss function, and optimizer\n",
    "model = VQAModel(num_classes)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
    "\n",
    "# Function to calculate accuracy\n",
    "def calculate_accuracy(outputs, labels):\n",
    "    _, preds = torch.max(outputs, 1)\n",
    "    corrects = torch.sum(preds == labels).item()\n",
    "    accuracy = corrects / labels.size(0)\n",
    "    return accuracy\n",
    "\n",
    "# Training loop\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)\n",
    "\n",
    "total_start_time = time.time()\n",
    "\n",
    "# For storing loss and accuracy history\n",
    "train_losses = []\n",
    "train_accuracies = []\n",
    "val_losses = []\n",
    "val_accuracies = []\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    print(f\"Starting epoch {epoch+1}/{num_epochs}\")\n",
    "    epoch_start_time = time.time()\n",
    "    epoch_train_loss = 0.0\n",
    "    epoch_train_accuracy = 0.0\n",
    "    num_train_batches = 0\n",
    "\n",
    "    model.train()\n",
    "    for batch_idx, (images, predicates) in enumerate(train_loader):\n",
    "        images = images.to(device)\n",
    "        predicates = predicates.squeeze(1).to(device)  # Adjust shape for CrossEntropyLoss\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images)\n",
    "        loss = criterion(outputs, predicates)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        accuracy = calculate_accuracy(outputs, predicates)\n",
    "\n",
    "        epoch_train_loss += loss.item()\n",
    "        epoch_train_accuracy += accuracy\n",
    "        num_train_batches += 1\n",
    "\n",
    "        if batch_idx % 10 == 0:  # Adjust this number to print less or more frequently\n",
    "            print(f\"Epoch [{epoch+1}/{num_epochs}], Batch [{batch_idx+1}/{len(train_loader)}], Loss: {loss.item():.4f}, Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "    epoch_train_loss /= num_train_batches\n",
    "    epoch_train_accuracy /= num_train_batches\n",
    "\n",
    "    train_losses.append(epoch_train_loss)\n",
    "    train_accuracies.append(epoch_train_accuracy)\n",
    "\n",
    "    # Validation\n",
    "    model.eval()\n",
    "    epoch_val_loss = 0.0\n",
    "    epoch_val_accuracy = 0.0\n",
    "    num_val_batches = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (images, predicates) in enumerate(val_loader):\n",
    "            images = images.to(device)\n",
    "            predicates = predicates.squeeze(1).to(device)  # Adjust shape for CrossEntropyLoss\n",
    "\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, predicates)\n",
    "\n",
    "            accuracy = calculate_accuracy(outputs, predicates)\n",
    "\n",
    "            epoch_val_loss += loss.item()\n",
    "            epoch_val_accuracy += accuracy\n",
    "            num_val_batches += 1\n",
    "\n",
    "    epoch_val_loss /= num_val_batches\n",
    "    epoch_val_accuracy /= num_val_batches\n",
    "\n",
    "    val_losses.append(epoch_val_loss)\n",
    "    val_accuracies.append(epoch_val_accuracy)\n",
    "\n",
    "    epoch_end_time = time.time()\n",
    "    epoch_duration = epoch_end_time - epoch_start_time\n",
    "    remaining_epochs = num_epochs - (epoch + 1)\n",
    "    estimated_time_remaining = epoch_duration * remaining_epochs\n",
    "\n",
    "    print(f\"Finished epoch {epoch+1}/{num_epochs}, Average Train Loss: {epoch_train_loss:.4f}, Average Train Accuracy: {epoch_train_accuracy:.4f}\")\n",
    "    print(f\"Average Validation Loss: {epoch_val_loss:.4f}, Average Validation Accuracy: {epoch_val_accuracy:.4f}\")\n",
    "    print(f\"Epoch duration: {epoch_duration:.2f} seconds, Estimated time remaining: {estimated_time_remaining/60:.2f} minutes\")\n",
    "\n",
    "total_end_time = time.time()\n",
    "total_duration = total_end_time - total_start_time\n",
    "print(f\"Training completed in {total_duration/60:.2f} minutes!\")\n",
    "\n",
    "# Plot training and validation history\n",
    "def plot_history(train_losses, train_accuracies, val_losses, val_accuracies):\n",
    "    epochs = range(1, len(train_losses) + 1)\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(epochs, train_losses, label='Training Loss')\n",
    "    plt.plot(epochs, val_losses, label='Validation Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.title('Training and Validation Loss Over Epochs')\n",
    "    plt.legend()\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(epochs, train_accuracies, label='Training Accuracy')\n",
    "    plt.plot(epochs, val_accuracies, label='Validation Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.title('Training and Validation Accuracy Over Epochs')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n",
    "plot_history(train_losses, train_accuracies, val_losses, val_accuracies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf118e4d-f3bd-46c1-a28b-cafe4186012d",
   "metadata": {},
   "outputs": [],
   "source": [
    "code that link between ima"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (cpu_env)",
   "language": "python",
   "name": "cpu_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
